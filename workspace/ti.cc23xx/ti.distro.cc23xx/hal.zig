pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const __copy_table_t = c_int;
pub const NonMaskableInt_IRQn: c_int = -14;
pub const HardFault_IRQn: c_int = -13;
pub const SVCall_IRQn: c_int = -5;
pub const PendSV_IRQn: c_int = -2;
pub const SysTick_IRQn: c_int = -1;
pub const CPUIRQ0_IRQn: c_int = 0;
pub const CPUIRQ1_IRQn: c_int = 1;
pub const CPUIRQ2_IRQn: c_int = 2;
pub const CPUIRQ3_IRQn: c_int = 3;
pub const CPUIRQ4_IRQn: c_int = 4;
pub const GPIO_COMB_IRQn: c_int = 5;
pub const LRFD_IRQ0_IRQn: c_int = 6;
pub const LRFD_IRQ1_IRQn: c_int = 7;
pub const DMA_DONE_COMB_IRQn: c_int = 8;
pub const AES_COMB_IRQn: c_int = 9;
pub const SPI0_COMB_IRQn: c_int = 10;
pub const UART0_COMB_IRQn: c_int = 11;
pub const I2C0_IRQ_IRQn: c_int = 12;
pub const LGPT0_COMB_IRQn: c_int = 13;
pub const LGPT1_COMB_IRQn: c_int = 14;
pub const ADC_COMB_IRQn: c_int = 15;
pub const CPUIRQ16_IRQn: c_int = 16;
pub const LGPT2_COMB_IRQn: c_int = 17;
pub const LGPT3_COMB_IRQn: c_int = 18;
pub const enum_IRQn = c_int;
pub const IRQn_Type = enum_IRQn;
pub const struct_T_UINT32 = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct_T_UINT16_WRITE = extern struct {
    v: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct_T_UINT16_READ = extern struct {
    v: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct_T_UINT32_WRITE = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct_T_UINT32_READ = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
};
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:199:27: warning: unable to translate function, demoted to extern
pub extern fn __enable_irq() void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:210:27: warning: unable to translate function, demoted to extern
pub extern fn __disable_irq() void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:221:31: warning: unable to translate function, demoted to extern
pub extern fn __get_CONTROL() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:251:27: warning: unable to translate function, demoted to extern
pub extern fn __set_CONTROL(arg_control: u32) void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:275:31: warning: unable to translate function, demoted to extern
pub extern fn __get_IPSR() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:289:31: warning: unable to translate function, demoted to extern
pub extern fn __get_APSR() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:303:31: warning: unable to translate function, demoted to extern
pub extern fn __get_xPSR() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:317:31: warning: unable to translate function, demoted to extern
pub extern fn __get_PSP() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:347:27: warning: unable to translate function, demoted to extern
pub extern fn __set_PSP(arg_topOfProcStack: u32) void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:371:31: warning: unable to translate function, demoted to extern
pub extern fn __get_MSP() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:401:27: warning: unable to translate function, demoted to extern
pub extern fn __set_MSP(arg_topOfMainStack: u32) void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:452:31: warning: unable to translate function, demoted to extern
pub extern fn __get_PRIMASK() u32;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:482:27: warning: unable to translate function, demoted to extern
pub extern fn __set_PRIMASK(arg_priMask: u32) void;
pub inline fn __get_FPSCR() u32 {
    return @as(c_uint, 0);
}
pub inline fn __set_FPSCR(arg_fpscr: u32) void {
    var fpscr = arg_fpscr;
    _ = &fpscr;
    _ = &fpscr;
}
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:936:27: warning: unable to translate function, demoted to extern
pub extern fn __ISB() void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:947:27: warning: unable to translate function, demoted to extern
pub extern fn __DSB() void;
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:958:27: warning: unable to translate function, demoted to extern
pub extern fn __DMB() void;
pub inline fn __REV(arg_value: u32) u32 {
    var value = arg_value;
    _ = &value;
    return __builtin_bswap32(value);
}
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:989:31: warning: unable to translate function, demoted to extern
pub extern fn __REV16(arg_value: u32) u32;
pub inline fn __REVSH(arg_value: i16) i16 {
    var value = arg_value;
    _ = &value;
    return @as(i16, @bitCast(__builtin_bswap16(@as(c_ushort, @bitCast(value)))));
}
pub inline fn __ROR(arg_op1: u32, arg_op2: u32) u32 {
    var op1 = arg_op1;
    _ = &op1;
    var op2 = arg_op2;
    _ = &op2;
    op2 %= @as(u32, @bitCast(@as(c_uint, 32)));
    if (op2 == @as(c_uint, 0)) {
        return op1;
    }
    return (op1 >> @intCast(op2)) | (op1 << @intCast(@as(c_uint, 32) -% op2));
}
pub inline fn __RBIT(arg_value: u32) u32 {
    var value = arg_value;
    _ = &value;
    var result: u32 = undefined;
    _ = &result;
    var s: u32 = (@as(c_uint, 4) *% @as(c_uint, 8)) -% @as(c_uint, 1);
    _ = &s;
    result = value;
    {
        value >>= @intCast(@as(c_uint, 1));
        while (value != @as(c_uint, 0)) : (value >>= @intCast(@as(c_uint, 1))) {
            result <<= @intCast(@as(c_uint, 1));
            result |= @as(u32, @bitCast(value & @as(c_uint, 1)));
            s -%= 1;
        }
    }
    result <<= @intCast(s);
    return result;
}
pub inline fn __CLZ(arg_value: u32) u8 {
    var value = arg_value;
    _ = &value;
    if (value == @as(c_uint, 0)) {
        return 32;
    }
    return @as(u8, @bitCast(@as(i8, @truncate(__builtin_clz(value)))));
}
pub inline fn __SSAT(arg_val: i32, arg_sat: u32) i32 {
    var val = arg_val;
    _ = &val;
    var sat = arg_sat;
    _ = &sat;
    if ((sat >= @as(c_uint, 1)) and (sat <= @as(c_uint, 32))) {
        const max: i32 = @as(i32, @bitCast((@as(c_uint, 1) << @intCast(sat -% @as(c_uint, 1))) -% @as(c_uint, 1)));
        _ = &max;
        const min: i32 = -@as(c_int, 1) - max;
        _ = &min;
        if (val > max) {
            return max;
        } else if (val < min) {
            return min;
        }
    }
    return val;
}
pub inline fn __USAT(arg_val: i32, arg_sat: u32) u32 {
    var val = arg_val;
    _ = &val;
    var sat = arg_sat;
    _ = &sat;
    if (sat <= @as(c_uint, 31)) {
        const max: u32 = (@as(c_uint, 1) << @intCast(sat)) -% @as(c_uint, 1);
        _ = &max;
        if (val > @as(i32, @bitCast(max))) {
            return max;
        } else if (val < @as(c_int, 0)) {
            return 0;
        }
    }
    return @as(u32, @bitCast(val));
}
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:214:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_1 = opaque {};
pub const APSR_Type = extern union {
    b: struct_unnamed_1,
    w: u32,
};
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:244:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_2 = opaque {};
pub const IPSR_Type = extern union {
    b: struct_unnamed_2,
    w: u32,
};
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:262:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_3 = opaque {};
pub const xPSR_Type = extern union {
    b: struct_unnamed_3,
    w: u32,
};
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:301:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_4 = opaque {};
pub const CONTROL_Type = extern union {
    b: struct_unnamed_4,
    w: u32,
};
pub const NVIC_Type = extern struct {
    ISER: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED0: [31]u32 = @import("std").mem.zeroes([31]u32),
    ICER: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED1: [31]u32 = @import("std").mem.zeroes([31]u32),
    ISPR: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED2: [31]u32 = @import("std").mem.zeroes([31]u32),
    ICPR: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED3: [31]u32 = @import("std").mem.zeroes([31]u32),
    RESERVED4: [64]u32 = @import("std").mem.zeroes([64]u32),
    IP: [8]u32 = @import("std").mem.zeroes([8]u32),
};
pub const SCB_Type = extern struct {
    CPUID: u32 = @import("std").mem.zeroes(u32),
    ICSR: u32 = @import("std").mem.zeroes(u32),
    VTOR: u32 = @import("std").mem.zeroes(u32),
    AIRCR: u32 = @import("std").mem.zeroes(u32),
    SCR: u32 = @import("std").mem.zeroes(u32),
    CCR: u32 = @import("std").mem.zeroes(u32),
    RESERVED1: u32 = @import("std").mem.zeroes(u32),
    SHP: [2]u32 = @import("std").mem.zeroes([2]u32),
    SHCSR: u32 = @import("std").mem.zeroes(u32),
};
pub const SysTick_Type = extern struct {
    CTRL: u32 = @import("std").mem.zeroes(u32),
    LOAD: u32 = @import("std").mem.zeroes(u32),
    VAL: u32 = @import("std").mem.zeroes(u32),
    CALIB: u32 = @import("std").mem.zeroes(u32),
};
pub fn __NVIC_EnableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISER[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_GetEnableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISER[@as(c_uint, 0)]))) & (@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31)))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return @as(c_uint, 0);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn __NVIC_DisableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ICER[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_GetPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISPR[@as(c_uint, 0)]))) & (@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31)))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return @as(c_uint, 0);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn __NVIC_SetPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISPR[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_ClearPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ICPR[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_SetPriority(arg_IRQn_1: IRQn_Type, arg_priority: u32) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var priority = arg_priority;
    _ = &priority;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)]))) & ~(@as(c_ulong, 255) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))))))) | (((priority << @intCast(@as(c_uint, 8) -% @as(c_uint, 2))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8)));
    } else {
        @as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)]))) & ~(@as(c_ulong, 255) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))))))) | (((priority << @intCast(@as(c_uint, 8) -% @as(c_uint, 2))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8)));
    }
}
pub fn __NVIC_GetPriority(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return ((@as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)] >> @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) >> @intCast(@as(c_uint, 8) -% @as(c_uint, 2));
    } else {
        return ((@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)] >> @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) >> @intCast(@as(c_uint, 8) -% @as(c_uint, 2));
    }
    return @import("std").mem.zeroes(u32);
}
pub fn NVIC_EncodePriority(arg_PriorityGroup: u32, arg_PreemptPriority: u32, arg_SubPriority: u32) callconv(.C) u32 {
    var PriorityGroup = arg_PriorityGroup;
    _ = &PriorityGroup;
    var PreemptPriority = arg_PreemptPriority;
    _ = &PreemptPriority;
    var SubPriority = arg_SubPriority;
    _ = &SubPriority;
    var PriorityGroupTmp: u32 = PriorityGroup & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))));
    _ = &PriorityGroupTmp;
    var PreemptPriorityBits: u32 = undefined;
    _ = &PreemptPriorityBits;
    var SubPriorityBits: u32 = undefined;
    _ = &SubPriorityBits;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))) > @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))) @as(u32, @bitCast(@as(c_uint, 2))) else @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))))));
    SubPriorityBits = if ((PriorityGroupTmp +% @as(u32, @bitCast(@as(c_uint, 2)))) < @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))))) @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0))))) else @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp))) -% @as(c_ulong, 7)) +% @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))))));
    return ((PreemptPriority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(PreemptPriorityBits)) -% @as(c_ulong, 1)))))) << @intCast(SubPriorityBits)) | (SubPriority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(SubPriorityBits)) -% @as(c_ulong, 1))))));
}
pub fn NVIC_DecodePriority(arg_Priority: u32, arg_PriorityGroup: u32, pPreemptPriority: [*c]u32, pSubPriority: [*c]u32) callconv(.C) void {
    var Priority = arg_Priority;
    _ = &Priority;
    var PriorityGroup = arg_PriorityGroup;
    _ = &PriorityGroup;
    _ = &pPreemptPriority;
    _ = &pSubPriority;
    var PriorityGroupTmp: u32 = PriorityGroup & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))));
    _ = &PriorityGroupTmp;
    var PreemptPriorityBits: u32 = undefined;
    _ = &PreemptPriorityBits;
    var SubPriorityBits: u32 = undefined;
    _ = &SubPriorityBits;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))) > @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))) @as(u32, @bitCast(@as(c_uint, 2))) else @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))))));
    SubPriorityBits = if ((PriorityGroupTmp +% @as(u32, @bitCast(@as(c_uint, 2)))) < @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))))) @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0))))) else @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp))) -% @as(c_ulong, 7)) +% @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))))));
    pPreemptPriority.* = (Priority >> @intCast(SubPriorityBits)) & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(PreemptPriorityBits)) -% @as(c_ulong, 1)))));
    pSubPriority.* = Priority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(SubPriorityBits)) -% @as(c_ulong, 1)))));
}
pub fn __NVIC_SetVector(arg_IRQn_1: IRQn_Type, arg_vector: u32) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var vector = arg_vector;
    _ = &vector;
    var vectors: [*c]u32 = @as([*c]u32, @ptrFromInt(@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.VTOR));
    _ = &vectors;
    (blk: {
        const tmp = @as(i32, @bitCast(IRQn_1)) + @as(c_int, 16);
        if (tmp >= 0) break :blk vectors + @as(usize, @intCast(tmp)) else break :blk vectors - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).* = vector;
}
pub fn __NVIC_GetVector(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var vectors: [*c]u32 = @as([*c]u32, @ptrFromInt(@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.VTOR));
    _ = &vectors;
    return (blk: {
        const tmp = @as(i32, @bitCast(IRQn_1)) + @as(c_int, 16);
        if (tmp >= 0) break :blk vectors + @as(usize, @intCast(tmp)) else break :blk vectors - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*;
}
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass

// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:987:34: warning: unable to translate function, demoted to extern
pub extern fn __NVIC_SystemReset() callconv(.C) noreturn;
pub fn SCB_GetFPUType() callconv(.C) u32 {
    return 0;
}
pub fn SysTick_Config(arg_ticks: u32) callconv(.C) u32 {
    var ticks = arg_ticks;
    _ = &ticks;
    if ((@as(c_ulong, @bitCast(@as(c_ulong, ticks))) -% @as(c_ulong, 1)) > @as(c_ulong, 16777215)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1)))));
    }
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.LOAD = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, ticks))) -% @as(c_ulong, 1)))));
    __NVIC_SetPriority(SysTick_IRQn, @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(2)) -% @as(c_ulong, 1))))));
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.VAL = 0;
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.CTRL = @as(u32, @bitCast(@as(c_uint, @truncate(((@as(c_ulong, 1) << @intCast(2)) | (@as(c_ulong, 1) << @intCast(1))) | @as(c_ulong, 1)))));
    return @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0)))));
}
pub const FPTR_VOID_VOID_T = ?*const fn () callconv(.C) void;
pub const FPTR_VOID_UINT8_T = ?*const fn (u8) callconv(.C) void;
pub const __UINT32 = c_uint;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):94:9
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):100:9
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):228:9
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):356:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):357:9
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __RTM__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// (no file):419:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):420:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):421:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):422:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):423:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):424:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):425:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):426:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):427:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):428:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):429:9
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:287:9
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:324:9
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:326:9
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:871:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:872:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:873:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:874:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`");
// C:\tools\zig-windows-x86_64-0.13.0\lib\include/stdint.h:875:9
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, @as(c_int, 0));
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __CC23X0R5_H__ = "";
pub const __SAUREGION_PRESENT = @as(c_uint, 0x0000);
pub const __DSP_PRESENT = @as(c_uint, 0x0000);
pub const __Vendor_SysTickConfig = @as(c_uint, 0x0000);
pub const __MPU_PRESENT = @as(c_uint, 0x0000);
pub const __FPU_PRESENT = @as(c_uint, 0x0000);
pub const __VTOR_PRESENT = @as(c_uint, 0x0001);
pub const __NVIC_PRIO_BITS = @as(c_uint, 0x0002);
pub const __CMSIS_GCC_H = "";
pub const __ASM = @compileError("unable to translate C expr: unexpected token '__asm'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:41:11
pub const __INLINE = @compileError("unable to translate C expr: unexpected token 'inline'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:44:11
pub const __STATIC_INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:47:11
pub const __STATIC_FORCEINLINE = @compileError("unable to translate macro: undefined identifier `always_inline`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:50:11
pub const __NO_RETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:53:11
pub const __USED = @compileError("unable to translate macro: undefined identifier `used`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:56:11
pub const __WEAK = @compileError("unable to translate macro: undefined identifier `weak`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:59:11
pub const __PACKED = @compileError("unable to translate macro: undefined identifier `packed`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:62:11
pub const __PACKED_STRUCT = @compileError("unable to translate macro: undefined identifier `packed`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:65:11
pub const __PACKED_UNION = @compileError("unable to translate macro: undefined identifier `packed`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:68:11
pub inline fn __UNALIGNED_UINT32(x: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]struct_T_UINT32, x).*.v) {
    _ = &x;
    return @import("std").zig.c_translation.cast([*c]struct_T_UINT32, x).*.v;
}
pub const __UNALIGNED_UINT16_WRITE = @compileError("unable to translate C expr: expected ')' instead got '='");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:84:11
pub const __UNALIGNED_UINT16_READ = @compileError("unable to translate C expr: unexpected token 'const'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:92:11
pub const __UNALIGNED_UINT32_WRITE = @compileError("unable to translate C expr: expected ')' instead got '='");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:100:11
pub const __UNALIGNED_UINT32_READ = @compileError("unable to translate C expr: unexpected token 'const'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:108:11
pub const __ALIGNED = @compileError("unable to translate macro: undefined identifier `aligned`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:111:11
pub const __RESTRICT = @compileError("unable to translate C expr: unexpected token '__restrict'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:114:11
pub const __COMPILER_BARRIER = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:117:11
pub const __PROGRAM_START = @compileError("unable to translate macro: undefined identifier `__cmsis_start`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:169:9
pub const __INITIAL_SP = @compileError("unable to translate macro: undefined identifier `__StackTop`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:173:9
pub const __STACK_LIMIT = @compileError("unable to translate macro: undefined identifier `__StackLimit`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:177:9
pub const __VECTOR_TABLE = @compileError("unable to translate macro: undefined identifier `__Vectors`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:181:9
pub const __VECTOR_TABLE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `used`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:185:9
pub inline fn __CMSIS_GCC_OUT_REG(r: anytype) @TypeOf("=r"(r)) {
    _ = &r;
    return "=r"(r);
}
pub inline fn __CMSIS_GCC_RW_REG(r: anytype) @TypeOf("+r"(r)) {
    _ = &r;
    return "+r"(r);
}
pub inline fn __CMSIS_GCC_USE_REG(r: anytype) @TypeOf("r"(r)) {
    _ = &r;
    return "r"(r);
}
pub const __NOP = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:906:9
pub const __WFI = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:912:9
pub const __WFE = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:920:9
pub const __SEV = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:927:9
pub const __BKPT = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/cmsis_gcc.h:1042:9
pub const __CORE_CM0PLUS_H_GENERIC = "";
pub const __CMSIS_VERSION_H = "";
pub const __CM_CMSIS_VERSION_MAIN = @as(c_uint, 5);
pub const __CM_CMSIS_VERSION_SUB = @as(c_uint, 4);
pub const __CM_CMSIS_VERSION = (__CM_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM_CMSIS_VERSION_SUB;
pub const __CM0PLUS_CMSIS_VERSION_MAIN = __CM_CMSIS_VERSION_MAIN;
pub const __CM0PLUS_CMSIS_VERSION_SUB = __CM_CMSIS_VERSION_SUB;
pub const __CM0PLUS_CMSIS_VERSION = (__CM0PLUS_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM0PLUS_CMSIS_VERSION_SUB;
pub const __CORTEX_M = @as(c_uint, 0);
pub const __FPU_USED = @as(c_uint, 0);
pub const __CMSIS_COMPILER_H = "";
pub const __CORE_CM0PLUS_H_DEPENDANT = "";
pub const __I = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:172:13
pub const __O = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:174:13
pub const __IO = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:175:13
pub const __IM = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:178:13
pub const __OM = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:179:13
pub const __IOM = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:180:13
pub const APSR_N_Pos = @as(c_uint, 31);
pub const APSR_N_Msk = @as(c_ulong, 1) << APSR_N_Pos;
pub const APSR_Z_Pos = @as(c_uint, 30);
pub const APSR_Z_Msk = @as(c_ulong, 1) << APSR_Z_Pos;
pub const APSR_C_Pos = @as(c_uint, 29);
pub const APSR_C_Msk = @as(c_ulong, 1) << APSR_C_Pos;
pub const APSR_V_Pos = @as(c_uint, 28);
pub const APSR_V_Msk = @as(c_ulong, 1) << APSR_V_Pos;
pub const IPSR_ISR_Pos = @as(c_uint, 0);
pub const IPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const xPSR_N_Pos = @as(c_uint, 31);
pub const xPSR_N_Msk = @as(c_ulong, 1) << xPSR_N_Pos;
pub const xPSR_Z_Pos = @as(c_uint, 30);
pub const xPSR_Z_Msk = @as(c_ulong, 1) << xPSR_Z_Pos;
pub const xPSR_C_Pos = @as(c_uint, 29);
pub const xPSR_C_Msk = @as(c_ulong, 1) << xPSR_C_Pos;
pub const xPSR_V_Pos = @as(c_uint, 28);
pub const xPSR_V_Msk = @as(c_ulong, 1) << xPSR_V_Pos;
pub const xPSR_T_Pos = @as(c_uint, 24);
pub const xPSR_T_Msk = @as(c_ulong, 1) << xPSR_T_Pos;
pub const xPSR_ISR_Pos = @as(c_uint, 0);
pub const xPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const CONTROL_SPSEL_Pos = @as(c_uint, 1);
pub const CONTROL_SPSEL_Msk = @as(c_ulong, 1) << CONTROL_SPSEL_Pos;
pub const CONTROL_nPRIV_Pos = @as(c_uint, 0);
pub const CONTROL_nPRIV_Msk = @as(c_ulong, 1);
pub const SCB_CPUID_IMPLEMENTER_Pos = @as(c_uint, 24);
pub const SCB_CPUID_IMPLEMENTER_Msk = @as(c_ulong, 0xFF) << SCB_CPUID_IMPLEMENTER_Pos;
pub const SCB_CPUID_VARIANT_Pos = @as(c_uint, 20);
pub const SCB_CPUID_VARIANT_Msk = @as(c_ulong, 0xF) << SCB_CPUID_VARIANT_Pos;
pub const SCB_CPUID_ARCHITECTURE_Pos = @as(c_uint, 16);
pub const SCB_CPUID_ARCHITECTURE_Msk = @as(c_ulong, 0xF) << SCB_CPUID_ARCHITECTURE_Pos;
pub const SCB_CPUID_PARTNO_Pos = @as(c_uint, 4);
pub const SCB_CPUID_PARTNO_Msk = @as(c_ulong, 0xFFF) << SCB_CPUID_PARTNO_Pos;
pub const SCB_CPUID_REVISION_Pos = @as(c_uint, 0);
pub const SCB_CPUID_REVISION_Msk = @as(c_ulong, 0xF);
pub const SCB_ICSR_NMIPENDSET_Pos = @as(c_uint, 31);
pub const SCB_ICSR_NMIPENDSET_Msk = @as(c_ulong, 1) << SCB_ICSR_NMIPENDSET_Pos;
pub const SCB_ICSR_PENDSVSET_Pos = @as(c_uint, 28);
pub const SCB_ICSR_PENDSVSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVSET_Pos;
pub const SCB_ICSR_PENDSVCLR_Pos = @as(c_uint, 27);
pub const SCB_ICSR_PENDSVCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVCLR_Pos;
pub const SCB_ICSR_PENDSTSET_Pos = @as(c_uint, 26);
pub const SCB_ICSR_PENDSTSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTSET_Pos;
pub const SCB_ICSR_PENDSTCLR_Pos = @as(c_uint, 25);
pub const SCB_ICSR_PENDSTCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTCLR_Pos;
pub const SCB_ICSR_ISRPREEMPT_Pos = @as(c_uint, 23);
pub const SCB_ICSR_ISRPREEMPT_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPREEMPT_Pos;
pub const SCB_ICSR_ISRPENDING_Pos = @as(c_uint, 22);
pub const SCB_ICSR_ISRPENDING_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPENDING_Pos;
pub const SCB_ICSR_VECTPENDING_Pos = @as(c_uint, 12);
pub const SCB_ICSR_VECTPENDING_Msk = @as(c_ulong, 0x1FF) << SCB_ICSR_VECTPENDING_Pos;
pub const SCB_ICSR_VECTACTIVE_Pos = @as(c_uint, 0);
pub const SCB_ICSR_VECTACTIVE_Msk = @as(c_ulong, 0x1FF);
pub const SCB_VTOR_TBLOFF_Pos = @as(c_uint, 8);
pub const SCB_VTOR_TBLOFF_Msk = @as(c_ulong, 0xFFFFFF) << SCB_VTOR_TBLOFF_Pos;
pub const SCB_AIRCR_VECTKEY_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEY_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEY_Pos;
pub const SCB_AIRCR_VECTKEYSTAT_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEYSTAT_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEYSTAT_Pos;
pub const SCB_AIRCR_ENDIANESS_Pos = @as(c_uint, 15);
pub const SCB_AIRCR_ENDIANESS_Msk = @as(c_ulong, 1) << SCB_AIRCR_ENDIANESS_Pos;
pub const SCB_AIRCR_SYSRESETREQ_Pos = @as(c_uint, 2);
pub const SCB_AIRCR_SYSRESETREQ_Msk = @as(c_ulong, 1) << SCB_AIRCR_SYSRESETREQ_Pos;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos = @as(c_uint, 1);
pub const SCB_AIRCR_VECTCLRACTIVE_Msk = @as(c_ulong, 1) << SCB_AIRCR_VECTCLRACTIVE_Pos;
pub const SCB_SCR_SEVONPEND_Pos = @as(c_uint, 4);
pub const SCB_SCR_SEVONPEND_Msk = @as(c_ulong, 1) << SCB_SCR_SEVONPEND_Pos;
pub const SCB_SCR_SLEEPDEEP_Pos = @as(c_uint, 2);
pub const SCB_SCR_SLEEPDEEP_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPDEEP_Pos;
pub const SCB_SCR_SLEEPONEXIT_Pos = @as(c_uint, 1);
pub const SCB_SCR_SLEEPONEXIT_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPONEXIT_Pos;
pub const SCB_CCR_STKALIGN_Pos = @as(c_uint, 9);
pub const SCB_CCR_STKALIGN_Msk = @as(c_ulong, 1) << SCB_CCR_STKALIGN_Pos;
pub const SCB_CCR_UNALIGN_TRP_Pos = @as(c_uint, 3);
pub const SCB_CCR_UNALIGN_TRP_Msk = @as(c_ulong, 1) << SCB_CCR_UNALIGN_TRP_Pos;
pub const SCB_SHCSR_SVCALLPENDED_Pos = @as(c_uint, 15);
pub const SCB_SHCSR_SVCALLPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_SVCALLPENDED_Pos;
pub const SysTick_CTRL_COUNTFLAG_Pos = @as(c_uint, 16);
pub const SysTick_CTRL_COUNTFLAG_Msk = @as(c_ulong, 1) << SysTick_CTRL_COUNTFLAG_Pos;
pub const SysTick_CTRL_CLKSOURCE_Pos = @as(c_uint, 2);
pub const SysTick_CTRL_CLKSOURCE_Msk = @as(c_ulong, 1) << SysTick_CTRL_CLKSOURCE_Pos;
pub const SysTick_CTRL_TICKINT_Pos = @as(c_uint, 1);
pub const SysTick_CTRL_TICKINT_Msk = @as(c_ulong, 1) << SysTick_CTRL_TICKINT_Pos;
pub const SysTick_CTRL_ENABLE_Pos = @as(c_uint, 0);
pub const SysTick_CTRL_ENABLE_Msk = @as(c_ulong, 1);
pub const SysTick_LOAD_RELOAD_Pos = @as(c_uint, 0);
pub const SysTick_LOAD_RELOAD_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_VAL_CURRENT_Pos = @as(c_uint, 0);
pub const SysTick_VAL_CURRENT_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_CALIB_NOREF_Pos = @as(c_uint, 31);
pub const SysTick_CALIB_NOREF_Msk = @as(c_ulong, 1) << SysTick_CALIB_NOREF_Pos;
pub const SysTick_CALIB_SKEW_Pos = @as(c_uint, 30);
pub const SysTick_CALIB_SKEW_Msk = @as(c_ulong, 1) << SysTick_CALIB_SKEW_Pos;
pub const SysTick_CALIB_TENMS_Pos = @as(c_uint, 0);
pub const SysTick_CALIB_TENMS_Msk = @as(c_ulong, 0xFFFFFF);
pub const _VAL2FLD = @compileError("unable to translate macro: undefined identifier `_Pos`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:627:9
pub const _FLD2VAL = @compileError("unable to translate macro: undefined identifier `_Msk`");
// ti.cc23xx/ti.distro.cc23xx/../../em.core/em.arch.arm/cmsis/core_cm0plus.h:635:9
pub const SCS_BASE = @as(c_ulong, 0xE000E000);
pub const SysTick_BASE = SCS_BASE + @as(c_ulong, 0x0010);
pub const NVIC_BASE = SCS_BASE + @as(c_ulong, 0x0100);
pub const SCB_BASE = SCS_BASE + @as(c_ulong, 0x0D00);
pub const SCB = @import("std").zig.c_translation.cast([*c]SCB_Type, SCB_BASE);
pub const SysTick = @import("std").zig.c_translation.cast([*c]SysTick_Type, SysTick_BASE);
pub const NVIC = @import("std").zig.c_translation.cast([*c]NVIC_Type, NVIC_BASE);
pub const NVIC_SetPriorityGrouping = __NVIC_SetPriorityGrouping;
pub const NVIC_GetPriorityGrouping = __NVIC_GetPriorityGrouping;
pub const NVIC_EnableIRQ = __NVIC_EnableIRQ;
pub const NVIC_GetEnableIRQ = __NVIC_GetEnableIRQ;
pub const NVIC_DisableIRQ = __NVIC_DisableIRQ;
pub const NVIC_GetPendingIRQ = __NVIC_GetPendingIRQ;
pub const NVIC_SetPendingIRQ = __NVIC_SetPendingIRQ;
pub const NVIC_ClearPendingIRQ = __NVIC_ClearPendingIRQ;
pub const NVIC_SetPriority = __NVIC_SetPriority;
pub const NVIC_GetPriority = __NVIC_GetPriority;
pub const NVIC_SystemReset = __NVIC_SystemReset;
pub const NVIC_SetVector = __NVIC_SetVector;
pub const NVIC_GetVector = __NVIC_GetVector;
pub const NVIC_USER_IRQ_OFFSET = @as(c_int, 16);
pub const EXC_RETURN_HANDLER = @as(c_ulong, 0xFFFFFFF1);
pub const EXC_RETURN_THREAD_MSP = @as(c_ulong, 0xFFFFFFF9);
pub const EXC_RETURN_THREAD_PSP = @as(c_ulong, 0xFFFFFFFD);
pub inline fn _BIT_SHIFT(IRQn_1: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x03)) * @as(c_ulong, 8)) {
    _ = &IRQn_1;
    return (@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x03)) * @as(c_ulong, 8);
}
pub inline fn _SHP_IDX(IRQn_1: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x0F)) - @as(c_ulong, 8)) >> @as(c_ulong, 2)) {
    _ = &IRQn_1;
    return ((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x0F)) - @as(c_ulong, 8)) >> @as(c_ulong, 2);
}
pub inline fn _IP_IDX(IRQn_1: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) >> @as(c_ulong, 2)) {
    _ = &IRQn_1;
    return @import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) >> @as(c_ulong, 2);
}
pub const __NVIC_SetPriorityGrouping = @import("std").zig.c_translation.Macros.DISCARD;
pub inline fn __NVIC_GetPriorityGrouping() @TypeOf(@as(c_uint, 0)) {
    return @as(c_uint, 0);
}
pub const __HW_CKMD_H__ = "";
pub const CKMD_O_DESC = @as(c_uint, 0x00000000);
pub const CKMD_O_IMASK = @as(c_uint, 0x00000044);
pub const CKMD_O_RIS = @as(c_uint, 0x00000048);
pub const CKMD_O_MIS = @as(c_uint, 0x0000004C);
pub const CKMD_O_ISET = @as(c_uint, 0x00000050);
pub const CKMD_O_ICLR = @as(c_uint, 0x00000054);
pub const CKMD_O_IMSET = @as(c_uint, 0x00000058);
pub const CKMD_O_IMCLR = @as(c_uint, 0x0000005C);
pub const CKMD_O_HFOSCCTL = @as(c_uint, 0x00000080);
pub const CKMD_O_HFXTCTL = @as(c_uint, 0x00000084);
pub const CKMD_O_LFOSCCTL = @as(c_uint, 0x0000008C);
pub const CKMD_O_LFXTCTL = @as(c_uint, 0x00000090);
pub const CKMD_O_LFQUALCTL = @as(c_uint, 0x00000094);
pub const CKMD_O_LFINCCTL = @as(c_uint, 0x00000098);
pub const CKMD_O_LFINCOVR = @as(c_uint, 0x0000009C);
pub const CKMD_O_AMPADCCTL = @as(c_uint, 0x000000A0);
pub const CKMD_O_HFTRACKCTL = @as(c_uint, 0x000000A4);
pub const CKMD_O_LDOCTL = @as(c_uint, 0x000000A8);
pub const CKMD_O_NABIASCTL = @as(c_uint, 0x000000AC);
pub const CKMD_O_LFMONCTL = @as(c_uint, 0x000000B0);
pub const CKMD_O_LFCLKSEL = @as(c_uint, 0x000000C0);
pub const CKMD_O_TDCCLKSEL = @as(c_uint, 0x000000C4);
pub const CKMD_O_ADCCLKSEL = @as(c_uint, 0x000000C8);
pub const CKMD_O_LFCLKSTAT = @as(c_uint, 0x000000E0);
pub const CKMD_O_HFXTSTAT = @as(c_uint, 0x000000E4);
pub const CKMD_O_AMPADCSTAT = @as(c_uint, 0x000000E8);
pub const CKMD_O_TRACKSTAT = @as(c_uint, 0x000000EC);
pub const CKMD_O_AMPSTAT = @as(c_uint, 0x000000F0);
pub const CKMD_O_ATBCTL0 = @as(c_uint, 0x00000100);
pub const CKMD_O_ATBCTL1 = @as(c_uint, 0x00000104);
pub const CKMD_O_DTBCTL = @as(c_uint, 0x00000108);
pub const CKMD_O_TRIM0 = @as(c_uint, 0x00000110);
pub const CKMD_O_TRIM1 = @as(c_uint, 0x00000114);
pub const CKMD_O_HFXTINIT = @as(c_uint, 0x00000118);
pub const CKMD_O_HFXTTARG = @as(c_uint, 0x0000011C);
pub const CKMD_O_HFXTDYN = @as(c_uint, 0x00000120);
pub const CKMD_O_AMPCFG0 = @as(c_uint, 0x00000124);
pub const CKMD_O_AMPCFG1 = @as(c_uint, 0x00000128);
pub const CKMD_O_LOOPCFG = @as(c_uint, 0x0000012C);
pub const CKMD_O_TDCCTL = @as(c_uint, 0x00000200);
pub const CKMD_O_TDCSTAT = @as(c_uint, 0x00000204);
pub const CKMD_O_TDCRESULT = @as(c_uint, 0x00000208);
pub const CKMD_O_TDCSATCFG = @as(c_uint, 0x0000020C);
pub const CKMD_O_TDCTRIGSRC = @as(c_uint, 0x00000210);
pub const CKMD_O_TDCTRIGCNT = @as(c_uint, 0x00000214);
pub const CKMD_O_TDCTRIGCNTLOAD = @as(c_uint, 0x00000218);
pub const CKMD_O_TDCTRIGCNTCFG = @as(c_uint, 0x0000021C);
pub const CKMD_O_TDCPRECTL = @as(c_uint, 0x00000220);
pub const CKMD_O_TDCPRECNTR = @as(c_uint, 0x00000224);
pub const CKMD_O_WDTCNT = @as(c_uint, 0x00000300);
pub const CKMD_O_WDTTEST = @as(c_uint, 0x00000304);
pub const CKMD_O_WDTLOCK = @as(c_uint, 0x00000308);
pub const CKMD_DESC_MODID_W = @as(c_uint, 16);
pub const CKMD_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const CKMD_DESC_MODID_S = @as(c_uint, 16);
pub const CKMD_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CKMD_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CKMD_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CKMD_DESC_MAJREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CKMD_DESC_MAJREV_S = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CKMD_DESC_MINREV_S = @as(c_uint, 0);
pub const CKMD_IMASK_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMASK_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMASK_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMASK_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMASK_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMASK_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMASK_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMASK_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMASK_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMASK_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMASK_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMASK_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMASK_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMASK_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMASK_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMASK_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMASK_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMASK_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMASK_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMASK_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMASK_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMASK_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_RIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_RIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_RIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_RIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_RIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_RIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_RIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_RIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_RIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_RIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_RIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_RIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_RIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_RIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_RIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_RIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_RIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_RIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_RIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_RIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_RIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_RIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_MIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_MIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_MIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_MIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_MIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_MIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_MIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_MIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_MIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_MIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_MIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_MIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_MIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_MIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_MIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_MIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_MIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_MIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_MIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_MIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_MIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_MIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ISET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ISET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ISET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ISET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ISET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ISET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ISET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ISET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ISET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ISET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ISET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ISET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ISET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ISET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ISET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ISET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ISET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ISET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ISET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ISET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ISET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ISET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ICLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ICLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ICLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ICLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ICLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ICLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ICLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ICLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ICLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ICLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ICLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ICLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ICLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ICLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ICLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ICLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ICLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ICLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ICLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ICLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ICLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ICLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMSET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMSET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMSET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMSET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMSET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMSET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMSET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMSET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMSET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMSET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMSET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMSET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMSET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMSET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMSET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMSET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMSET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMSET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMSET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMSET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMSET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMSET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMCLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMCLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMCLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMCLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMCLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMCLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMCLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMCLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMCLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMCLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMCLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMCLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMCLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMCLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMCLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMCLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMCLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMCLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMCLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMCLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMCLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMCLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_HFOSCCTL_PW_W = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_PW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const CKMD_HFOSCCTL_PW_S = @as(c_uint, 24);
pub const CKMD_HFOSCCTL_CLKSVTOVR = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_M = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_S = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFXT = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFOSC = @as(c_uint, 0x00000000);
pub const CKMD_HFOSCCTL_FORCEOFF = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_M = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_S = @as(c_uint, 1);
pub const CKMD_HFOSCCTL_QUALBYP = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_M = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_S = @as(c_uint, 0);
pub const CKMD_HFXTCTL_AMPOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTCTL_AMPOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTCTL_AMPOVR_S = @as(c_uint, 31);
pub const CKMD_HFXTCTL_BIASEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFXTCTL_BIASEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFXTCTL_BIASEN_S = @as(c_uint, 26);
pub const CKMD_HFXTCTL_LPBUFEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_HFXTCTL_LPBUFEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_HFXTCTL_LPBUFEN_S = @as(c_uint, 25);
pub const CKMD_HFXTCTL_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_HFXTCTL_INJECT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_HFXTCTL_INJECT_S = @as(c_uint, 24);
pub const CKMD_HFXTCTL_QUALBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_HFXTCTL_QUALBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_HFXTCTL_QUALBYP_S = @as(c_uint, 23);
pub const CKMD_HFXTCTL_QUALDLY_W = @as(c_uint, 12);
pub const CKMD_HFXTCTL_QUALDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000FFF00, .hex);
pub const CKMD_HFXTCTL_QUALDLY_S = @as(c_uint, 8);
pub const CKMD_HFXTCTL_TCXOMODE = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_M = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_S = @as(c_uint, 7);
pub const CKMD_HFXTCTL_TCXOTYPE = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_M = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_S = @as(c_uint, 6);
pub const CKMD_HFXTCTL_TCXOTYPE_CMOS = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_CLIPPEDSINE = @as(c_uint, 0x00000000);
pub const CKMD_HFXTCTL_AUTOEN = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_M = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_S = @as(c_uint, 2);
pub const CKMD_HFXTCTL_HPBUFEN = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_S = @as(c_uint, 1);
pub const CKMD_HFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFOSCCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFXTCTL_LEAKCOMP_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_LEAKCOMP_M = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_S = @as(c_uint, 13);
pub const CKMD_LFXTCTL_LEAKCOMP_OFF = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_HALF = @as(c_uint, 0x00002000);
pub const CKMD_LFXTCTL_LEAKCOMP_FULL = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_BUFBIAS = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_S = @as(c_uint, 12);
pub const CKMD_LFXTCTL_BUFBIAS_MAX = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_MIN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_AMPBIAS_W = @as(c_uint, 4);
pub const CKMD_LFXTCTL_AMPBIAS_M = @as(c_uint, 0x00000F00);
pub const CKMD_LFXTCTL_AMPBIAS_S = @as(c_uint, 8);
pub const CKMD_LFXTCTL_BIASBOOST_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_BIASBOOST_M = @as(c_uint, 0x000000C0);
pub const CKMD_LFXTCTL_BIASBOOST_S = @as(c_uint, 6);
pub const CKMD_LFXTCTL_REGBIAS_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_REGBIAS_M = @as(c_uint, 0x00000030);
pub const CKMD_LFXTCTL_REGBIAS_S = @as(c_uint, 4);
pub const CKMD_LFXTCTL_HPBUFEN = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_S = @as(c_uint, 2);
pub const CKMD_LFXTCTL_AMPREGMODE = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_M = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_S = @as(c_uint, 1);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPDIS = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPEN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFQUALCTL_MAXERR_W = @as(c_uint, 6);
pub const CKMD_LFQUALCTL_MAXERR_M = @as(c_uint, 0x00003F00);
pub const CKMD_LFQUALCTL_MAXERR_S = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_W = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_M = @as(c_uint, 0x000000FF);
pub const CKMD_LFQUALCTL_CONSEC_S = @as(c_uint, 0);
pub const CKMD_LFINCCTL_PREVENTSTBY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_S = @as(c_uint, 31);
pub const CKMD_LFINCCTL_PREVENTSTBY_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_INT_W = @as(c_uint, 22);
pub const CKMD_LFINCCTL_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFFFF00, .hex);
pub const CKMD_LFINCCTL_INT_S = @as(c_uint, 8);
pub const CKMD_LFINCCTL_STOPGEAR = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_M = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_S = @as(c_uint, 7);
pub const CKMD_LFINCCTL_STOPGEAR_HIGH = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_LOW = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_ERRTHR_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_ERRTHR_M = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_S = @as(c_uint, 5);
pub const CKMD_LFINCCTL_ERRTHR_SMALL = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_MIDSMALL = @as(c_uint, 0x00000040);
pub const CKMD_LFINCCTL_ERRTHR_MIDLARGE = @as(c_uint, 0x00000020);
pub const CKMD_LFINCCTL_ERRTHR_LARGE = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_GEARRSTRT_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_GEARRSTRT_M = @as(c_uint, 0x00000018);
pub const CKMD_LFINCCTL_GEARRSTRT_S = @as(c_uint, 3);
pub const CKMD_LFINCCTL_GEARRSTRT_TWOTHR = @as(c_uint, 0x00000010);
pub const CKMD_LFINCCTL_GEARRSTRT_ONETHR = @as(c_uint, 0x00000008);
pub const CKMD_LFINCCTL_GEARRSTRT_NEVER = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_SOFTRSTRT = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_M = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_S = @as(c_uint, 2);
pub const CKMD_LFINCCTL_SOFTRSTRT_ON = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCOVR_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCOVR_OVERRIDE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCOVR_OVERRIDE_S = @as(c_uint, 31);
pub const CKMD_LFINCOVR_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFINCOVR_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hex);
pub const CKMD_LFINCOVR_LFINC_S = @as(c_uint, 0);
pub const CKMD_AMPADCCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_AMPADCCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_AMPADCCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_AMPADCCTL_PEAKDETEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_S = @as(c_uint, 17);
pub const CKMD_AMPADCCTL_PEAKDETEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_ADCEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_S = @as(c_uint, 16);
pub const CKMD_AMPADCCTL_ADCEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPVAL_W = @as(c_uint, 7);
pub const CKMD_AMPADCCTL_COMPVAL_M = @as(c_uint, 0x00007F00);
pub const CKMD_AMPADCCTL_COMPVAL_S = @as(c_uint, 8);
pub const CKMD_AMPADCCTL_SRCSEL = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_M = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_S = @as(c_uint, 4);
pub const CKMD_AMPADCCTL_SRCSEL_PEAK = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_BIAS = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPSTRT = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_S = @as(c_uint, 1);
pub const CKMD_AMPADCCTL_SARSTRT = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFTRACKCTL_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFTRACKCTL_EN_S = @as(c_uint, 31);
pub const CKMD_HFTRACKCTL_DSMBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CKMD_HFTRACKCTL_DSMBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CKMD_HFTRACKCTL_DSMBYP_S = @as(c_uint, 30);
pub const CKMD_HFTRACKCTL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_HFTRACKCTL_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_S = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_REFCLK_GPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_LRF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_HFXT = @as(c_uint, 0x00000000);
pub const CKMD_HFTRACKCTL_RATIO_W = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_RATIO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FFFFFF, .hex);
pub const CKMD_HFTRACKCTL_RATIO_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_RATIO_REF4M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const CKMD_HFTRACKCTL_RATIO_REF8M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01800000, .hex);
pub const CKMD_HFTRACKCTL_RATIO_REF48M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const CKMD_LDOCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LDOCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LDOCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_LDOCTL_HFXTLVLEN = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_M = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_S = @as(c_uint, 4);
pub const CKMD_LDOCTL_STARTCTL = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_M = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_S = @as(c_uint, 3);
pub const CKMD_LDOCTL_START = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_M = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_S = @as(c_uint, 2);
pub const CKMD_LDOCTL_BYPASS = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_M = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_S = @as(c_uint, 1);
pub const CKMD_LDOCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_S = @as(c_uint, 0);
pub const CKMD_NABIASCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFMONCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_PRE_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_M = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_S = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_EXTLF = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_LFXT = @as(c_uint, 0x00000008);
pub const CKMD_LFCLKSEL_PRE_LFOSC = @as(c_uint, 0x00000004);
pub const CKMD_LFCLKSEL_PRE_NONE = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSEL_MAIN_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_MAIN_M = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_MAIN_EXTLF = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_LFCLKSEL_MAIN_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_LFCLKSEL_MAIN_FAKE = @as(c_uint, 0x00000000);
pub const CKMD_TDCCLKSEL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_TDCCLKSEL_REFCLK_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_S = @as(c_uint, 0);
pub const CKMD_TDCCLKSEL_REFCLK_GPI = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_CLKULL = @as(c_uint, 0x00000002);
pub const CKMD_TDCCLKSEL_REFCLK_CLKSVT = @as(c_uint, 0x00000001);
pub const CKMD_TDCCLKSEL_REFCLK_NONE = @as(c_uint, 0x00000000);
pub const CKMD_ADCCLKSEL_SRC_W = @as(c_uint, 2);
pub const CKMD_ADCCLKSEL_SRC_M = @as(c_uint, 0x00000003);
pub const CKMD_ADCCLKSEL_SRC_S = @as(c_uint, 0);
pub const CKMD_ADCCLKSEL_SRC_HFXT = @as(c_uint, 0x00000001);
pub const CKMD_ADCCLKSEL_SRC_CLKSVT = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_GOOD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFCLKSTAT_GOOD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFCLKSTAT_GOOD_S = @as(c_uint, 31);
pub const CKMD_LFCLKSTAT_FLTSETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_LFCLKSTAT_FLTSETTLED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_LFCLKSTAT_FLTSETTLED_S = @as(c_uint, 25);
pub const CKMD_LFCLKSTAT_LFTICKSRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_S = @as(c_uint, 24);
pub const CKMD_LFCLKSTAT_LFTICKSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_LFCLK = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINCSRC_W = @as(c_uint, 2);
pub const CKMD_LFCLKSTAT_LFINCSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_S = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINCSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_AVG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_MEAS = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hex);
pub const CKMD_LFCLKSTAT_LFINC_S = @as(c_uint, 0);
pub const CKMD_HFXTSTAT_STARTUPTIME_W = @as(c_uint, 15);
pub const CKMD_HFXTSTAT_STARTUPTIME_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7FFF0000, .hex);
pub const CKMD_HFXTSTAT_STARTUPTIME_S = @as(c_uint, 16);
pub const CKMD_HFXTSTAT_FAULT = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_S = @as(c_uint, 1);
pub const CKMD_HFXTSTAT_GOOD = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_S = @as(c_uint, 0);
pub const CKMD_AMPADCSTAT_COMPOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_AMPADCSTAT_COMPOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_AMPADCSTAT_COMPOUT_S = @as(c_uint, 24);
pub const CKMD_AMPADCSTAT_PEAKRAW_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_PEAKRAW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_AMPADCSTAT_PEAKRAW_S = @as(c_uint, 16);
pub const CKMD_AMPADCSTAT_PEAK_W = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_PEAK_M = @as(c_uint, 0x0000FF00);
pub const CKMD_AMPADCSTAT_PEAK_S = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_BIAS_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_BIAS_M = @as(c_uint, 0x0000007F);
pub const CKMD_AMPADCSTAT_BIAS_S = @as(c_uint, 0);
pub const CKMD_TRACKSTAT_LOOPERRVLD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_TRACKSTAT_LOOPERRVLD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_TRACKSTAT_LOOPERRVLD_S = @as(c_uint, 31);
pub const CKMD_TRACKSTAT_LOOPERR_W = @as(c_uint, 14);
pub const CKMD_TRACKSTAT_LOOPERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFF0000, .hex);
pub const CKMD_TRACKSTAT_LOOPERR_S = @as(c_uint, 16);
pub const CKMD_TRACKSTAT_FINETRIM_W = @as(c_uint, 13);
pub const CKMD_TRACKSTAT_FINETRIM_M = @as(c_uint, 0x00001FFF);
pub const CKMD_TRACKSTAT_FINETRIM_S = @as(c_uint, 0);
pub const CKMD_AMPSTAT_STATE_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_STATE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hex);
pub const CKMD_AMPSTAT_STATE_S = @as(c_uint, 25);
pub const CKMD_AMPSTAT_STATE_SETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hex);
pub const CKMD_AMPSTAT_STATE_UPDATEUP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1C000000, .hex);
pub const CKMD_AMPSTAT_STATE_TXCOMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const CKMD_AMPSTAT_STATE_SHUTDN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const CKMD_AMPSTAT_STATE_INJWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const CKMD_AMPSTAT_STATE_UPDATEDN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const CKMD_AMPSTAT_STATE_RAMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const CKMD_AMPSTAT_STATE_RAMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_AMPSTAT_STATE_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const CKMD_AMPSTAT_STATE_SHUTDN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_AMPSTAT_STATE_LDOSTART = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_AMPSTAT_STATE_IDLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPSTAT_IDAC_W = @as(c_uint, 7);
pub const CKMD_AMPSTAT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01FC0000, .hex);
pub const CKMD_AMPSTAT_IDAC_S = @as(c_uint, 18);
pub const CKMD_AMPSTAT_IREF_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_IREF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003C000, .hex);
pub const CKMD_AMPSTAT_IREF_S = @as(c_uint, 14);
pub const CKMD_AMPSTAT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q2CAP_M = @as(c_uint, 0x00003F00);
pub const CKMD_AMPSTAT_Q2CAP_S = @as(c_uint, 8);
pub const CKMD_AMPSTAT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q1CAP_M = @as(c_uint, 0x000000FC);
pub const CKMD_AMPSTAT_Q1CAP_S = @as(c_uint, 2);
pub const CKMD_AMPSTAT_CTRLATTARGET = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_S = @as(c_uint, 1);
pub const CKMD_AMPSTAT_AMPGOOD = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_W = @as(c_uint, 19);
pub const CKMD_ATBCTL0_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0007FFFF, .hex);
pub const CKMD_ATBCTL0_SEL_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_LFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const CKMD_ATBCTL0_SEL_LFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const CKMD_ATBCTL0_SEL_HFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const CKMD_ATBCTL0_SEL_HFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ATBCTL0_SEL_LFMONVTEST = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL0_SEL_LFOSCVDDL = @as(c_uint, 0x00000800);
pub const CKMD_ATBCTL0_SEL_HFOSCIBIAS = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL0_SEL_HFOSCVDDL = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL0_SEL_HFOSCVREF = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL0_SEL_NABIASITEST = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL0_SEL_ADCDACOUT = @as(c_uint, 0x00000040);
pub const CKMD_ATBCTL0_SEL_ADCCOMPIN = @as(c_uint, 0x00000020);
pub const CKMD_ATBCTL0_SEL_ADCCOMPOUT = @as(c_uint, 0x00000010);
pub const CKMD_ATBCTL0_SEL_LFXTANA = @as(c_uint, 0x00000008);
pub const CKMD_ATBCTL0_SEL_LDOITEST = @as(c_uint, 0x00000004);
pub const CKMD_ATBCTL0_SEL_VDDCKM = @as(c_uint, 0x00000002);
pub const CKMD_ATBCTL0_SEL_HFXTANA = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL0_SEL_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFOSC_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFOSC_M = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_S = @as(c_uint, 13);
pub const CKMD_ATBCTL1_LFOSC_BOTH = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_VDDLOCAL = @as(c_uint, 0x00004000);
pub const CKMD_ATBCTL1_LFOSC_TESTCLK = @as(c_uint, 0x00002000);
pub const CKMD_ATBCTL1_LFOSC_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_NABIAS = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_S = @as(c_uint, 12);
pub const CKMD_ATBCTL1_LFXT = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_M = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_S = @as(c_uint, 10);
pub const CKMD_ATBCTL1_LFXT_TESTCLK = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFMON_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFMON_M = @as(c_uint, 0x00000300);
pub const CKMD_ATBCTL1_LFMON_S = @as(c_uint, 8);
pub const CKMD_ATBCTL1_LFMON_TEST2 = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL1_LFMON_TEST1 = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL1_LFMON_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_HFXT = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_M = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_S = @as(c_uint, 7);
pub const CKMD_ATBCTL1_HFOSC = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_M = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_S = @as(c_uint, 0);
pub const CKMD_DTBCTL_DSEL2_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007C0000, .hex);
pub const CKMD_DTBCTL_DSEL2_S = @as(c_uint, 18);
pub const CKMD_DTBCTL_DSEL1_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003E000, .hex);
pub const CKMD_DTBCTL_DSEL1_S = @as(c_uint, 13);
pub const CKMD_DTBCTL_DSEL0_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL0_M = @as(c_uint, 0x00001F00);
pub const CKMD_DTBCTL_DSEL0_S = @as(c_uint, 8);
pub const CKMD_DTBCTL_CLKSEL_W = @as(c_uint, 4);
pub const CKMD_DTBCTL_CLKSEL_M = @as(c_uint, 0x000000F0);
pub const CKMD_DTBCTL_CLKSEL_S = @as(c_uint, 4);
pub const CKMD_DTBCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_S = @as(c_uint, 0);
pub const CKMD_TRIM0_HFOSC_CAP_W = @as(c_uint, 4);
pub const CKMD_TRIM0_HFOSC_CAP_M = @as(c_uint, 0x000001E0);
pub const CKMD_TRIM0_HFOSC_CAP_S = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_W = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_M = @as(c_uint, 0x0000001F);
pub const CKMD_TRIM0_HFOSC_COARSE_S = @as(c_uint, 0);
pub const CKMD_TRIM1_HFXTSLICER_W = @as(c_uint, 2);
pub const CKMD_TRIM1_HFXTSLICER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CKMD_TRIM1_HFXTSLICER_S = @as(c_uint, 30);
pub const CKMD_TRIM1_PEAKIBIAS_W = @as(c_uint, 2);
pub const CKMD_TRIM1_PEAKIBIAS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CKMD_TRIM1_PEAKIBIAS_S = @as(c_uint, 28);
pub const CKMD_TRIM1_NABIAS_UDIGLDO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_S = @as(c_uint, 27);
pub const CKMD_TRIM1_LDOBW_W = @as(c_uint, 3);
pub const CKMD_TRIM1_LDOBW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const CKMD_TRIM1_LDOBW_S = @as(c_uint, 24);
pub const CKMD_TRIM1_LDOFB_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LDOFB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const CKMD_TRIM1_LDOFB_S = @as(c_uint, 20);
pub const CKMD_TRIM1_LFDLY_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const CKMD_TRIM1_LFDLY_S = @as(c_uint, 16);
pub const CKMD_TRIM1_NABIAS_LFOSC = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_M = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_S = @as(c_uint, 15);
pub const CKMD_TRIM1_NABIAS_RES_W = @as(c_uint, 7);
pub const CKMD_TRIM1_NABIAS_RES_M = @as(c_uint, 0x00007F00);
pub const CKMD_TRIM1_NABIAS_RES_S = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_W = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_M = @as(c_uint, 0x000000FF);
pub const CKMD_TRIM1_LFOSC_CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTINIT_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTINIT_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTINIT_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTINIT_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTINIT_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTINIT_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTINIT_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTINIT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTINIT_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTINIT_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTTARG_AMPHYST_W = @as(c_uint, 2);
pub const CKMD_HFXTTARG_AMPHYST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CKMD_HFXTTARG_AMPHYST_S = @as(c_uint, 30);
pub const CKMD_HFXTTARG_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTTARG_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTTARG_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTTARG_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTTARG_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTTARG_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTTARG_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTTARG_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTTARG_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTTARG_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTDYN_SEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_S = @as(c_uint, 31);
pub const CKMD_HFXTDYN_SEL_DYNAMIC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_TARGET = @as(c_uint, 0x00000000);
pub const CKMD_HFXTDYN_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTDYN_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTDYN_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTDYN_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTDYN_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTDYN_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTDYN_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTDYN_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTDYN_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTDYN_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_Q2DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q2DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const CKMD_AMPCFG0_Q2DLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG0_Q1DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q1DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const CKMD_AMPCFG0_Q1DLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG0_ADCDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_ADCDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const CKMD_AMPCFG0_ADCDLY_S = @as(c_uint, 20);
pub const CKMD_AMPCFG0_LDOSTART_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_LDOSTART_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F8000, .hex);
pub const CKMD_AMPCFG0_LDOSTART_S = @as(c_uint, 15);
pub const CKMD_AMPCFG0_INJWAIT_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJWAIT_M = @as(c_uint, 0x00007C00);
pub const CKMD_AMPCFG0_INJWAIT_S = @as(c_uint, 10);
pub const CKMD_AMPCFG0_INJTIME_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJTIME_M = @as(c_uint, 0x000003E0);
pub const CKMD_AMPCFG0_INJTIME_S = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_M = @as(c_uint, 0x0000001F);
pub const CKMD_AMPCFG0_FSMRATE_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_FSMRATE__250K = @as(c_uint, 0x00000017);
pub const CKMD_AMPCFG0_FSMRATE__500K = @as(c_uint, 0x0000000B);
pub const CKMD_AMPCFG0_FSMRATE__1M = @as(c_uint, 0x00000005);
pub const CKMD_AMPCFG0_FSMRATE__2M = @as(c_uint, 0x00000002);
pub const CKMD_AMPCFG0_FSMRATE__3M = @as(c_uint, 0x00000001);
pub const CKMD_AMPCFG0_FSMRATE__6M = @as(c_uint, 0x00000000);
pub const CKMD_AMPCFG1_IDACDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IDACDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const CKMD_AMPCFG1_IDACDLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG1_IREFDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IREFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const CKMD_AMPCFG1_IREFDLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG1_BIASLT_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_BIASLT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFF000, .hex);
pub const CKMD_AMPCFG1_BIASLT_S = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_M = @as(c_uint, 0x00000FFF);
pub const CKMD_AMPCFG1_INTERVAL_S = @as(c_uint, 0);
pub const CKMD_LOOPCFG_FINETRIM_INIT_W = @as(c_uint, 6);
pub const CKMD_LOOPCFG_FINETRIM_INIT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFC000000, .hex);
pub const CKMD_LOOPCFG_FINETRIM_INIT_S = @as(c_uint, 26);
pub const CKMD_LOOPCFG_BOOST_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_BOOST_TARGET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03E00000, .hex);
pub const CKMD_LOOPCFG_BOOST_TARGET_S = @as(c_uint, 21);
pub const CKMD_LOOPCFG_KP_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001C0000, .hex);
pub const CKMD_LOOPCFG_KP_BOOST_S = @as(c_uint, 18);
pub const CKMD_LOOPCFG_KI_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00038000, .hex);
pub const CKMD_LOOPCFG_KI_BOOST_S = @as(c_uint, 15);
pub const CKMD_LOOPCFG_SETTLED_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_SETTLED_TARGET_M = @as(c_uint, 0x00007C00);
pub const CKMD_LOOPCFG_SETTLED_TARGET_S = @as(c_uint, 10);
pub const CKMD_LOOPCFG_OOR_LIMIT_W = @as(c_uint, 4);
pub const CKMD_LOOPCFG_OOR_LIMIT_M = @as(c_uint, 0x000003C0);
pub const CKMD_LOOPCFG_OOR_LIMIT_S = @as(c_uint, 6);
pub const CKMD_LOOPCFG_KP_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_M = @as(c_uint, 0x00000038);
pub const CKMD_LOOPCFG_KP_S = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_M = @as(c_uint, 0x00000007);
pub const CKMD_LOOPCFG_KI_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_W = @as(c_uint, 2);
pub const CKMD_TDCCTL_CMD_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_ABORT = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_RUN = @as(c_uint, 0x00000002);
pub const CKMD_TDCCTL_CMD_RUN_SYNC_START = @as(c_uint, 0x00000001);
pub const CKMD_TDCCTL_CMD_CLR_RESULT = @as(c_uint, 0x00000000);
pub const CKMD_TDCSTAT_STOP_BF = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_M = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_S = @as(c_uint, 9);
pub const CKMD_TDCSTAT_START_BF = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_M = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_S = @as(c_uint, 8);
pub const CKMD_TDCSTAT_SAT = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_S = @as(c_uint, 7);
pub const CKMD_TDCSTAT_DONE = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_S = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_W = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_M = @as(c_uint, 0x0000003F);
pub const CKMD_TDCSTAT_STATE_S = @as(c_uint, 0);
pub const CKMD_TDCSTAT_STATE_FORCE_STOP = @as(c_uint, 0x0000002E);
pub const CKMD_TDCSTAT_STATE_START_FALL = @as(c_uint, 0x0000001E);
pub const CKMD_TDCSTAT_STATE_WAIT_CLR_CNT_DONE = @as(c_uint, 0x00000016);
pub const CKMD_TDCSTAT_STATE_POR = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSTAT_STATE_GET_RESULT = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP_CNTDWN = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP = @as(c_uint, 0x00000008);
pub const CKMD_TDCSTAT_STATE_CLR_CNT = @as(c_uint, 0x00000007);
pub const CKMD_TDCSTAT_STATE_IDLE = @as(c_uint, 0x00000006);
pub const CKMD_TDCSTAT_STATE_WAIT_START_STOP_CNT_EN = @as(c_uint, 0x00000004);
pub const CKMD_TDCSTAT_STATE_WAIT_START = @as(c_uint, 0x00000000);
pub const CKMD_TDCRESULT_VALUE_W = @as(c_uint, 32);
pub const CKMD_TDCRESULT_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_TDCRESULT_VALUE_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_W = @as(c_uint, 5);
pub const CKMD_TDCSATCFG_LIMIT_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCSATCFG_LIMIT_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_R30 = @as(c_uint, 0x00000015);
pub const CKMD_TDCSATCFG_LIMIT_R29 = @as(c_uint, 0x00000014);
pub const CKMD_TDCSATCFG_LIMIT_R28 = @as(c_uint, 0x00000013);
pub const CKMD_TDCSATCFG_LIMIT_R27 = @as(c_uint, 0x00000012);
pub const CKMD_TDCSATCFG_LIMIT_R26 = @as(c_uint, 0x00000011);
pub const CKMD_TDCSATCFG_LIMIT_R25 = @as(c_uint, 0x00000010);
pub const CKMD_TDCSATCFG_LIMIT_R24 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSATCFG_LIMIT_R23 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSATCFG_LIMIT_R22 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCSATCFG_LIMIT_R21 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSATCFG_LIMIT_R20 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCSATCFG_LIMIT_R19 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCSATCFG_LIMIT_R18 = @as(c_uint, 0x00000009);
pub const CKMD_TDCSATCFG_LIMIT_R17 = @as(c_uint, 0x00000008);
pub const CKMD_TDCSATCFG_LIMIT_R16 = @as(c_uint, 0x00000007);
pub const CKMD_TDCSATCFG_LIMIT_R15 = @as(c_uint, 0x00000006);
pub const CKMD_TDCSATCFG_LIMIT_R14 = @as(c_uint, 0x00000005);
pub const CKMD_TDCSATCFG_LIMIT_R13 = @as(c_uint, 0x00000004);
pub const CKMD_TDCSATCFG_LIMIT_R12 = @as(c_uint, 0x00000003);
pub const CKMD_TDCSATCFG_LIMIT_NONE = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_POL = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_M = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_S = @as(c_uint, 15);
pub const CKMD_TDCTRIGSRC_STOP_POL_LOW = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_STOP_SRC_M = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_S = @as(c_uint, 8);
pub const CKMD_TDCTRIGSRC_STOP_SRC_TDC_PRE = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB15 = @as(c_uint, 0x00001400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB14 = @as(c_uint, 0x00001300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB13 = @as(c_uint, 0x00001200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB12 = @as(c_uint, 0x00001100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB11 = @as(c_uint, 0x00001000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB10 = @as(c_uint, 0x00000F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB9 = @as(c_uint, 0x00000E00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB8 = @as(c_uint, 0x00000D00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB7 = @as(c_uint, 0x00000C00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB6 = @as(c_uint, 0x00000B00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB5 = @as(c_uint, 0x00000A00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB4 = @as(c_uint, 0x00000900);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB3 = @as(c_uint, 0x00000800);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB2 = @as(c_uint, 0x00000700);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB1 = @as(c_uint, 0x00000600);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB0 = @as(c_uint, 0x00000500);
pub const CKMD_TDCTRIGSRC_STOP_SRC_GPI = @as(c_uint, 0x00000400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFCLK_DLY = @as(c_uint, 0x00000300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFXT = @as(c_uint, 0x00000200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFOSC = @as(c_uint, 0x00000100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_POL = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_S = @as(c_uint, 7);
pub const CKMD_TDCTRIGSRC_START_POL_LOW = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_START_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGSRC_START_SRC_TDC_PRE = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCTRIGSRC_START_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCTRIGSRC_START_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCTRIGSRC_START_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCTRIGSRC_START_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGSRC_START_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGCNT_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNT_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNT_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTLOAD_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNTLOAD_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNTLOAD_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTCFG_EN = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_RESET_N = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_S = @as(c_uint, 7);
pub const CKMD_TDCPRECTL_RATIO = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_S = @as(c_uint, 6);
pub const CKMD_TDCPRECTL_RATIO_DIV64 = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_DIV16 = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECTL_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCPRECTL_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCPRECTL_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_SRC_HFXT = @as(c_uint, 0x00000016);
pub const CKMD_TDCPRECTL_SRC_HFOSC = @as(c_uint, 0x00000015);
pub const CKMD_TDCPRECTL_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCPRECTL_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCPRECTL_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCPRECTL_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCPRECTL_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCPRECTL_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCPRECTL_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCPRECTL_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCPRECTL_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCPRECTL_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCPRECTL_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCPRECTL_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCPRECTL_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCPRECTL_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCPRECTL_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCPRECTL_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCPRECTL_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCPRECTL_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCPRECTL_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCPRECTL_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCPRECTL_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECNTR_CAPT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_TDCPRECNTR_CAPT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_TDCPRECNTR_CAPT_S = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCPRECNTR_CNT_S = @as(c_uint, 0);
pub const CKMD_WDTCNT_VAL_W = @as(c_uint, 32);
pub const CKMD_WDTCNT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_WDTCNT_VAL_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_M = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN_EN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_DIS = @as(c_uint, 0x00000000);
pub const CKMD_WDTLOCK_STAT_W = @as(c_uint, 32);
pub const CKMD_WDTLOCK_STAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_WDTLOCK_STAT_S = @as(c_uint, 0);
pub const __HW_CLKCTL_H__ = "";
pub const CLKCTL_O_DESC = @as(c_uint, 0x00000000);
pub const CLKCTL_O_DESCEX0 = @as(c_uint, 0x00000004);
pub const CLKCTL_O_DESCEX1 = @as(c_uint, 0x00000008);
pub const CLKCTL_O_CLKCFG0 = @as(c_uint, 0x0000000C);
pub const CLKCTL_O_CLKCFG1 = @as(c_uint, 0x00000010);
pub const CLKCTL_O_CLKENSET0 = @as(c_uint, 0x00000014);
pub const CLKCTL_O_CLKENSET1 = @as(c_uint, 0x00000018);
pub const CLKCTL_O_CLKENCLR0 = @as(c_uint, 0x00000020);
pub const CLKCTL_O_CLKENCLR1 = @as(c_uint, 0x00000024);
pub const CLKCTL_O_STBYPTR = @as(c_uint, 0x0000003C);
pub const CLKCTL_O_IDLECFG = @as(c_uint, 0x00000048);
pub const CLKCTL_DESC_MODID_W = @as(c_uint, 16);
pub const CLKCTL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const CLKCTL_DESC_MODID_S = @as(c_uint, 16);
pub const CLKCTL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CLKCTL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CLKCTL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CLKCTL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const CLKCTL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const CLKCTL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const CLKCTL_DESC_MAJREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CLKCTL_DESC_MAJREV_S = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CLKCTL_DESC_MINREV_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX0_LGPT3_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_DESCEX0_LGPT2_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX0_LGPT1_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_DESCEX0_LGPT0_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_DESCEX0_DMA_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_DESCEX0_LAES_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_DESCEX0_ADC0_IP_AVAIL = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_DESCEX0_SPI0_IP_AVAIL = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_DESCEX0_I2C0_IP_AVAIL = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_DESCEX0_UART0_IP_AVAIL = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_DESCEX0_LRFD_IP_AVAIL = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_GPIO_IP_AVAIL = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_FLASHSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_FLASHSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_SRAMSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_SRAMSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_ROPT_W = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_M = @as(c_uint, 0x0000FF00);
pub const CLKCTL_DESCEX1_ROPT_S = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_MAX = @as(c_uint, 0x0000FF00);
pub const CLKCTL_CLKCFG0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKCFG0_DMA_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKCFG0_LAES_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKCFG0_ADC0_CLK_EN = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKCFG0_SPI0_CLK_EN = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKCFG0_I2C0_CLK_EN = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKCFG0_UART0_CLK_EN = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKCFG0_LRFD_CLK_EN = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKCFG0_GPIO_CLK_EN = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENSET0_DMA_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENSET0_LAES_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENSET0_ADC0_CLK_SET = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENSET0_SPI0_CLK_SET = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENSET0_I2C0_CLK_SET = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENSET0_UART0_CLK_SET = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENSET0_LRFD_CLK_SET = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENSET0_GPIO_CLK_SET = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENCLR0_DMA_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENCLR0_LAES_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_CLR = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_CLR = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_CLR = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENCLR0_UART0_CLK_CLR = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_CLR = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_CLR = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_STBYPTR_VAL_W = @as(c_uint, 32);
pub const CLKCTL_STBYPTR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CLKCTL_STBYPTR_VAL_S = @as(c_uint, 0);
pub const CLKCTL_STBYPTR_VAL_MIN = @as(c_uint, 0x00000000);
pub const CLKCTL_IDLECFG_MODE = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_M = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_S = @as(c_uint, 0);
pub const CLKCTL_IDLECFG_MODE_LDO_OFF = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_LDO_ON = @as(c_uint, 0x00000000);
pub const __HW_EVTSVT_H__ = "";
pub const EVTSVT_O_DESC = @as(c_uint, 0x00000000);
pub const EVTSVT_O_DESCEX = @as(c_uint, 0x00000004);
pub const EVTSVT_O_DTB = @as(c_uint, 0x00000064);
pub const EVTSVT_O_NMISEL = @as(c_uint, 0x00000400);
pub const EVTSVT_O_CPUIRQ0SEL = @as(c_uint, 0x00000404);
pub const EVTSVT_O_CPUIRQ1SEL = @as(c_uint, 0x00000408);
pub const EVTSVT_O_CPUIRQ2SEL = @as(c_uint, 0x0000040C);
pub const EVTSVT_O_CPUIRQ3SEL = @as(c_uint, 0x00000410);
pub const EVTSVT_O_CPUIRQ4SEL = @as(c_uint, 0x00000414);
pub const EVTSVT_O_CPUIRQ5SEL = @as(c_uint, 0x00000418);
pub const EVTSVT_O_CPUIRQ6SEL = @as(c_uint, 0x0000041C);
pub const EVTSVT_O_CPUIRQ7SEL = @as(c_uint, 0x00000420);
pub const EVTSVT_O_CPUIRQ8SEL = @as(c_uint, 0x00000424);
pub const EVTSVT_O_CPUIRQ9SEL = @as(c_uint, 0x00000428);
pub const EVTSVT_O_CPUIRQ10SEL = @as(c_uint, 0x0000042C);
pub const EVTSVT_O_CPUIRQ11SEL = @as(c_uint, 0x00000430);
pub const EVTSVT_O_CPUIRQ12SEL = @as(c_uint, 0x00000434);
pub const EVTSVT_O_CPUIRQ13SEL = @as(c_uint, 0x00000438);
pub const EVTSVT_O_CPUIRQ14SEL = @as(c_uint, 0x0000043C);
pub const EVTSVT_O_CPUIRQ15SEL = @as(c_uint, 0x00000440);
pub const EVTSVT_O_CPUIRQ16SEL = @as(c_uint, 0x00000444);
pub const EVTSVT_O_CPUIRQ17SEL = @as(c_uint, 0x00000448);
pub const EVTSVT_O_CPUIRQ18SEL = @as(c_uint, 0x0000044C);
pub const EVTSVT_O_SYSTIMC0SEL = @as(c_uint, 0x00000450);
pub const EVTSVT_O_SYSTIMC1SEL = @as(c_uint, 0x00000454);
pub const EVTSVT_O_SYSTIMC2SEL = @as(c_uint, 0x00000458);
pub const EVTSVT_O_SYSTIMC3SEL = @as(c_uint, 0x0000045C);
pub const EVTSVT_O_SYSTIMC4SEL = @as(c_uint, 0x00000460);
pub const EVTSVT_O_ADCTRGSEL = @as(c_uint, 0x00000464);
pub const EVTSVT_O_LGPTSYNCSEL = @as(c_uint, 0x00000468);
pub const EVTSVT_O_LGPT0IN0SEL = @as(c_uint, 0x0000046C);
pub const EVTSVT_O_LGPT0IN1SEL = @as(c_uint, 0x00000470);
pub const EVTSVT_O_LGPT0IN2SEL = @as(c_uint, 0x00000474);
pub const EVTSVT_O_LGPT0TENSEL = @as(c_uint, 0x00000478);
pub const EVTSVT_O_LGPT1IN0SEL = @as(c_uint, 0x0000047C);
pub const EVTSVT_O_LGPT1IN1SEL = @as(c_uint, 0x00000480);
pub const EVTSVT_O_LGPT1IN2SEL = @as(c_uint, 0x00000484);
pub const EVTSVT_O_LGPT1TENSEL = @as(c_uint, 0x00000488);
pub const EVTSVT_O_LGPT2IN0SEL = @as(c_uint, 0x0000048C);
pub const EVTSVT_O_LGPT2IN1SEL = @as(c_uint, 0x00000490);
pub const EVTSVT_O_LGPT2IN2SEL = @as(c_uint, 0x00000494);
pub const EVTSVT_O_LGPT2TENSEL = @as(c_uint, 0x00000498);
pub const EVTSVT_O_LGPT3IN0SEL = @as(c_uint, 0x0000049C);
pub const EVTSVT_O_LGPT3IN1SEL = @as(c_uint, 0x000004A0);
pub const EVTSVT_O_LGPT3IN2SEL = @as(c_uint, 0x000004A4);
pub const EVTSVT_O_LGPT3TENSEL = @as(c_uint, 0x000004A8);
pub const EVTSVT_O_LRFDIN0SEL = @as(c_uint, 0x000004AC);
pub const EVTSVT_O_LRFDIN1SEL = @as(c_uint, 0x000004B0);
pub const EVTSVT_O_LRFDIN2SEL = @as(c_uint, 0x000004B4);
pub const EVTSVT_O_DMACH0SEL = @as(c_uint, 0x00000C00);
pub const EVTSVT_O_DMACH1SEL = @as(c_uint, 0x00000C04);
pub const EVTSVT_O_DMACH2SEL = @as(c_uint, 0x00000C08);
pub const EVTSVT_O_DMACH3SEL = @as(c_uint, 0x00000C0C);
pub const EVTSVT_O_DMACH4SEL = @as(c_uint, 0x00000C10);
pub const EVTSVT_O_DMACH5SEL = @as(c_uint, 0x00000C14);
pub const EVTSVT_O_DMACH6SEL = @as(c_uint, 0x00000C18);
pub const EVTSVT_O_DMACH7SEL = @as(c_uint, 0x00000C1C);
pub const EVTSVT_DESC_MODID_W = @as(c_uint, 16);
pub const EVTSVT_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const EVTSVT_DESC_MODID_S = @as(c_uint, 16);
pub const EVTSVT_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const EVTSVT_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const EVTSVT_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const EVTSVT_DESC_INSTIDX_W = @as(c_uint, 4);
pub const EVTSVT_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const EVTSVT_DESC_INSTIDX_S = @as(c_uint, 8);
pub const EVTSVT_DESC_MAJREV_W = @as(c_uint, 4);
pub const EVTSVT_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const EVTSVT_DESC_MAJREV_S = @as(c_uint, 4);
pub const EVTSVT_DESC_MINREV_W = @as(c_uint, 4);
pub const EVTSVT_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const EVTSVT_DESC_MINREV_S = @as(c_uint, 0);
pub const EVTSVT_DESCEX_IDMA_W = @as(c_uint, 10);
pub const EVTSVT_DESCEX_IDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFC00000, .hex);
pub const EVTSVT_DESCEX_IDMA_S = @as(c_uint, 22);
pub const EVTSVT_DESCEX_NDMA_W = @as(c_uint, 5);
pub const EVTSVT_DESCEX_NDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003E0000, .hex);
pub const EVTSVT_DESCEX_NDMA_S = @as(c_uint, 17);
pub const EVTSVT_DESCEX_PD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DESCEX_PD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DESCEX_PD_S = @as(c_uint, 16);
pub const EVTSVT_DESCEX_NSUB_W = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NSUB_M = @as(c_uint, 0x0000FF00);
pub const EVTSVT_DESCEX_NSUB_S = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NPUB_W = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NPUB_M = @as(c_uint, 0x000000FF);
pub const EVTSVT_DESCEX_NPUB_S = @as(c_uint, 0);
pub const EVTSVT_DTB_SEL_W = @as(c_uint, 2);
pub const EVTSVT_DTB_SEL_M = @as(c_uint, 0x00000003);
pub const EVTSVT_DTB_SEL_S = @as(c_uint, 0);
pub const EVTSVT_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const EVTSVT_NMISEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_NMISEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_NMISEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_NMISEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_NMISEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_NMISEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_NMISEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_NMISEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_NMISEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_NMISEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_NMISEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_NMISEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_NMISEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_NMISEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_NMISEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_NMISEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_NMISEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_NMISEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_NMISEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_NMISEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_NMISEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_NMISEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_NMISEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_NMISEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_NMISEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_NMISEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_NMISEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_NMISEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_NMISEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_NMISEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_NMISEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_NMISEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_NMISEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_NMISEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_NMISEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_NMISEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_NMISEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_NMISEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_NMISEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_NMISEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_NMISEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_NMISEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_NMISEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_NMISEL_PUBID_AON_NMI_SEL = @as(c_uint, 0x00000001);
pub const EVTSVT_NMISEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ1SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ1SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ1SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ1SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ1SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ2SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ2SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ2SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ2SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ2SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ2SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ2SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ2SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ2SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ3SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ3SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ3SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ3SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ3SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ3SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ3SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ3SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ3SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ3SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ3SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ3SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ3SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ4SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ4SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ4SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ4SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ4SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ4SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ4SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ4SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ4SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ4SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ4SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ4SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ4SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ5SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ5SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ5SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ5SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ6SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ6SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ6SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ6SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ7SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ7SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ7SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ7SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ8SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ8SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ8SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ8SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ9SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ9SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ9SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ9SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ10SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ10SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ10SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ10SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ11SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ11SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ11SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ11SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ12SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ12SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ12SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ12SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ13SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ13SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ13SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ13SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ14SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ14SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ14SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ14SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ15SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ15SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ15SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ15SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ16SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ16SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ16SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ16SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ16SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ16SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ16SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ16SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ16SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ17SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ17SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ17SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ17SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ18SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ18SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ18SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ18SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_SYSTIMC0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_SYSTIMC1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_SYSTIMC1SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_SYSTIMC1SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_SYSTIMC1SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_SYSTIMC1SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_SYSTIMC1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_SYSTIMC1SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_SYSTIMC1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_SYSTIMC2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_SYSTIMC3SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC3SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC3SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC3SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_SYSTIMC4SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC4SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC4SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC4SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_ADCTRGSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_ADCTRGSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_ADCTRGSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_ADCTRGSEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_ADCTRGSEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_ADCTRGSEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_ADCTRGSEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_ADCTRGSEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_ADCTRGSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_ADCTRGSEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_ADCTRGSEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_ADCTRGSEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_ADCTRGSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_ADCTRGSEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_ADCTRGSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPTSYNCSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPTSYNCSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPTSYNCSEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPTSYNCSEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPTSYNCSEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPTSYNCSEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPTSYNCSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPTSYNCSEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPTSYNCSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT0IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT0IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT0IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT0IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT0IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT1IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT1IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT1IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT1IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT1IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT2IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT2IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT2IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT2IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT2IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT3IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT3IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT3IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT3IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT3IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LRFDIN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LRFDIN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LRFDIN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH0SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH0SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH0SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH0SEL_IPID_UART0RXTRG = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH0SEL_IPID_SPI0TXTRG = @as(c_uint, 0x00000000);
pub const EVTSVT_DMACH1SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH1SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH1SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH1SEL_IPID_UART0TXTRG = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH1SEL_IPID_SPI0RXTRG = @as(c_uint, 0x00000001);
pub const EVTSVT_DMACH2SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH2SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH2SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH2SEL_IPID_UART0TXTRG = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH2SEL_IPID_RSVD = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH3SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH3SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH3SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH3SEL_IPID_UART0RXTRG = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH3SEL_IPID_ADC0TRG = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH4SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH4SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH4SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH4SEL_IPID_LAESTRGA = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH4SEL_IPID_RSVD = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH5SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH5SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH5SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH5SEL_IPID_ADC0TRG = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH5SEL_IPID_LAESTRGB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH6SEL_EDGDETDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH6SEL_EDGDETDIS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH6SEL_EDGDETDIS_S = @as(c_uint, 16);
pub const EVTSVT_DMACH6SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_DMACH6SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_DMACH6SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_DMACH6SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_DMACH6SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_DMACH6SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_DMACH6SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_DMACH6SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_DMACH6SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_DMACH6SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_DMACH6SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_DMACH6SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_DMACH6SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_DMACH6SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_DMACH6SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH6SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH6SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH6SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH6SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH6SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH6SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_DMACH7SEL_EDGDETDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH7SEL_EDGDETDIS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH7SEL_EDGDETDIS_S = @as(c_uint, 16);
pub const EVTSVT_DMACH7SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_DMACH7SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_DMACH7SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_DMACH7SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_DMACH7SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_DMACH7SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_DMACH7SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_DMACH7SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_DMACH7SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_DMACH7SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_DMACH7SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_DMACH7SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_DMACH7SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_DMACH7SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_DMACH7SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH7SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH7SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH7SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH7SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH7SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH7SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const __HW_EVTULL_H__ = "";
pub const EVTULL_O_DESC = @as(c_uint, 0x00000000);
pub const EVTULL_O_DESCEX = @as(c_uint, 0x00000004);
pub const EVTULL_O_DTB = @as(c_uint, 0x00000064);
pub const EVTULL_O_NMISEL = @as(c_uint, 0x00000400);
pub const EVTULL_O_RTCCPTSEL = @as(c_uint, 0x00000404);
pub const EVTULL_O_WKUPMASK = @as(c_uint, 0x00000800);
pub const EVTULL_DESC_MODID_W = @as(c_uint, 16);
pub const EVTULL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const EVTULL_DESC_MODID_S = @as(c_uint, 16);
pub const EVTULL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const EVTULL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const EVTULL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const EVTULL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const EVTULL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const EVTULL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const EVTULL_DESC_MAJREV_W = @as(c_uint, 4);
pub const EVTULL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const EVTULL_DESC_MAJREV_S = @as(c_uint, 4);
pub const EVTULL_DESC_MINREV_W = @as(c_uint, 4);
pub const EVTULL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const EVTULL_DESC_MINREV_S = @as(c_uint, 0);
pub const EVTULL_DESCEX_IDMA_W = @as(c_uint, 10);
pub const EVTULL_DESCEX_IDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFC00000, .hex);
pub const EVTULL_DESCEX_IDMA_S = @as(c_uint, 22);
pub const EVTULL_DESCEX_NDMA_W = @as(c_uint, 5);
pub const EVTULL_DESCEX_NDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003E0000, .hex);
pub const EVTULL_DESCEX_NDMA_S = @as(c_uint, 17);
pub const EVTULL_DESCEX_PD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTULL_DESCEX_PD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTULL_DESCEX_PD_S = @as(c_uint, 16);
pub const EVTULL_DESCEX_NSUB_W = @as(c_uint, 8);
pub const EVTULL_DESCEX_NSUB_M = @as(c_uint, 0x0000FF00);
pub const EVTULL_DESCEX_NSUB_S = @as(c_uint, 8);
pub const EVTULL_DESCEX_NPUB_W = @as(c_uint, 8);
pub const EVTULL_DESCEX_NPUB_M = @as(c_uint, 0x000000FF);
pub const EVTULL_DESCEX_NPUB_S = @as(c_uint, 0);
pub const EVTULL_DTB_SEL = @as(c_uint, 0x00000001);
pub const EVTULL_DTB_SEL_M = @as(c_uint, 0x00000001);
pub const EVTULL_DTB_SEL_S = @as(c_uint, 0);
pub const EVTULL_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const EVTULL_NMISEL_PUBID_W = @as(c_uint, 6);
pub const EVTULL_NMISEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTULL_NMISEL_PUBID_S = @as(c_uint, 0);
pub const EVTULL_NMISEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTULL_NMISEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTULL_NMISEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTULL_NMISEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_NMISEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTULL_NMISEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTULL_NMISEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTULL_RTCCPTSEL_PUBID_W = @as(c_uint, 6);
pub const EVTULL_RTCCPTSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTULL_RTCCPTSEL_PUBID_S = @as(c_uint, 0);
pub const EVTULL_RTCCPTSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTULL_RTCCPTSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTULL_RTCCPTSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTULL_RTCCPTSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_RTCCPTSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTULL_RTCCPTSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTULL_RTCCPTSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTULL_WKUPMASK_AON_IOC_COMB = @as(c_uint, 0x00000080);
pub const EVTULL_WKUPMASK_AON_IOC_COMB_M = @as(c_uint, 0x00000080);
pub const EVTULL_WKUPMASK_AON_IOC_COMB_S = @as(c_uint, 7);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ = @as(c_uint, 0x00000040);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ_M = @as(c_uint, 0x00000040);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ_S = @as(c_uint, 6);
pub const EVTULL_WKUPMASK_AON_DBG_COMB = @as(c_uint, 0x00000020);
pub const EVTULL_WKUPMASK_AON_DBG_COMB_M = @as(c_uint, 0x00000020);
pub const EVTULL_WKUPMASK_AON_DBG_COMB_S = @as(c_uint, 5);
pub const EVTULL_WKUPMASK_AON_RTC_COMB = @as(c_uint, 0x00000010);
pub const EVTULL_WKUPMASK_AON_RTC_COMB_M = @as(c_uint, 0x00000010);
pub const EVTULL_WKUPMASK_AON_RTC_COMB_S = @as(c_uint, 4);
pub const EVTULL_WKUPMASK_AON_CKM_COMB = @as(c_uint, 0x00000008);
pub const EVTULL_WKUPMASK_AON_CKM_COMB_M = @as(c_uint, 0x00000008);
pub const EVTULL_WKUPMASK_AON_CKM_COMB_S = @as(c_uint, 3);
pub const EVTULL_WKUPMASK_AON_PMU_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_WKUPMASK_AON_PMU_COMB_M = @as(c_uint, 0x00000004);
pub const EVTULL_WKUPMASK_AON_PMU_COMB_S = @as(c_uint, 2);
pub const __HW_GPIO_H__ = "";
pub const GPIO_O_DESC = @as(c_uint, 0x00000000);
pub const GPIO_O_DESCEX = @as(c_uint, 0x00000004);
pub const GPIO_O_IMASK = @as(c_uint, 0x00000044);
pub const GPIO_O_RIS = @as(c_uint, 0x0000004C);
pub const GPIO_O_MIS = @as(c_uint, 0x00000054);
pub const GPIO_O_ISET = @as(c_uint, 0x0000005C);
pub const GPIO_O_ICLR = @as(c_uint, 0x00000064);
pub const GPIO_O_IMSET = @as(c_uint, 0x0000006C);
pub const GPIO_O_IMCLR = @as(c_uint, 0x00000074);
pub const GPIO_O_DTB = @as(c_uint, 0x0000007C);
pub const GPIO_O_DOUT3_0 = @as(c_uint, 0x00000100);
pub const GPIO_O_DOUT7_4 = @as(c_uint, 0x00000104);
pub const GPIO_O_DOUT11_8 = @as(c_uint, 0x00000108);
pub const GPIO_O_DOUT15_12 = @as(c_uint, 0x0000010C);
pub const GPIO_O_DOUT19_16 = @as(c_uint, 0x00000110);
pub const GPIO_O_DOUT23_20 = @as(c_uint, 0x00000114);
pub const GPIO_O_DOUT27_24 = @as(c_uint, 0x00000118);
pub const GPIO_O_DOUT31_0 = @as(c_uint, 0x00000200);
pub const GPIO_O_DOUTSET31_0 = @as(c_uint, 0x00000210);
pub const GPIO_O_DOUTCLR31_0 = @as(c_uint, 0x00000220);
pub const GPIO_O_DOUTTGL31_0 = @as(c_uint, 0x00000230);
pub const GPIO_O_DOUTTGL3_0 = @as(c_uint, 0x00000300);
pub const GPIO_O_DOUTTGL7_4 = @as(c_uint, 0x00000304);
pub const GPIO_O_DOUTTGL11_8 = @as(c_uint, 0x00000308);
pub const GPIO_O_DOUTTGL15_12 = @as(c_uint, 0x0000030C);
pub const GPIO_O_DOUTTGL19_16 = @as(c_uint, 0x00000310);
pub const GPIO_O_DOUTTGL23_20 = @as(c_uint, 0x00000314);
pub const GPIO_O_DOUTTGL27_24 = @as(c_uint, 0x00000318);
pub const GPIO_O_DOE3_0 = @as(c_uint, 0x00000400);
pub const GPIO_O_DOE7_4 = @as(c_uint, 0x00000404);
pub const GPIO_O_DOE11_8 = @as(c_uint, 0x00000408);
pub const GPIO_O_DOE15_12 = @as(c_uint, 0x0000040C);
pub const GPIO_O_DOE19_16 = @as(c_uint, 0x00000410);
pub const GPIO_O_DOE23_20 = @as(c_uint, 0x00000414);
pub const GPIO_O_DOE27_24 = @as(c_uint, 0x00000418);
pub const GPIO_O_DOE31_0 = @as(c_uint, 0x00000500);
pub const GPIO_O_DOESET31_0 = @as(c_uint, 0x00000510);
pub const GPIO_O_DOECLR31_0 = @as(c_uint, 0x00000520);
pub const GPIO_O_DOETGL31_0 = @as(c_uint, 0x00000530);
pub const GPIO_O_DIN3_0 = @as(c_uint, 0x00000600);
pub const GPIO_O_DIN7_4 = @as(c_uint, 0x00000604);
pub const GPIO_O_DIN11_8 = @as(c_uint, 0x00000608);
pub const GPIO_O_DIN15_12 = @as(c_uint, 0x0000060C);
pub const GPIO_O_DIN19_16 = @as(c_uint, 0x00000610);
pub const GPIO_O_DIN23_20 = @as(c_uint, 0x00000614);
pub const GPIO_O_DIN27_24 = @as(c_uint, 0x00000618);
pub const GPIO_O_DIN31_0 = @as(c_uint, 0x00000700);
pub const GPIO_O_EVTCFG = @as(c_uint, 0x00000800);
pub const GPIO_DESC_MODID_W = @as(c_uint, 16);
pub const GPIO_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const GPIO_DESC_MODID_S = @as(c_uint, 16);
pub const GPIO_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const GPIO_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const GPIO_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const GPIO_DESC_INSTIDX_W = @as(c_uint, 4);
pub const GPIO_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const GPIO_DESC_INSTIDX_S = @as(c_uint, 8);
pub const GPIO_DESC_MAJREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const GPIO_DESC_MAJREV_S = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const GPIO_DESC_MINREV_S = @as(c_uint, 0);
pub const GPIO_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const GPIO_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const GPIO_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMASK_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMASK_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMASK_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMASK_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMASK_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMASK_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMASK_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMASK_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMASK_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMASK_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMASK_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMASK_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMASK_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMASK_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMASK_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMASK_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMASK_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMASK_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMASK_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMASK_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMASK_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMASK_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMASK_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMASK_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMASK_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_RIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_RIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_RIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_RIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_RIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_RIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_RIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_RIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_RIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_RIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_RIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_RIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_RIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_RIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_RIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_RIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_RIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_RIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_RIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_RIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_RIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_RIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_RIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_RIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_RIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_RIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_MIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_MIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_MIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_MIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_MIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_MIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_MIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_MIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_MIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_MIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_MIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_MIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_MIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_MIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_MIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_MIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_MIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_MIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_MIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_MIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_MIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_MIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_MIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_MIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_MIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_MIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_S = @as(c_uint, 25);
pub const GPIO_ISET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_S = @as(c_uint, 24);
pub const GPIO_ISET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_S = @as(c_uint, 23);
pub const GPIO_ISET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_S = @as(c_uint, 22);
pub const GPIO_ISET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_S = @as(c_uint, 21);
pub const GPIO_ISET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_S = @as(c_uint, 20);
pub const GPIO_ISET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_S = @as(c_uint, 19);
pub const GPIO_ISET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_S = @as(c_uint, 18);
pub const GPIO_ISET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_S = @as(c_uint, 17);
pub const GPIO_ISET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_S = @as(c_uint, 16);
pub const GPIO_ISET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_S = @as(c_uint, 15);
pub const GPIO_ISET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_S = @as(c_uint, 14);
pub const GPIO_ISET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_S = @as(c_uint, 13);
pub const GPIO_ISET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_S = @as(c_uint, 12);
pub const GPIO_ISET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_S = @as(c_uint, 11);
pub const GPIO_ISET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_S = @as(c_uint, 10);
pub const GPIO_ISET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_S = @as(c_uint, 9);
pub const GPIO_ISET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_S = @as(c_uint, 8);
pub const GPIO_ISET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_S = @as(c_uint, 7);
pub const GPIO_ISET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_S = @as(c_uint, 6);
pub const GPIO_ISET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_S = @as(c_uint, 5);
pub const GPIO_ISET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_S = @as(c_uint, 4);
pub const GPIO_ISET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_S = @as(c_uint, 3);
pub const GPIO_ISET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_S = @as(c_uint, 2);
pub const GPIO_ISET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_S = @as(c_uint, 1);
pub const GPIO_ISET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_S = @as(c_uint, 0);
pub const GPIO_ISET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_ICLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_ICLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_ICLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_ICLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_ICLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_ICLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_ICLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_ICLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_ICLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_ICLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_ICLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_ICLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_ICLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_ICLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_ICLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_ICLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_ICLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_ICLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_ICLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_ICLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_ICLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_ICLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_ICLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_ICLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_ICLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_ICLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMSET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMSET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMSET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMSET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMSET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMSET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMSET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMSET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMSET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMSET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMSET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMSET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMSET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMSET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMSET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMSET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMSET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMSET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMSET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMSET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMSET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMSET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMSET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMSET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMSET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMSET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMCLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMCLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMCLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMCLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMCLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMCLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMCLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMCLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMCLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMCLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMCLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMCLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMCLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMCLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMCLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMCLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMCLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMCLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMCLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMCLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMCLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMCLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMCLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMCLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMCLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMCLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DTB_SEL_W = @as(c_uint, 3);
pub const GPIO_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const GPIO_DTB_SEL_S = @as(c_uint, 0);
pub const GPIO_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUT3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUT3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUT3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUT7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUT7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUT7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUT7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUT11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUT11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUT11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUT11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUT15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUT15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUT15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUT15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUT19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUT19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUT19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUT19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUT23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUT23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUT23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUT23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUT27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUT27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUT31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUT31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUT31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUT31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUT31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUT31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUT31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUT31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUT31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUT31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUT31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUT31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUT31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUT31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUT31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUT31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUT31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUT31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUT31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUT31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUT31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUT31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUT31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUT31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUT31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTSET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTSET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTSET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTSET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTSET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTSET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTSET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTSET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTSET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTSET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTSET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTSET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTSET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTSET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTSET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTSET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTSET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTSET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTSET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTSET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTSET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTSET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTSET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTSET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTSET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTSET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTCLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTCLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTCLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTCLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTCLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTCLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTCLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTCLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTCLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTCLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTCLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTCLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTCLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTCLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTCLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTCLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTCLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTCLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTCLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTCLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTCLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTCLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTCLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTCLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTCLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTCLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTTGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTTGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTTGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTTGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTTGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTTGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTTGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTTGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTTGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTTGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTTGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTTGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTTGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTTGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTTGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTTGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTTGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTTGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTTGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTTGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTTGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTTGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL3_0_DIO3_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL3_0_DIO2_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL3_0_DIO1_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL3_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL7_4_DIO7_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL7_4_DIO6_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL7_4_DIO5_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL7_4_DIO4_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL11_8_DIO11_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL11_8_DIO10_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL11_8_DIO9_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL11_8_DIO8_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL15_12_DIO15_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL15_12_DIO14_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL15_12_DIO13_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL15_12_DIO12_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL19_16_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL19_16_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL19_16_DIO17_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL19_16_DIO16_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL23_20_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL23_20_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL23_20_DIO21_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL23_20_DIO20_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL27_24_DIO25_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL27_24_DIO24_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOE3_0_DIO3_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOE3_0_DIO2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOE3_0_DIO1_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE3_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOE7_4_DIO7_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOE7_4_DIO6_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOE7_4_DIO5_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOE7_4_DIO4_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOE11_8_DIO11_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOE11_8_DIO10_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOE11_8_DIO9_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOE11_8_DIO8_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOE15_12_DIO15_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOE15_12_DIO14_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOE15_12_DIO13_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOE15_12_DIO12_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOE19_16_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOE19_16_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOE19_16_DIO17_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOE19_16_DIO16_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOE23_20_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOE23_20_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOE23_20_DIO21_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOE23_20_DIO20_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOE27_24_DIO25_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOE27_24_DIO24_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOE31_0_DIO25_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOE31_0_DIO24_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOE31_0_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOE31_0_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOE31_0_DIO21_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOE31_0_DIO20_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOE31_0_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOE31_0_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOE31_0_DIO17_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOE31_0_DIO16_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOE31_0_DIO15_EN = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOE31_0_DIO14_EN = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOE31_0_DIO13_EN = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOE31_0_DIO12_EN = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOE31_0_DIO11_EN = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOE31_0_DIO10_EN = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOE31_0_DIO9_EN = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOE31_0_DIO8_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOE31_0_DIO7_EN = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOE31_0_DIO6_EN = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOE31_0_DIO5_EN = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOE31_0_DIO4_EN = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOE31_0_DIO3_EN = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOE31_0_DIO2_EN = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOE31_0_DIO1_EN = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE31_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOESET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOESET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOESET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOESET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOESET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOESET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOESET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOESET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOESET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOESET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOESET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOESET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOESET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOESET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOESET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOESET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOESET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOESET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOESET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOESET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOESET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOESET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOESET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOESET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOESET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOESET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOECLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOECLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOECLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOECLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOECLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOECLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOECLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOECLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOECLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOECLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOECLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOECLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOECLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOECLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOECLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOECLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOECLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOECLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOECLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOECLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOECLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOECLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOECLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOECLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOECLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOECLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOETGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOETGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOETGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOETGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOETGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOETGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOETGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOETGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOETGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOETGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOETGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOETGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOETGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOETGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOETGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOETGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOETGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOETGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOETGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOETGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOETGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOETGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOETGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOETGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOETGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOETGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DIN3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DIN3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DIN3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DIN7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DIN7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DIN7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DIN7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DIN11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DIN11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DIN11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DIN11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DIN15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DIN15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DIN15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DIN15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DIN19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DIN19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DIN19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DIN19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DIN23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DIN23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DIN23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DIN23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DIN27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DIN27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DIN31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DIN31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DIN31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DIN31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DIN31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DIN31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DIN31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DIN31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DIN31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DIN31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DIN31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DIN31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DIN31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DIN31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DIN31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DIN31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DIN31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DIN31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DIN31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DIN31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DIN31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DIN31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DIN31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DIN31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DIN31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_EVTEN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_M = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_S = @as(c_uint, 8);
pub const GPIO_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const GPIO_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const GPIO_EVTCFG_DIOSEL_MAXIMUM = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_MINIMUM = @as(c_uint, 0x00000000);
pub const __HW_IOC_H__ = "";
pub const IOC_O_DESC = @as(c_uint, 0x00000000);
pub const IOC_O_DESCEX = @as(c_uint, 0x00000004);
pub const IOC_O_DTB = @as(c_uint, 0x00000064);
pub const IOC_O_IOC0 = @as(c_uint, 0x00000100);
pub const IOC_O_IOC1 = @as(c_uint, 0x00000104);
pub const IOC_O_IOC2 = @as(c_uint, 0x00000108);
pub const IOC_O_IOC3 = @as(c_uint, 0x0000010C);
pub const IOC_O_IOC4 = @as(c_uint, 0x00000110);
pub const IOC_O_IOC5 = @as(c_uint, 0x00000114);
pub const IOC_O_IOC6 = @as(c_uint, 0x00000118);
pub const IOC_O_IOC7 = @as(c_uint, 0x0000011C);
pub const IOC_O_IOC8 = @as(c_uint, 0x00000120);
pub const IOC_O_IOC9 = @as(c_uint, 0x00000124);
pub const IOC_O_IOC10 = @as(c_uint, 0x00000128);
pub const IOC_O_IOC11 = @as(c_uint, 0x0000012C);
pub const IOC_O_IOC12 = @as(c_uint, 0x00000130);
pub const IOC_O_IOC13 = @as(c_uint, 0x00000134);
pub const IOC_O_IOC14 = @as(c_uint, 0x00000138);
pub const IOC_O_IOC15 = @as(c_uint, 0x0000013C);
pub const IOC_O_IOC16 = @as(c_uint, 0x00000140);
pub const IOC_O_IOC17 = @as(c_uint, 0x00000144);
pub const IOC_O_IOC18 = @as(c_uint, 0x00000148);
pub const IOC_O_IOC19 = @as(c_uint, 0x0000014C);
pub const IOC_O_IOC20 = @as(c_uint, 0x00000150);
pub const IOC_O_IOC21 = @as(c_uint, 0x00000154);
pub const IOC_O_IOC22 = @as(c_uint, 0x00000158);
pub const IOC_O_IOC23 = @as(c_uint, 0x0000015C);
pub const IOC_O_IOC24 = @as(c_uint, 0x00000160);
pub const IOC_O_IOC25 = @as(c_uint, 0x00000164);
pub const IOC_O_DTBCFG = @as(c_uint, 0x00000C00);
pub const IOC_O_DTBOE = @as(c_uint, 0x00000C04);
pub const IOC_O_EVTCFG = @as(c_uint, 0x00000C08);
pub const IOC_O_TEST = @as(c_uint, 0x00000C0C);
pub const IOC_O_DTBSTAT = @as(c_uint, 0x00000C10);
pub const IOC_DESC_MODID_W = @as(c_uint, 16);
pub const IOC_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const IOC_DESC_MODID_S = @as(c_uint, 16);
pub const IOC_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const IOC_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const IOC_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const IOC_DESC_INSTIDX_W = @as(c_uint, 4);
pub const IOC_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const IOC_DESC_INSTIDX_S = @as(c_uint, 8);
pub const IOC_DESC_MAJREV_W = @as(c_uint, 4);
pub const IOC_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const IOC_DESC_MAJREV_S = @as(c_uint, 4);
pub const IOC_DESC_MINREV_W = @as(c_uint, 4);
pub const IOC_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const IOC_DESC_MINREV_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDTBIO_W = @as(c_uint, 4);
pub const IOC_DESCEX_NUMDTBIO_M = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_S = @as(c_uint, 12);
pub const IOC_DESCEX_NUMDTBIO_MAXIMUM = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMHDIO_W = @as(c_uint, 5);
pub const IOC_DESCEX_NUMHDIO_M = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_S = @as(c_uint, 7);
pub const IOC_DESCEX_NUMHDIO_MAXIMUM = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_HDIO = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_M = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_S = @as(c_uint, 6);
pub const IOC_DESCEX_HDIO_PRESENT = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_ABSENT = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const IOC_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDIO_MAXIMUM = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DTB_SEL_W = @as(c_uint, 3);
pub const IOC_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const IOC_DTB_SEL_S = @as(c_uint, 0);
pub const IOC_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC0_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC0_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC0_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC0_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC0_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC0_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC0_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC0_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC0_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC0_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC0_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC0_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC0_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC0_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC0_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC0_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC0_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC0_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC0_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC0_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC0_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC0_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC0_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC0_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC0_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC0_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC0_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC0_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC0_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC0_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC0_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC0_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC0_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC1_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC1_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC1_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC1_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC1_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC1_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC1_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC1_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC1_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC1_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC1_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC1_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC1_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC1_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC1_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC1_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC1_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC1_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC1_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC1_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC1_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC1_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC1_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC1_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC1_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC1_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC1_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC1_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC1_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC1_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC1_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC1_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC1_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC1_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC2_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC2_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC2_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC2_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC2_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC2_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC2_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC2_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC2_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC2_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC2_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC2_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC2_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC2_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC2_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC2_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC2_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC2_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC2_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC2_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC2_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC2_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC2_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC2_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC2_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC2_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC2_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC2_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC2_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC2_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC2_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC2_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC2_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC2_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC3_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC3_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC3_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC3_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC3_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC3_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC3_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC3_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC3_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC3_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC3_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC3_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC3_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC3_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC3_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC3_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC3_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC3_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC3_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC3_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC3_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC3_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC3_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC3_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC3_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC3_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC3_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC3_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC3_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC3_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC3_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC3_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC3_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC3_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC4_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC4_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC4_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC4_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC4_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC4_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC4_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC4_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC4_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC4_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC4_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC4_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC4_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC4_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC4_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC4_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC4_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC4_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC4_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC4_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC4_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC4_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC4_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC4_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC4_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC4_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC4_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC4_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC4_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC4_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC4_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC4_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC4_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC4_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC5_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC5_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC5_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC5_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC5_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC5_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC5_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC5_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC5_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC5_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC5_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC5_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC5_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC5_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC5_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC5_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC5_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC5_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC5_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC5_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC5_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC5_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC5_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC5_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC5_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC5_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC5_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC5_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC5_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC5_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC5_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC5_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC5_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC5_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC6_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC6_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC6_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC6_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC6_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC6_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC6_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC6_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC6_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC6_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC6_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC6_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC6_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC6_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC6_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC6_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC6_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC6_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC6_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC6_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC6_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC6_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC6_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC6_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC6_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC6_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC6_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC6_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC6_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC6_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC6_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC6_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC6_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC6_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC7_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC7_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC7_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC7_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC7_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC7_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC7_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC7_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC7_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC7_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC7_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC7_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC7_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC7_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC7_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC7_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC7_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC7_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC7_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC7_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC7_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC7_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC7_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC7_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC7_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC7_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC7_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC7_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC7_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC7_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC7_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC7_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC7_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC7_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC8_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC8_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC8_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC8_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC8_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC8_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC8_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC8_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC8_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC8_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC8_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC8_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC8_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC8_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC8_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC8_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC8_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC8_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC8_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC8_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC8_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC8_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC8_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC8_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC8_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC8_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC8_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC8_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC8_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC8_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC8_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC8_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC8_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC8_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC9_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC9_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC9_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC9_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC9_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC9_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC9_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC9_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC9_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC9_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC9_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC9_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC9_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC9_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC9_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC9_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC9_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC9_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC9_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC9_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC9_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC9_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC9_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC9_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC9_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC9_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC9_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC9_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC9_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC9_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC9_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC9_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC9_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC9_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC10_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC10_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC10_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC10_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC10_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC10_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC10_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC10_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC10_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC10_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC10_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC10_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC10_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC10_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC10_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC10_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC10_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC10_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC10_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC10_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC10_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC10_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC10_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC10_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC10_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC10_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC10_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC10_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC10_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC10_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC10_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC10_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC10_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC10_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC11_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC11_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC11_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC11_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC11_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC11_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC11_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC11_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC11_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC11_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC11_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC11_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC11_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC11_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC11_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC11_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC11_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC11_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC11_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC11_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC11_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC11_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC11_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC11_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC11_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC11_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC11_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC11_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC11_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC11_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC11_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC11_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC11_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC11_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC12_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC12_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC12_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC12_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC12_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC12_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC12_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC12_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC12_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC12_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC12_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC12_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC12_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC12_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC12_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC12_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC12_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC12_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC12_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC12_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC12_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC12_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC12_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC12_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC12_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC12_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC12_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC12_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC12_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC12_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC12_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC12_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC12_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC12_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC12_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC12_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC12_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC12_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC12_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC12_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC12_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC12_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC13_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC13_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC13_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC13_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC13_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC13_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC13_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC13_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC13_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC13_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC13_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC13_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC13_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC13_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC13_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC13_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC13_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC13_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC13_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC13_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC13_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC13_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC13_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC13_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC13_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC13_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC13_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC13_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC13_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC13_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC13_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC13_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC13_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC13_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC14_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC14_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC14_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC14_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC14_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC14_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC14_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC14_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC14_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC14_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC14_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC14_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC14_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC14_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC14_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC14_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC14_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC14_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC14_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC14_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC14_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC14_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC14_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC14_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC14_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC14_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC14_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC14_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC14_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC14_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC14_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC14_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC14_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC14_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC15_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC15_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC15_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC15_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC15_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC15_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC15_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC15_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC15_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC15_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC15_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC15_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC15_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC15_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC15_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC15_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC15_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC15_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC15_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC15_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC15_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC15_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC15_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC15_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC15_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC15_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC15_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC15_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC15_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC15_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC15_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC15_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC15_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC15_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC16_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC16_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC16_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC16_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC16_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC16_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC16_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC16_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC16_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC16_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC16_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC16_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC16_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC16_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC16_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC16_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC16_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC16_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC16_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC16_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC16_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC16_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC16_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC16_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC16_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC16_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC16_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC16_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC16_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC16_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC16_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC16_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC16_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC16_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC16_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC16_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC16_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC16_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC16_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC16_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC16_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC16_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC17_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC17_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC17_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC17_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC17_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC17_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC17_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC17_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC17_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC17_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC17_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC17_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC17_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC17_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC17_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC17_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC17_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC17_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC17_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC17_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC17_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC17_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC17_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC17_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC17_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC17_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC17_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC17_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC17_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC17_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC17_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC17_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC17_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC17_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC17_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC17_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC17_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC17_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC17_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC17_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC17_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC17_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC18_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC18_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC18_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC18_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC18_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC18_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC18_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC18_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC18_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC18_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC18_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC18_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC18_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC18_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC18_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC18_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC18_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC18_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC18_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC18_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC18_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC18_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC18_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC18_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC18_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC18_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC18_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC18_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC18_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC18_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC18_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC18_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC18_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC18_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC18_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC18_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC18_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC18_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC18_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC18_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC18_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC18_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC19_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC19_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC19_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC19_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC19_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC19_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC19_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC19_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC19_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC19_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC19_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC19_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC19_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC19_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC19_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC19_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC19_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC19_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC19_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC19_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC19_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC19_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC19_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC19_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC19_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC19_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC19_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC19_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC19_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC19_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC19_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC19_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC19_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC19_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC19_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC19_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC19_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC19_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC19_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC19_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC19_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC19_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC20_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC20_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC20_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC20_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC20_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC20_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC20_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC20_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC20_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC20_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC20_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC20_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC20_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC20_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC20_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC20_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC20_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC20_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC20_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC20_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC20_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC20_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC20_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC20_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC20_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC20_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC20_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC20_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC20_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC20_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC20_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC20_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC20_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC20_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC21_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC21_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC21_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC21_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC21_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC21_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC21_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC21_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC21_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC21_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC21_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC21_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC21_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC21_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC21_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC21_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC21_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC21_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC21_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC21_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC21_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC21_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC21_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC21_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC21_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC21_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC21_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC21_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC21_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC21_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC21_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC21_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC21_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC21_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC22_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC22_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC22_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC22_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC22_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC22_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC22_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC22_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC22_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC22_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC22_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC22_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC22_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC22_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC22_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC22_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC22_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC22_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC22_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC22_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC22_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC22_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC22_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC22_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC22_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC22_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC22_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC22_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC22_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC22_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC22_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC22_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC22_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC22_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC23_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC23_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC23_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC23_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC23_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC23_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC23_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC23_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC23_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC23_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC23_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC23_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC23_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC23_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC23_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC23_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC23_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC23_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC23_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC23_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC23_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC23_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC23_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC23_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC23_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC23_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC23_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC23_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC23_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC23_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC23_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC23_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC23_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC23_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC24_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC24_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC24_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC24_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC24_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC24_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC24_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC24_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC24_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC24_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC24_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC24_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC24_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC24_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC24_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC24_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC24_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC24_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC24_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC24_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC24_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC24_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC24_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC24_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC24_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC24_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC24_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC24_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC24_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC24_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC24_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC24_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC24_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC24_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC24_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC24_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC24_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC24_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC24_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC24_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC24_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC24_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC25_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC25_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC25_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC25_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC25_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC25_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC25_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC25_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC25_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC25_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC25_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC25_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC25_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC25_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC25_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC25_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC25_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC25_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC25_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC25_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC25_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC25_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC25_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC25_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC25_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC25_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC25_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC25_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC25_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC25_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC25_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC25_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC25_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC25_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_DTB0DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_S = @as(c_uint, 23);
pub const IOC_DTBCFG_DTB0DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_PADSEL_W = @as(c_uint, 3);
pub const IOC_DTBCFG_PADSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const IOC_DTBCFG_PADSEL_S = @as(c_uint, 16);
pub const IOC_DTBCFG_PADSEL_DTB2TO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB5TO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB8TO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB11TO9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB14TO12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB15TO13 = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_ULLSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_ULLSEL_M = @as(c_uint, 0x00001F00);
pub const IOC_DTBCFG_ULLSEL_S = @as(c_uint, 8);
pub const IOC_DTBCFG_SVTSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_SVTSEL_M = @as(c_uint, 0x0000001F);
pub const IOC_DTBCFG_SVTSEL_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN15 = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_M = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_S = @as(c_uint, 15);
pub const IOC_DTBOE_EN15_EN = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN14 = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_M = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_S = @as(c_uint, 14);
pub const IOC_DTBOE_EN14_EN = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN13 = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_M = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_S = @as(c_uint, 13);
pub const IOC_DTBOE_EN13_EN = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN12 = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_M = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_S = @as(c_uint, 12);
pub const IOC_DTBOE_EN12_EN = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN11 = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_M = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_S = @as(c_uint, 11);
pub const IOC_DTBOE_EN11_EN = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN10 = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_M = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_S = @as(c_uint, 10);
pub const IOC_DTBOE_EN10_EN = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN9 = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_M = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_S = @as(c_uint, 9);
pub const IOC_DTBOE_EN9_EN = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN8 = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_M = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_S = @as(c_uint, 8);
pub const IOC_DTBOE_EN8_EN = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN7 = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_M = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_S = @as(c_uint, 7);
pub const IOC_DTBOE_EN7_EN = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN6 = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_M = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_S = @as(c_uint, 6);
pub const IOC_DTBOE_EN6_EN = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN5 = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_M = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_S = @as(c_uint, 5);
pub const IOC_DTBOE_EN5_EN = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN4 = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_M = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_S = @as(c_uint, 4);
pub const IOC_DTBOE_EN4_EN = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN3 = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_M = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_S = @as(c_uint, 3);
pub const IOC_DTBOE_EN3_EN = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN2 = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_M = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_S = @as(c_uint, 2);
pub const IOC_DTBOE_EN2_EN = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN1 = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_M = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_S = @as(c_uint, 1);
pub const IOC_DTBOE_EN1_EN = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN0 = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_M = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN0_EN = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTIFG = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_M = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_S = @as(c_uint, 8);
pub const IOC_EVTCFG_EVTIFG_SET = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_CLR = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTEN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_M = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_S = @as(c_uint, 7);
pub const IOC_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const IOC_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const IOC_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_M = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL_HI = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_LO = @as(c_uint, 0x00000000);
pub const IOC_DTBSTAT_VAL_W = @as(c_uint, 16);
pub const IOC_DTBSTAT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const IOC_DTBSTAT_VAL_S = @as(c_uint, 0);
pub const __HW_LGPT_H__ = "";
pub const LGPT_O_DESC = @as(c_uint, 0x00000000);
pub const LGPT_O_DESCEX = @as(c_uint, 0x00000004);
pub const LGPT_O_STARTCFG = @as(c_uint, 0x00000008);
pub const LGPT_O_CTL = @as(c_uint, 0x0000000C);
pub const LGPT_O_OUTCTL = @as(c_uint, 0x00000010);
pub const LGPT_O_CNTR = @as(c_uint, 0x00000014);
pub const LGPT_O_PRECFG = @as(c_uint, 0x00000018);
pub const LGPT_O_PREEVENT = @as(c_uint, 0x0000001C);
pub const LGPT_O_CHFILT = @as(c_uint, 0x00000020);
pub const LGPT_O_QDECSTAT = @as(c_uint, 0x00000034);
pub const LGPT_O_IRGEN = @as(c_uint, 0x00000038);
pub const LGPT_O_DMA = @as(c_uint, 0x0000003C);
pub const LGPT_O_DMARW = @as(c_uint, 0x00000040);
pub const LGPT_O_ADCTRG = @as(c_uint, 0x00000044);
pub const LGPT_O_IOCTL = @as(c_uint, 0x00000048);
pub const LGPT_O_IMASK = @as(c_uint, 0x00000068);
pub const LGPT_O_RIS = @as(c_uint, 0x0000006C);
pub const LGPT_O_MIS = @as(c_uint, 0x00000070);
pub const LGPT_O_ISET = @as(c_uint, 0x00000074);
pub const LGPT_O_ICLR = @as(c_uint, 0x00000078);
pub const LGPT_O_IMSET = @as(c_uint, 0x0000007C);
pub const LGPT_O_IMCLR = @as(c_uint, 0x00000080);
pub const LGPT_O_EMU = @as(c_uint, 0x00000084);
pub const LGPT_O_C0CFG = @as(c_uint, 0x000000C0);
pub const LGPT_O_C1CFG = @as(c_uint, 0x000000C4);
pub const LGPT_O_C2CFG = @as(c_uint, 0x000000C8);
pub const LGPT_O_PTGT = @as(c_uint, 0x000000FC);
pub const LGPT_O_PC0CC = @as(c_uint, 0x00000100);
pub const LGPT_O_PC1CC = @as(c_uint, 0x00000104);
pub const LGPT_O_PC2CC = @as(c_uint, 0x00000108);
pub const LGPT_O_TGT = @as(c_uint, 0x0000013C);
pub const LGPT_O_C0CC = @as(c_uint, 0x00000140);
pub const LGPT_O_C1CC = @as(c_uint, 0x00000144);
pub const LGPT_O_C2CC = @as(c_uint, 0x00000148);
pub const LGPT_O_PTGTNC = @as(c_uint, 0x0000017C);
pub const LGPT_O_PC0CCNC = @as(c_uint, 0x00000180);
pub const LGPT_O_PC1CCNC = @as(c_uint, 0x00000184);
pub const LGPT_O_PC2CCNC = @as(c_uint, 0x00000188);
pub const LGPT_O_TGTNC = @as(c_uint, 0x000001BC);
pub const LGPT_O_C0CCNC = @as(c_uint, 0x000001C0);
pub const LGPT_O_C1CCNC = @as(c_uint, 0x000001C4);
pub const LGPT_O_C2CCNC = @as(c_uint, 0x000001C8);
pub const LGPT_DESC_MODID_W = @as(c_uint, 16);
pub const LGPT_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LGPT_DESC_MODID_S = @as(c_uint, 16);
pub const LGPT_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const LGPT_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const LGPT_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const LGPT_DESC_INSTIDX_W = @as(c_uint, 4);
pub const LGPT_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const LGPT_DESC_INSTIDX_S = @as(c_uint, 8);
pub const LGPT_DESC_MAJREV_W = @as(c_uint, 4);
pub const LGPT_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const LGPT_DESC_MAJREV_S = @as(c_uint, 4);
pub const LGPT_DESC_MINREV_W = @as(c_uint, 4);
pub const LGPT_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const LGPT_DESC_MINREV_S = @as(c_uint, 0);
pub const LGPT_DESCEX_HIR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LGPT_DESCEX_HIR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LGPT_DESCEX_HIR_S = @as(c_uint, 19);
pub const LGPT_DESCEX_HDBF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LGPT_DESCEX_HDBF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LGPT_DESCEX_HDBF_S = @as(c_uint, 18);
pub const LGPT_DESCEX_PREW_W = @as(c_uint, 4);
pub const LGPT_DESCEX_PREW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003C000, .hex);
pub const LGPT_DESCEX_PREW_S = @as(c_uint, 14);
pub const LGPT_DESCEX_HQDEC = @as(c_uint, 0x00002000);
pub const LGPT_DESCEX_HQDEC_M = @as(c_uint, 0x00002000);
pub const LGPT_DESCEX_HQDEC_S = @as(c_uint, 13);
pub const LGPT_DESCEX_HCIF = @as(c_uint, 0x00001000);
pub const LGPT_DESCEX_HCIF_M = @as(c_uint, 0x00001000);
pub const LGPT_DESCEX_HCIF_S = @as(c_uint, 12);
pub const LGPT_DESCEX_CIFS_W = @as(c_uint, 4);
pub const LGPT_DESCEX_CIFS_M = @as(c_uint, 0x00000F00);
pub const LGPT_DESCEX_CIFS_S = @as(c_uint, 8);
pub const LGPT_DESCEX_HDMA = @as(c_uint, 0x00000080);
pub const LGPT_DESCEX_HDMA_M = @as(c_uint, 0x00000080);
pub const LGPT_DESCEX_HDMA_S = @as(c_uint, 7);
pub const LGPT_DESCEX_HINT = @as(c_uint, 0x00000040);
pub const LGPT_DESCEX_HINT_M = @as(c_uint, 0x00000040);
pub const LGPT_DESCEX_HINT_S = @as(c_uint, 6);
pub const LGPT_DESCEX_CNTRW_W = @as(c_uint, 2);
pub const LGPT_DESCEX_CNTRW_M = @as(c_uint, 0x00000030);
pub const LGPT_DESCEX_CNTRW_S = @as(c_uint, 4);
pub const LGPT_DESCEX_CNTRW_RESERVED = @as(c_uint, 0x00000030);
pub const LGPT_DESCEX_CNTRW_CNTR32 = @as(c_uint, 0x00000020);
pub const LGPT_DESCEX_CNTRW_CNTR24 = @as(c_uint, 0x00000010);
pub const LGPT_DESCEX_CNTRW_CNTR16 = @as(c_uint, 0x00000000);
pub const LGPT_DESCEX_NCH_W = @as(c_uint, 4);
pub const LGPT_DESCEX_NCH_M = @as(c_uint, 0x0000000F);
pub const LGPT_DESCEX_NCH_S = @as(c_uint, 0);
pub const LGPT_STARTCFG_LGPT_W = @as(c_uint, 2);
pub const LGPT_STARTCFG_LGPT_M = @as(c_uint, 0x00000003);
pub const LGPT_STARTCFG_LGPT_S = @as(c_uint, 0);
pub const LGPT_STARTCFG_LGPT_EV_SYNC = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C2RST = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_M = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_S = @as(c_uint, 10);
pub const LGPT_CTL_C2RST_RST = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C1RST = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_M = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_S = @as(c_uint, 9);
pub const LGPT_CTL_C1RST_RST = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C0RST = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_M = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_S = @as(c_uint, 8);
pub const LGPT_CTL_C0RST_RST = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_INTP = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_M = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_S = @as(c_uint, 5);
pub const LGPT_CTL_INTP_LATE = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_EARLY = @as(c_uint, 0x00000000);
pub const LGPT_CTL_CMPDIR_W = @as(c_uint, 2);
pub const LGPT_CTL_CMPDIR_M = @as(c_uint, 0x00000018);
pub const LGPT_CTL_CMPDIR_S = @as(c_uint, 3);
pub const LGPT_CTL_CMPDIR_RESERVED = @as(c_uint, 0x00000018);
pub const LGPT_CTL_CMPDIR_DOWN = @as(c_uint, 0x00000010);
pub const LGPT_CTL_CMPDIR_UP = @as(c_uint, 0x00000008);
pub const LGPT_CTL_CMPDIR_BOTH = @as(c_uint, 0x00000000);
pub const LGPT_CTL_MODE_W = @as(c_uint, 3);
pub const LGPT_CTL_MODE_M = @as(c_uint, 0x00000007);
pub const LGPT_CTL_MODE_S = @as(c_uint, 0);
pub const LGPT_CTL_MODE_SYNC_UPDWN_PER = @as(c_uint, 0x00000007);
pub const LGPT_CTL_MODE_SYNC_UP_PER = @as(c_uint, 0x00000006);
pub const LGPT_CTL_MODE_SYNC_UP_ONCE = @as(c_uint, 0x00000005);
pub const LGPT_CTL_MODE_QDEC = @as(c_uint, 0x00000004);
pub const LGPT_CTL_MODE_UPDWN_PER = @as(c_uint, 0x00000003);
pub const LGPT_CTL_MODE_UP_PER = @as(c_uint, 0x00000002);
pub const LGPT_CTL_MODE_UP_ONCE = @as(c_uint, 0x00000001);
pub const LGPT_CTL_MODE_DIS = @as(c_uint, 0x00000000);
pub const LGPT_OUTCTL_SETOUT2 = @as(c_uint, 0x00000020);
pub const LGPT_OUTCTL_SETOUT2_M = @as(c_uint, 0x00000020);
pub const LGPT_OUTCTL_SETOUT2_S = @as(c_uint, 5);
pub const LGPT_OUTCTL_CLROUT2 = @as(c_uint, 0x00000010);
pub const LGPT_OUTCTL_CLROUT2_M = @as(c_uint, 0x00000010);
pub const LGPT_OUTCTL_CLROUT2_S = @as(c_uint, 4);
pub const LGPT_OUTCTL_SETOUT1 = @as(c_uint, 0x00000008);
pub const LGPT_OUTCTL_SETOUT1_M = @as(c_uint, 0x00000008);
pub const LGPT_OUTCTL_SETOUT1_S = @as(c_uint, 3);
pub const LGPT_OUTCTL_CLROUT1 = @as(c_uint, 0x00000004);
pub const LGPT_OUTCTL_CLROUT1_M = @as(c_uint, 0x00000004);
pub const LGPT_OUTCTL_CLROUT1_S = @as(c_uint, 2);
pub const LGPT_OUTCTL_SETOUT0 = @as(c_uint, 0x00000002);
pub const LGPT_OUTCTL_SETOUT0_M = @as(c_uint, 0x00000002);
pub const LGPT_OUTCTL_SETOUT0_S = @as(c_uint, 1);
pub const LGPT_OUTCTL_CLROUT0 = @as(c_uint, 0x00000001);
pub const LGPT_OUTCTL_CLROUT0_M = @as(c_uint, 0x00000001);
pub const LGPT_OUTCTL_CLROUT0_S = @as(c_uint, 0);
pub const LGPT_CNTR_VAL_W = @as(c_uint, 16);
pub const LGPT_CNTR_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_CNTR_VAL_S = @as(c_uint, 0);
pub const LGPT_PRECFG_TICKDIV_W = @as(c_uint, 8);
pub const LGPT_PRECFG_TICKDIV_M = @as(c_uint, 0x0000FF00);
pub const LGPT_PRECFG_TICKDIV_S = @as(c_uint, 8);
pub const LGPT_PRECFG_TICKSRC_W = @as(c_uint, 2);
pub const LGPT_PRECFG_TICKSRC_M = @as(c_uint, 0x00000003);
pub const LGPT_PRECFG_TICKSRC_S = @as(c_uint, 0);
pub const LGPT_PRECFG_TICKSRC_BOTH_TICK = @as(c_uint, 0x00000003);
pub const LGPT_PRECFG_TICKSRC_FALL_TICK = @as(c_uint, 0x00000002);
pub const LGPT_PRECFG_TICKSRC_RISE_TICK = @as(c_uint, 0x00000001);
pub const LGPT_PRECFG_TICKSRC_CLK = @as(c_uint, 0x00000000);
pub const LGPT_PREEVENT_VAL_W = @as(c_uint, 8);
pub const LGPT_PREEVENT_VAL_M = @as(c_uint, 0x000000FF);
pub const LGPT_PREEVENT_VAL_S = @as(c_uint, 0);
pub const LGPT_CHFILT_LOAD_W = @as(c_uint, 8);
pub const LGPT_CHFILT_LOAD_M = @as(c_uint, 0x0000FF00);
pub const LGPT_CHFILT_LOAD_S = @as(c_uint, 8);
pub const LGPT_CHFILT_MODE_W = @as(c_uint, 2);
pub const LGPT_CHFILT_MODE_M = @as(c_uint, 0x00000003);
pub const LGPT_CHFILT_MODE_S = @as(c_uint, 0);
pub const LGPT_CHFILT_MODE_TIMERCLK = @as(c_uint, 0x00000003);
pub const LGPT_CHFILT_MODE_TICKSRC = @as(c_uint, 0x00000002);
pub const LGPT_CHFILT_MODE_CLK = @as(c_uint, 0x00000001);
pub const LGPT_CHFILT_MODE_BYPASS = @as(c_uint, 0x00000000);
pub const LGPT_QDECSTAT_DBLTRANS = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_M = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_S = @as(c_uint, 1);
pub const LGPT_QDECSTAT_DBLTRANS_DBL = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_NONE = @as(c_uint, 0x00000000);
pub const LGPT_QDECSTAT_QDIR = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_M = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_S = @as(c_uint, 0);
pub const LGPT_QDECSTAT_QDIR_DOWN = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_UP = @as(c_uint, 0x00000000);
pub const LGPT_IRGEN_CTL = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_M = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_S = @as(c_uint, 0);
pub const LGPT_IRGEN_CTL_EN = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_DIS = @as(c_uint, 0x00000000);
pub const LGPT_DMA_RWCNTR_W = @as(c_uint, 4);
pub const LGPT_DMA_RWCNTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LGPT_DMA_RWCNTR_S = @as(c_uint, 16);
pub const LGPT_DMA_RWADDR_W = @as(c_uint, 7);
pub const LGPT_DMA_RWADDR_M = @as(c_uint, 0x00007F00);
pub const LGPT_DMA_RWADDR_S = @as(c_uint, 8);
pub const LGPT_DMA_REQ_W = @as(c_uint, 4);
pub const LGPT_DMA_REQ_M = @as(c_uint, 0x0000000F);
pub const LGPT_DMA_REQ_S = @as(c_uint, 0);
pub const LGPT_DMA_REQ_C11CC = @as(c_uint, 0x0000000F);
pub const LGPT_DMA_REQ_C10CC = @as(c_uint, 0x0000000E);
pub const LGPT_DMA_REQ_C9CC = @as(c_uint, 0x0000000D);
pub const LGPT_DMA_REQ_C8CC = @as(c_uint, 0x0000000C);
pub const LGPT_DMA_REQ_C7CC = @as(c_uint, 0x0000000B);
pub const LGPT_DMA_REQ_C6CC = @as(c_uint, 0x0000000A);
pub const LGPT_DMA_REQ_C5CC = @as(c_uint, 0x00000009);
pub const LGPT_DMA_REQ_C4CC = @as(c_uint, 0x00000008);
pub const LGPT_DMA_REQ_C3CC = @as(c_uint, 0x00000007);
pub const LGPT_DMA_REQ_C2CC = @as(c_uint, 0x00000006);
pub const LGPT_DMA_REQ_C1CC = @as(c_uint, 0x00000005);
pub const LGPT_DMA_REQ_C0CC = @as(c_uint, 0x00000004);
pub const LGPT_DMA_REQ_FAULT = @as(c_uint, 0x00000003);
pub const LGPT_DMA_REQ_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_DMA_REQ_TGT = @as(c_uint, 0x00000001);
pub const LGPT_DMA_REQ_DIS = @as(c_uint, 0x00000000);
pub const LGPT_DMARW_VAL_W = @as(c_uint, 16);
pub const LGPT_DMARW_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_DMARW_VAL_S = @as(c_uint, 0);
pub const LGPT_ADCTRG_SRC_W = @as(c_uint, 4);
pub const LGPT_ADCTRG_SRC_M = @as(c_uint, 0x0000000F);
pub const LGPT_ADCTRG_SRC_S = @as(c_uint, 0);
pub const LGPT_ADCTRG_SRC_C11CC = @as(c_uint, 0x0000000F);
pub const LGPT_ADCTRG_SRC_C10CC = @as(c_uint, 0x0000000E);
pub const LGPT_ADCTRG_SRC_C9CC = @as(c_uint, 0x0000000D);
pub const LGPT_ADCTRG_SRC_C8CC = @as(c_uint, 0x0000000C);
pub const LGPT_ADCTRG_SRC_C7CC = @as(c_uint, 0x0000000B);
pub const LGPT_ADCTRG_SRC_C6CC = @as(c_uint, 0x0000000A);
pub const LGPT_ADCTRG_SRC_C5CC = @as(c_uint, 0x00000009);
pub const LGPT_ADCTRG_SRC_C4CC = @as(c_uint, 0x00000008);
pub const LGPT_ADCTRG_SRC_C3CC = @as(c_uint, 0x00000007);
pub const LGPT_ADCTRG_SRC_C2CC = @as(c_uint, 0x00000006);
pub const LGPT_ADCTRG_SRC_C1CC = @as(c_uint, 0x00000005);
pub const LGPT_ADCTRG_SRC_C0CC = @as(c_uint, 0x00000004);
pub const LGPT_ADCTRG_SRC_FAULT = @as(c_uint, 0x00000003);
pub const LGPT_ADCTRG_SRC_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ADCTRG_SRC_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ADCTRG_SRC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT2_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT2_M = @as(c_uint, 0x00000C00);
pub const LGPT_IOCTL_COUT2_S = @as(c_uint, 10);
pub const LGPT_IOCTL_COUT2_INV = @as(c_uint, 0x00000C00);
pub const LGPT_IOCTL_COUT2_HIGH = @as(c_uint, 0x00000800);
pub const LGPT_IOCTL_COUT2_LOW = @as(c_uint, 0x00000400);
pub const LGPT_IOCTL_COUT2_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT2_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT2_M = @as(c_uint, 0x00000300);
pub const LGPT_IOCTL_OUT2_S = @as(c_uint, 8);
pub const LGPT_IOCTL_OUT2_INV = @as(c_uint, 0x00000300);
pub const LGPT_IOCTL_OUT2_HIGH = @as(c_uint, 0x00000200);
pub const LGPT_IOCTL_OUT2_LOW = @as(c_uint, 0x00000100);
pub const LGPT_IOCTL_OUT2_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT1_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT1_M = @as(c_uint, 0x000000C0);
pub const LGPT_IOCTL_COUT1_S = @as(c_uint, 6);
pub const LGPT_IOCTL_COUT1_INV = @as(c_uint, 0x000000C0);
pub const LGPT_IOCTL_COUT1_HIGH = @as(c_uint, 0x00000080);
pub const LGPT_IOCTL_COUT1_LOW = @as(c_uint, 0x00000040);
pub const LGPT_IOCTL_COUT1_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT1_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT1_M = @as(c_uint, 0x00000030);
pub const LGPT_IOCTL_OUT1_S = @as(c_uint, 4);
pub const LGPT_IOCTL_OUT1_INV = @as(c_uint, 0x00000030);
pub const LGPT_IOCTL_OUT1_HIGH = @as(c_uint, 0x00000020);
pub const LGPT_IOCTL_OUT1_LOW = @as(c_uint, 0x00000010);
pub const LGPT_IOCTL_OUT1_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT0_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT0_M = @as(c_uint, 0x0000000C);
pub const LGPT_IOCTL_COUT0_S = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT0_INV = @as(c_uint, 0x0000000C);
pub const LGPT_IOCTL_COUT0_HIGH = @as(c_uint, 0x00000008);
pub const LGPT_IOCTL_COUT0_LOW = @as(c_uint, 0x00000004);
pub const LGPT_IOCTL_COUT0_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT0_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT0_M = @as(c_uint, 0x00000003);
pub const LGPT_IOCTL_OUT0_S = @as(c_uint, 0);
pub const LGPT_IOCTL_OUT0_INV = @as(c_uint, 0x00000003);
pub const LGPT_IOCTL_OUT0_HIGH = @as(c_uint, 0x00000002);
pub const LGPT_IOCTL_OUT0_LOW = @as(c_uint, 0x00000001);
pub const LGPT_IOCTL_OUT0_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMASK_C2CC_EN = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMASK_C1CC_EN = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMASK_C0CC_EN = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMASK_FAULT_EN = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_S = @as(c_uint, 5);
pub const LGPT_IMASK_IDX_EN = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMASK_DIRCHNG_EN = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMASK_CNTRCHNG_EN = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMASK_DBLTRANS_EN = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMASK_ZERO_EN = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_S = @as(c_uint, 0);
pub const LGPT_IMASK_TGT_EN = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_S = @as(c_uint, 10);
pub const LGPT_RIS_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_S = @as(c_uint, 9);
pub const LGPT_RIS_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_S = @as(c_uint, 8);
pub const LGPT_RIS_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_S = @as(c_uint, 6);
pub const LGPT_RIS_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_IDX = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_S = @as(c_uint, 5);
pub const LGPT_RIS_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_RIS_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_RIS_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_RIS_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_S = @as(c_uint, 1);
pub const LGPT_RIS_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_TGT = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_S = @as(c_uint, 0);
pub const LGPT_RIS_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_S = @as(c_uint, 10);
pub const LGPT_MIS_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_S = @as(c_uint, 9);
pub const LGPT_MIS_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_S = @as(c_uint, 8);
pub const LGPT_MIS_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_S = @as(c_uint, 6);
pub const LGPT_MIS_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_IDX = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_S = @as(c_uint, 5);
pub const LGPT_MIS_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_MIS_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_MIS_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_MIS_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_S = @as(c_uint, 1);
pub const LGPT_MIS_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_TGT = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_S = @as(c_uint, 0);
pub const LGPT_MIS_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_S = @as(c_uint, 10);
pub const LGPT_ISET_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_S = @as(c_uint, 9);
pub const LGPT_ISET_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_S = @as(c_uint, 8);
pub const LGPT_ISET_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_S = @as(c_uint, 6);
pub const LGPT_ISET_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_IDX = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_S = @as(c_uint, 5);
pub const LGPT_ISET_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_ISET_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_ISET_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_ISET_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_S = @as(c_uint, 1);
pub const LGPT_ISET_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_S = @as(c_uint, 0);
pub const LGPT_ISET_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_S = @as(c_uint, 10);
pub const LGPT_ICLR_C2CC_CLR = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_S = @as(c_uint, 9);
pub const LGPT_ICLR_C1CC_CLR = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_S = @as(c_uint, 8);
pub const LGPT_ICLR_C0CC_CLR = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_S = @as(c_uint, 6);
pub const LGPT_ICLR_FAULT_CLR = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_IDX = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_S = @as(c_uint, 5);
pub const LGPT_ICLR_IDX_CLR = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_ICLR_DIRCHNG_CLR = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_ICLR_CNTRCHNG_CLR = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_ICLR_DBLTRANS_CLR = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_S = @as(c_uint, 1);
pub const LGPT_ICLR_ZERO_CLR = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_S = @as(c_uint, 0);
pub const LGPT_ICLR_TGT_CLR = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMSET_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMSET_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMSET_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMSET_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_S = @as(c_uint, 5);
pub const LGPT_IMSET_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMSET_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMSET_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMSET_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMSET_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_S = @as(c_uint, 0);
pub const LGPT_IMSET_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMCLR_C2CC_CLR = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMCLR_C1CC_CLR = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMCLR_C0CC_CLR = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMCLR_FAULT_CLR = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_S = @as(c_uint, 5);
pub const LGPT_IMCLR_IDX_CLR = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMCLR_DIRCHNG_CLR = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMCLR_CNTRCHNG_CLR = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMCLR_DBLTRANS_CLR = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMCLR_ZERO_CLR = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_S = @as(c_uint, 0);
pub const LGPT_IMCLR_TGT_CLR = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_EMU_CTL = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_M = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_S = @as(c_uint, 1);
pub const LGPT_EMU_CTL_ZERCOND = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_IMMEDIATE = @as(c_uint, 0x00000000);
pub const LGPT_EMU_HALT = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_M = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_S = @as(c_uint, 0);
pub const LGPT_EMU_HALT_EN = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C0CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C0CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C0CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C0CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C0CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C0CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C0CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C0CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C0CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C0CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C0CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C0CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C0CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C0CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C0CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C0CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C0CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C0CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C0CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C0CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C0CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C0CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C0CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C0CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C0CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C0CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C0CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C0CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C1CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C1CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C1CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C1CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C1CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C1CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C1CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C1CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C1CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C1CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C1CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C1CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C1CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C1CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C1CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C1CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C1CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C1CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C1CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C1CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C1CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C1CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C1CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C1CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C1CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C1CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C1CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C1CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C2CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C2CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C2CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C2CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C2CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C2CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C2CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C2CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C2CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C2CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C2CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C2CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C2CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C2CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C2CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C2CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C2CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C2CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C2CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C2CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C2CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C2CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C2CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C2CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C2CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C2CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C2CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C2CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_PTGT_VAL_W = @as(c_uint, 16);
pub const LGPT_PTGT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PTGT_VAL_S = @as(c_uint, 0);
pub const LGPT_PC0CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC0CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC0CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC1CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC1CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC1CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC2CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC2CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC2CC_VAL_S = @as(c_uint, 0);
pub const LGPT_TGT_VAL_W = @as(c_uint, 16);
pub const LGPT_TGT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_TGT_VAL_S = @as(c_uint, 0);
pub const LGPT_C0CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C0CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C0CC_VAL_S = @as(c_uint, 0);
pub const LGPT_C1CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C1CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C1CC_VAL_S = @as(c_uint, 0);
pub const LGPT_C2CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C2CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C2CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PTGTNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PTGTNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PTGTNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC0CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC0CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC0CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC1CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC1CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC1CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC2CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC2CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC2CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_TGTNC_VAL_W = @as(c_uint, 16);
pub const LGPT_TGTNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_TGTNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C0CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C0CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C0CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C1CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C1CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C1CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C2CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C2CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C2CCNC_VAL_S = @as(c_uint, 0);
pub const __HW_LGPT3_H__ = "";
pub const LGPT3_CNTR_VAL_W = @as(c_uint, 24);
pub const LGPT3_CNTR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_DMARW_VAL_W = @as(c_uint, 24);
pub const LGPT3_DMARW_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PTGT_VAL_W = @as(c_uint, 24);
pub const LGPT3_PTGT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC0CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC0CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC1CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC1CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC2CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC2CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_TGT_VAL_W = @as(c_uint, 24);
pub const LGPT3_TGT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C0CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C0CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C1CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C1CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C2CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C2CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PTGTNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PTGTNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC0CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC0CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC1CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC1CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC2CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC2CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_TGTNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_TGTNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C0CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C0CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C1CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C1CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C2CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C2CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const __HW_LRFDDBELL_H__ = "";
pub const LRFDDBELL_O_DESC = @as(c_uint, 0x00000000);
pub const LRFDDBELL_O_CLKCTL = @as(c_uint, 0x00000004);
pub const LRFDDBELL_O_DMACFG = @as(c_uint, 0x00000008);
pub const LRFDDBELL_O_SYSTIMOEV = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_O_SYSTDMATRIG = @as(c_uint, 0x00000010);
pub const LRFDDBELL_O_GPOSEL0 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_O_GPOSEL1 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_O_IMASK0 = @as(c_uint, 0x00000044);
pub const LRFDDBELL_O_RIS0 = @as(c_uint, 0x00000048);
pub const LRFDDBELL_O_MIS0 = @as(c_uint, 0x0000004C);
pub const LRFDDBELL_O_ISET0 = @as(c_uint, 0x00000050);
pub const LRFDDBELL_O_ICLR0 = @as(c_uint, 0x00000054);
pub const LRFDDBELL_O_IMASK1 = @as(c_uint, 0x00000084);
pub const LRFDDBELL_O_RIS1 = @as(c_uint, 0x00000088);
pub const LRFDDBELL_O_MIS1 = @as(c_uint, 0x0000008C);
pub const LRFDDBELL_O_ISET1 = @as(c_uint, 0x00000090);
pub const LRFDDBELL_O_ICLR1 = @as(c_uint, 0x00000094);
pub const LRFDDBELL_O_IMASK2 = @as(c_uint, 0x000000C4);
pub const LRFDDBELL_O_RIS2 = @as(c_uint, 0x000000C8);
pub const LRFDDBELL_O_MIS2 = @as(c_uint, 0x000000CC);
pub const LRFDDBELL_O_ISET2 = @as(c_uint, 0x000000D0);
pub const LRFDDBELL_O_ICLR2 = @as(c_uint, 0x000000D4);
pub const LRFDDBELL_DESC_MODULEID_W = @as(c_uint, 16);
pub const LRFDDBELL_DESC_MODULEID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDDBELL_DESC_MODULEID_S = @as(c_uint, 16);
pub const LRFDDBELL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const LRFDDBELL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const LRFDDBELL_DESC_STDIPOFF_STDIPMMR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_DESC_STDIPOFF_NO_STDIPMMR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DESC_INSTNUM_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_INSTNUM_M = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_DESC_INSTNUM_S = @as(c_uint, 8);
pub const LRFDDBELL_DESC_MAJREV_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const LRFDDBELL_DESC_MAJREV_S = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MINREV_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_DESC_MINREV_S = @as(c_uint, 0);
pub const LRFDDBELL_CLKCTL_DEM = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_S = @as(c_uint, 13);
pub const LRFDDBELL_CLKCTL_DEM_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MOD = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_S = @as(c_uint, 12);
pub const LRFDDBELL_CLKCTL_MOD_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_S2RRAM = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_S = @as(c_uint, 11);
pub const LRFDDBELL_CLKCTL_S2RRAM_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_BUFRAM = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_S = @as(c_uint, 10);
pub const LRFDDBELL_CLKCTL_BUFRAM_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_DSBRAM = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_S = @as(c_uint, 9);
pub const LRFDDBELL_CLKCTL_DSBRAM_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_RFERAM = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_S = @as(c_uint, 8);
pub const LRFDDBELL_CLKCTL_RFERAM_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MCERAM = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_S = @as(c_uint, 7);
pub const LRFDDBELL_CLKCTL_MCERAM_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_PBERAM = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_S = @as(c_uint, 6);
pub const LRFDDBELL_CLKCTL_PBERAM_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_TRC = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_S = @as(c_uint, 5);
pub const LRFDDBELL_CLKCTL_TRC_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_S2R = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_S = @as(c_uint, 4);
pub const LRFDDBELL_CLKCTL_S2R_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_RFE = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_S = @as(c_uint, 3);
pub const LRFDDBELL_CLKCTL_RFE_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MDM = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_S = @as(c_uint, 2);
pub const LRFDDBELL_CLKCTL_MDM_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_PBE = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_S = @as(c_uint, 1);
pub const LRFDDBELL_CLKCTL_PBE_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_BRIDGE = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_S = @as(c_uint, 0);
pub const LRFDDBELL_CLKCTL_BRIDGE_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DMACFG_TRIGSRC_W = @as(c_uint, 2);
pub const LRFDDBELL_DMACFG_TRIGSRC_M = @as(c_uint, 0x00000006);
pub const LRFDDBELL_DMACFG_TRIGSRC_S = @as(c_uint, 1);
pub const LRFDDBELL_DMACFG_TRIGSRC_FIFO = @as(c_uint, 0x00000006);
pub const LRFDDBELL_DMACFG_TRIGSRC_RFEFW = @as(c_uint, 0x00000004);
pub const LRFDDBELL_DMACFG_TRIGSRC_MCEFW = @as(c_uint, 0x00000002);
pub const LRFDDBELL_DMACFG_TRIGSRC_PBEFW = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DMACFG_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_S = @as(c_uint, 0);
pub const LRFDDBELL_DMACFG_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC2_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC2_M = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_S = @as(c_uint, 8);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM2 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM1 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM0 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW2 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW1 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW0 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM2 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM1 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM0 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_SYSTIMOEV_SRC2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC1_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC1_M = @as(c_uint, 0x000000F0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_S = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM2 = @as(c_uint, 0x000000C0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM1 = @as(c_uint, 0x000000B0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM0 = @as(c_uint, 0x000000A0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW2 = @as(c_uint, 0x00000090);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW1 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW0 = @as(c_uint, 0x00000070);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM2 = @as(c_uint, 0x00000060);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM1 = @as(c_uint, 0x00000050);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM0 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM2 = @as(c_uint, 0x00000030);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM1 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM0 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_SYSTIMOEV_SRC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC0_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC0_M = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_SYSTIMOEV_SRC0_S = @as(c_uint, 0);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM2 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM1 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM0 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW2 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW1 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW0 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM2 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM1 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM0 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTIMOEV_SRC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_DMA = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_S = @as(c_uint, 3);
pub const LRFDDBELL_SYSTDMATRIG_DMA_TRIG = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_S = @as(c_uint, 2);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_TRIG = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_S = @as(c_uint, 1);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_TRIG = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_S = @as(c_uint, 0);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_TRIG = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC3_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_S = @as(c_uint, 24);
pub const LRFDDBELL_GPOSEL0_SRC3_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x19000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x17000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x16000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x15000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x13000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x12000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x11000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0D000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0B000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x09000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC2_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_S = @as(c_uint, 16);
pub const LRFDDBELL_GPOSEL0_SRC2_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00190000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00180000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00170000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00160000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00150000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00140000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00130000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00120000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00110000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC1_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC1_M = @as(c_uint, 0x00001F00);
pub const LRFDDBELL_GPOSEL0_SRC1_S = @as(c_uint, 8);
pub const LRFDDBELL_GPOSEL0_SRC1_RFCTRC = @as(c_uint, 0x00001900);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO7 = @as(c_uint, 0x00001800);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO6 = @as(c_uint, 0x00001700);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO5 = @as(c_uint, 0x00001600);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO4 = @as(c_uint, 0x00001500);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO3 = @as(c_uint, 0x00001400);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO2 = @as(c_uint, 0x00001300);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO1 = @as(c_uint, 0x00001200);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO0 = @as(c_uint, 0x00001100);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO7 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO6 = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO5 = @as(c_uint, 0x00000E00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO4 = @as(c_uint, 0x00000D00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO3 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO2 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO1 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO0 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO7 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO6 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO5 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO4 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO3 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_GPOSEL0_SRC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC0_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC0_M = @as(c_uint, 0x0000001F);
pub const LRFDDBELL_GPOSEL0_SRC0_S = @as(c_uint, 0);
pub const LRFDDBELL_GPOSEL0_SRC0_RFCTRC = @as(c_uint, 0x00000019);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO7 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO6 = @as(c_uint, 0x00000017);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO5 = @as(c_uint, 0x00000016);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO4 = @as(c_uint, 0x00000015);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO3 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO2 = @as(c_uint, 0x00000013);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO1 = @as(c_uint, 0x00000012);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO0 = @as(c_uint, 0x00000011);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO7 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO6 = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO5 = @as(c_uint, 0x0000000E);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO4 = @as(c_uint, 0x0000000D);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO3 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO2 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO1 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO0 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO7 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO6 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO5 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO4 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO3 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_GPOSEL0_SRC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC7_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_S = @as(c_uint, 24);
pub const LRFDDBELL_GPOSEL1_SRC7_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x19000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x17000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x16000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x15000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x13000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x12000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x11000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0D000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0B000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x09000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC6_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_S = @as(c_uint, 16);
pub const LRFDDBELL_GPOSEL1_SRC6_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00190000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00180000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00170000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00160000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00150000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00140000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00130000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00120000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00110000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC5_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC5_M = @as(c_uint, 0x00001F00);
pub const LRFDDBELL_GPOSEL1_SRC5_S = @as(c_uint, 8);
pub const LRFDDBELL_GPOSEL1_SRC5_RFCTRC = @as(c_uint, 0x00001900);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO7 = @as(c_uint, 0x00001800);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO6 = @as(c_uint, 0x00001700);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO5 = @as(c_uint, 0x00001600);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO4 = @as(c_uint, 0x00001500);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO3 = @as(c_uint, 0x00001400);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO2 = @as(c_uint, 0x00001300);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO1 = @as(c_uint, 0x00001200);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO0 = @as(c_uint, 0x00001100);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO7 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO6 = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO5 = @as(c_uint, 0x00000E00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO4 = @as(c_uint, 0x00000D00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO3 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO2 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO1 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO0 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO7 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO6 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO5 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO4 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO3 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_GPOSEL1_SRC5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC4_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC4_M = @as(c_uint, 0x0000001F);
pub const LRFDDBELL_GPOSEL1_SRC4_S = @as(c_uint, 0);
pub const LRFDDBELL_GPOSEL1_SRC4_RFCTRC = @as(c_uint, 0x00000019);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO7 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO6 = @as(c_uint, 0x00000017);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO5 = @as(c_uint, 0x00000016);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO4 = @as(c_uint, 0x00000015);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO3 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO2 = @as(c_uint, 0x00000013);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO1 = @as(c_uint, 0x00000012);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO0 = @as(c_uint, 0x00000011);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO7 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO6 = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO5 = @as(c_uint, 0x0000000E);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO4 = @as(c_uint, 0x0000000D);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO3 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO2 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO1 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO0 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO7 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO6 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO5 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO4 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO3 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_GPOSEL1_SRC4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_IMASK0_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK0_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK0_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK0_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK0_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK0_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK0_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK0_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK0_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK0_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK0_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK0_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK0_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK0_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK0_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK0_RXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK0_PBE15_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK0_PBE14_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK0_PBE13_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK0_PBE12_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK0_PBE11_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK0_PBE10_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK0_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK0_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK0_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK0_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK0_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK0_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK0_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK0_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK0_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR0_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR0_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR0_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR0_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR0_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR0_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR0_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR0_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR0_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR0_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR0_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR0_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR0_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR0_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR0_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR0_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR0_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR0_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR0_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR0_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR0_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR0_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR0_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR0_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR0_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR0_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR0_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR0_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR0_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR0_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR0_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR0_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK1_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK1_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK1_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK1_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK1_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK1_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK1_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK1_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK1_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK1_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK1_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK1_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK1_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK1_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK1_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RXFIFO = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK1_RXFIFO_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE15 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK1_PBE15_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE14 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK1_PBE14_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE13 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK1_PBE13_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE12 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK1_PBE12_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE11 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK1_PBE11_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE10 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_S = @as(c_uint, 9);
pub const LRFDDBELL_IMASK1_PBE10_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK1_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK1_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK1_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK1_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK1_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK1_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK1_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK1_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK1_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR1_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR1_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR1_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR1_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR1_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR1_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR1_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR1_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR1_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR1_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR1_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR1_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR1_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR1_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR1_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR1_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR1_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR1_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR1_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR1_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR1_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR1_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR1_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR1_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR1_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR1_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR1_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR1_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR1_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR1_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR1_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR1_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK2_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK2_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK2_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK2_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK2_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK2_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK2_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK2_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK2_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK2_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK2_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK2_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK2_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK2_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK2_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RXFIFO = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK2_RXFIFO_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE15 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK2_PBE15_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE14 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK2_PBE14_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE13 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK2_PBE13_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE12 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK2_PBE12_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE11 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK2_PBE11_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE10 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_S = @as(c_uint, 9);
pub const LRFDDBELL_IMASK2_PBE10_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK2_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK2_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK2_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK2_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK2_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK2_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK2_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK2_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK2_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR2_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR2_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR2_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR2_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR2_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR2_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR2_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR2_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR2_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR2_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR2_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR2_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR2_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR2_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR2_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR2_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR2_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR2_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR2_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR2_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR2_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR2_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR2_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR2_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR2_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR2_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR2_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR2_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR2_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR2_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR2_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR2_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const __HW_LRFDMDM_H__ = "";
pub const LRFDMDM_O_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDMDM_O_FWSRC = @as(c_uint, 0x00000004);
pub const LRFDMDM_O_INIT = @as(c_uint, 0x00000008);
pub const LRFDMDM_O_DEMENABLE0 = @as(c_uint, 0x00000010);
pub const LRFDMDM_O_DEMENABLE1 = @as(c_uint, 0x00000014);
pub const LRFDMDM_O_DEMINIT0 = @as(c_uint, 0x00000018);
pub const LRFDMDM_O_DEMINIT1 = @as(c_uint, 0x0000001C);
pub const LRFDMDM_O_STRB0 = @as(c_uint, 0x00000020);
pub const LRFDMDM_O_STRB1 = @as(c_uint, 0x00000024);
pub const LRFDMDM_O_EVT0 = @as(c_uint, 0x00000028);
pub const LRFDMDM_O_EVT1 = @as(c_uint, 0x0000002C);
pub const LRFDMDM_O_EVT2 = @as(c_uint, 0x00000030);
pub const LRFDMDM_O_EVTMSK0 = @as(c_uint, 0x00000038);
pub const LRFDMDM_O_EVTMSK1 = @as(c_uint, 0x0000003C);
pub const LRFDMDM_O_EVTMSK2 = @as(c_uint, 0x00000040);
pub const LRFDMDM_O_EVTCLR0 = @as(c_uint, 0x00000048);
pub const LRFDMDM_O_EVTCLR1 = @as(c_uint, 0x0000004C);
pub const LRFDMDM_O_EVTCLR2 = @as(c_uint, 0x00000050);
pub const LRFDMDM_O_PDREQ = @as(c_uint, 0x00000058);
pub const LRFDMDM_O_API = @as(c_uint, 0x0000005C);
pub const LRFDMDM_O_CMDPAR0 = @as(c_uint, 0x00000060);
pub const LRFDMDM_O_CMDPAR1 = @as(c_uint, 0x00000064);
pub const LRFDMDM_O_CMDPAR2 = @as(c_uint, 0x00000068);
pub const LRFDMDM_O_MSGBOX = @as(c_uint, 0x0000006C);
pub const LRFDMDM_O_FREQ = @as(c_uint, 0x00000070);
pub const LRFDMDM_O_FIFOWR = @as(c_uint, 0x00000074);
pub const LRFDMDM_O_FIFORD = @as(c_uint, 0x00000078);
pub const LRFDMDM_O_FIFOWRCTRL = @as(c_uint, 0x00000080);
pub const LRFDMDM_O_FIFORDCTRL = @as(c_uint, 0x00000084);
pub const LRFDMDM_O_FIFOSTA = @as(c_uint, 0x0000008C);
pub const LRFDMDM_O_RFEDATOUT0 = @as(c_uint, 0x00000090);
pub const LRFDMDM_O_RFEDATIN0 = @as(c_uint, 0x00000094);
pub const LRFDMDM_O_RFECMDOUT = @as(c_uint, 0x00000098);
pub const LRFDMDM_O_RFECMDIN = @as(c_uint, 0x0000009C);
pub const LRFDMDM_O_PBEDATOUT0 = @as(c_uint, 0x000000A0);
pub const LRFDMDM_O_PBEDATIN0 = @as(c_uint, 0x000000A4);
pub const LRFDMDM_O_PBECMDOUT = @as(c_uint, 0x000000A8);
pub const LRFDMDM_O_PBECMDIN = @as(c_uint, 0x000000AC);
pub const LRFDMDM_O_LQIEST = @as(c_uint, 0x000000B0);
pub const LRFDMDM_O_PBEEVTMUX = @as(c_uint, 0x000000B4);
pub const LRFDMDM_O_SYSTIMEVTMUX0 = @as(c_uint, 0x000000B8);
pub const LRFDMDM_O_SYSTIMEVTMUX1 = @as(c_uint, 0x000000BC);
pub const LRFDMDM_O_ADCDIGCONF = @as(c_uint, 0x000000C0);
pub const LRFDMDM_O_MODPRECTRL = @as(c_uint, 0x000000C4);
pub const LRFDMDM_O_MODSYMMAP0 = @as(c_uint, 0x000000C8);
pub const LRFDMDM_O_MODSYMMAP1 = @as(c_uint, 0x000000CC);
pub const LRFDMDM_O_MODSOFTTX = @as(c_uint, 0x000000D0);
pub const LRFDMDM_O_BAUD = @as(c_uint, 0x000000D4);
pub const LRFDMDM_O_BAUDPRE = @as(c_uint, 0x000000D8);
pub const LRFDMDM_O_MODMAIN = @as(c_uint, 0x000000DC);
pub const LRFDMDM_O_DEMMISC0 = @as(c_uint, 0x000000E0);
pub const LRFDMDM_O_DEMMISC1 = @as(c_uint, 0x000000E4);
pub const LRFDMDM_O_DEMMISC2 = @as(c_uint, 0x000000E8);
pub const LRFDMDM_O_DEMMISC3 = @as(c_uint, 0x000000EC);
pub const LRFDMDM_O_DEMIQMC0 = @as(c_uint, 0x000000F0);
pub const LRFDMDM_O_DEMDSBU = @as(c_uint, 0x000000F4);
pub const LRFDMDM_O_DEMCODC0 = @as(c_uint, 0x000000F8);
pub const LRFDMDM_O_DEMFIDC0 = @as(c_uint, 0x000000FC);
pub const LRFDMDM_O_DEMFEXB0 = @as(c_uint, 0x00000100);
pub const LRFDMDM_O_DEMDSXB0 = @as(c_uint, 0x00000104);
pub const LRFDMDM_O_DEMFIFE0 = @as(c_uint, 0x00000108);
pub const LRFDMDM_O_DEMMAFI0 = @as(c_uint, 0x0000010C);
pub const LRFDMDM_O_DEMMAFI1 = @as(c_uint, 0x00000110);
pub const LRFDMDM_O_DEMMAFI2 = @as(c_uint, 0x00000114);
pub const LRFDMDM_O_DEMC1BE0 = @as(c_uint, 0x00000118);
pub const LRFDMDM_O_DEMC1BE1 = @as(c_uint, 0x0000011C);
pub const LRFDMDM_O_DEMC1BE2 = @as(c_uint, 0x00000120);
pub const LRFDMDM_O_SPARE0 = @as(c_uint, 0x00000124);
pub const LRFDMDM_O_SPARE1 = @as(c_uint, 0x00000128);
pub const LRFDMDM_O_SPARE2 = @as(c_uint, 0x0000012C);
pub const LRFDMDM_O_SPARE3 = @as(c_uint, 0x00000130);
pub const LRFDMDM_O_DEMSWQU0 = @as(c_uint, 0x00000134);
pub const LRFDMDM_O_DEMC1BEREF0 = @as(c_uint, 0x00000138);
pub const LRFDMDM_O_DEMC1BEREF1 = @as(c_uint, 0x0000013C);
pub const LRFDMDM_O_DEMC1BEREF2 = @as(c_uint, 0x00000140);
pub const LRFDMDM_O_DEMC1BEREF3 = @as(c_uint, 0x00000144);
pub const LRFDMDM_O_MODCTRL = @as(c_uint, 0x00000148);
pub const LRFDMDM_O_MODPREAMBLE = @as(c_uint, 0x0000014C);
pub const LRFDMDM_O_DEMFRAC0 = @as(c_uint, 0x00000150);
pub const LRFDMDM_O_DEMFRAC1 = @as(c_uint, 0x00000154);
pub const LRFDMDM_O_DEMFRAC2 = @as(c_uint, 0x00000158);
pub const LRFDMDM_O_DEMFRAC3 = @as(c_uint, 0x0000015C);
pub const LRFDMDM_O_DEMCODC1 = @as(c_uint, 0x00000160);
pub const LRFDMDM_O_DEMCODC2 = @as(c_uint, 0x00000164);
pub const LRFDMDM_O_DEMFIDC1 = @as(c_uint, 0x00000168);
pub const LRFDMDM_O_DEMFIDC2 = @as(c_uint, 0x0000016C);
pub const LRFDMDM_O_DEMFIFE1 = @as(c_uint, 0x00000170);
pub const LRFDMDM_O_DEMMAFC0 = @as(c_uint, 0x00000174);
pub const LRFDMDM_O_DEMMAFI4 = @as(c_uint, 0x00000178);
pub const LRFDMDM_O_DEMSWIMBAL = @as(c_uint, 0x0000017C);
pub const LRFDMDM_O_DEMSOFTPDIFF = @as(c_uint, 0x00000180);
pub const LRFDMDM_O_DEMDEBUG = @as(c_uint, 0x00000184);
pub const LRFDMDM_O_VITCTRL = @as(c_uint, 0x00000188);
pub const LRFDMDM_O_VITCOMPUTE = @as(c_uint, 0x0000018C);
pub const LRFDMDM_O_VITAPMRDBACK = @as(c_uint, 0x00000190);
pub const LRFDMDM_O_VITSTATE = @as(c_uint, 0x00000194);
pub const LRFDMDM_O_VITBRMETRIC10 = @as(c_uint, 0x00000198);
pub const LRFDMDM_O_VITBRMETRIC32 = @as(c_uint, 0x0000019C);
pub const LRFDMDM_O_VITBRMETRIC54 = @as(c_uint, 0x000001A0);
pub const LRFDMDM_O_VITBRMETRIC76 = @as(c_uint, 0x000001A4);
pub const LRFDMDM_O_TIMCTL = @as(c_uint, 0x000001E4);
pub const LRFDMDM_O_TIMINC = @as(c_uint, 0x000001E8);
pub const LRFDMDM_O_TIMPER = @as(c_uint, 0x000001EC);
pub const LRFDMDM_O_TIMCNT = @as(c_uint, 0x000001F0);
pub const LRFDMDM_O_TIMCAPT = @as(c_uint, 0x000001F4);
pub const LRFDMDM_O_TIMEBASE = @as(c_uint, 0x000001F8);
pub const LRFDMDM_O_COUNT1IN = @as(c_uint, 0x000001FC);
pub const LRFDMDM_O_COUNT1RES = @as(c_uint, 0x00000200);
pub const LRFDMDM_O_BRMACC1 = @as(c_uint, 0x00000208);
pub const LRFDMDM_O_BRMACC2 = @as(c_uint, 0x0000020C);
pub const LRFDMDM_O_MCETRCCTRL = @as(c_uint, 0x00000210);
pub const LRFDMDM_O_MCETRCSTAT = @as(c_uint, 0x00000214);
pub const LRFDMDM_O_MCETRCCMD = @as(c_uint, 0x00000218);
pub const LRFDMDM_O_MCETRCPAR0 = @as(c_uint, 0x0000021C);
pub const LRFDMDM_O_MCETRCPAR1 = @as(c_uint, 0x00000220);
pub const LRFDMDM_O_RDCAPT0 = @as(c_uint, 0x00000224);
pub const LRFDMDM_O_RDCAPT1 = @as(c_uint, 0x00000228);
pub const LRFDMDM_O_FECAPT0 = @as(c_uint, 0x0000022C);
pub const LRFDMDM_O_FECAPT1 = @as(c_uint, 0x00000230);
pub const LRFDMDM_O_DSCAPT0 = @as(c_uint, 0x00000234);
pub const LRFDMDM_O_DSCAPT1 = @as(c_uint, 0x00000238);
pub const LRFDMDM_O_DSCAPT2 = @as(c_uint, 0x0000023C);
pub const LRFDMDM_O_DSCAPT3 = @as(c_uint, 0x00000240);
pub const LRFDMDM_O_DEMSWQU1 = @as(c_uint, 0x00000244);
pub const LRFDMDM_O_GPOCTRL0 = @as(c_uint, 0x00000248);
pub const LRFDMDM_O_GPOCTRL1 = @as(c_uint, 0x0000024C);
pub const LRFDMDM_O_RFERSSI = @as(c_uint, 0x00000250);
pub const LRFDMDM_O_RFEMAXRSSI = @as(c_uint, 0x00000254);
pub const LRFDMDM_O_RFEDBGAIN = @as(c_uint, 0x00000258);
pub const LRFDMDM_O_SYNC0 = @as(c_uint, 0x0000025C);
pub const LRFDMDM_O_SYNC1 = @as(c_uint, 0x00000260);
pub const LRFDMDM_O_SYNC2 = @as(c_uint, 0x00000264);
pub const LRFDMDM_O_SYNC3 = @as(c_uint, 0x00000268);
pub const LRFDMDM_ENABLE_ADCDIG = @as(c_uint, 0x00000020);
pub const LRFDMDM_ENABLE_ADCDIG_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_ENABLE_ADCDIG_S = @as(c_uint, 5);
pub const LRFDMDM_ENABLE_ADCDIG_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_ENABLE_ADCDIG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ENABLE_DEMODULATOR = @as(c_uint, 0x00000010);
pub const LRFDMDM_ENABLE_DEMODULATOR_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_ENABLE_DEMODULATOR_S = @as(c_uint, 4);
pub const LRFDMDM_ENABLE_DEMODULATOR_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_ENABLE_DEMODULATOR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ENABLE_MODULATOR = @as(c_uint, 0x00000008);
pub const LRFDMDM_ENABLE_MODULATOR_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_ENABLE_MODULATOR_S = @as(c_uint, 3);
pub const LRFDMDM_ENABLE_MODULATOR_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_ENABLE_MODULATOR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ENABLE_TIMEBASE = @as(c_uint, 0x00000004);
pub const LRFDMDM_ENABLE_TIMEBASE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_ENABLE_TIMEBASE_S = @as(c_uint, 2);
pub const LRFDMDM_ENABLE_TIMEBASE_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_ENABLE_TIMEBASE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ENABLE_TXRXFIFO = @as(c_uint, 0x00000002);
pub const LRFDMDM_ENABLE_TXRXFIFO_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_ENABLE_TXRXFIFO_S = @as(c_uint, 1);
pub const LRFDMDM_ENABLE_TXRXFIFO_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_ENABLE_TXRXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDMDM_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDMDM_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FWSRC_DATARAM = @as(c_uint, 0x00000004);
pub const LRFDMDM_FWSRC_DATARAM_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_FWSRC_DATARAM_S = @as(c_uint, 2);
pub const LRFDMDM_FWSRC_DATARAM_S2RRAM = @as(c_uint, 0x00000004);
pub const LRFDMDM_FWSRC_DATARAM_MDMRAM = @as(c_uint, 0x00000000);
pub const LRFDMDM_FWSRC_FWRAM = @as(c_uint, 0x00000002);
pub const LRFDMDM_FWSRC_FWRAM_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_FWSRC_FWRAM_S = @as(c_uint, 1);
pub const LRFDMDM_FWSRC_FWRAM_S2RRAM = @as(c_uint, 0x00000002);
pub const LRFDMDM_FWSRC_FWRAM_MDMRAM = @as(c_uint, 0x00000000);
pub const LRFDMDM_FWSRC_BANK = @as(c_uint, 0x00000001);
pub const LRFDMDM_FWSRC_BANK_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_FWSRC_BANK_S = @as(c_uint, 0);
pub const LRFDMDM_FWSRC_BANK_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_FWSRC_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_ADCDIG = @as(c_uint, 0x00000020);
pub const LRFDMDM_INIT_ADCDIG_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_INIT_ADCDIG_S = @as(c_uint, 5);
pub const LRFDMDM_INIT_ADCDIG_RESET = @as(c_uint, 0x00000020);
pub const LRFDMDM_INIT_ADCDIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_DEMODULATOR = @as(c_uint, 0x00000010);
pub const LRFDMDM_INIT_DEMODULATOR_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_INIT_DEMODULATOR_S = @as(c_uint, 4);
pub const LRFDMDM_INIT_DEMODULATOR_RESET = @as(c_uint, 0x00000010);
pub const LRFDMDM_INIT_DEMODULATOR_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_MODULATOR = @as(c_uint, 0x00000008);
pub const LRFDMDM_INIT_MODULATOR_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_INIT_MODULATOR_S = @as(c_uint, 3);
pub const LRFDMDM_INIT_MODULATOR_RESET = @as(c_uint, 0x00000008);
pub const LRFDMDM_INIT_MODULATOR_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_TIMEBASE = @as(c_uint, 0x00000004);
pub const LRFDMDM_INIT_TIMEBASE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_INIT_TIMEBASE_S = @as(c_uint, 2);
pub const LRFDMDM_INIT_TIMEBASE_RESET = @as(c_uint, 0x00000004);
pub const LRFDMDM_INIT_TIMEBASE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_TXRXFIFO = @as(c_uint, 0x00000002);
pub const LRFDMDM_INIT_TXRXFIFO_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_INIT_TXRXFIFO_S = @as(c_uint, 1);
pub const LRFDMDM_INIT_TXRXFIFO_RESET = @as(c_uint, 0x00000002);
pub const LRFDMDM_INIT_TXRXFIFO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDMDM_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDMDM_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDMDM_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_FRAC = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE0_FRAC_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE0_FRAC_S = @as(c_uint, 8);
pub const LRFDMDM_DEMENABLE0_FRAC_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE0_FRAC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_FIDC = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE0_FIDC_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE0_FIDC_S = @as(c_uint, 7);
pub const LRFDMDM_DEMENABLE0_FIDC_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE0_FIDC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_CHFI = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE0_CHFI_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE0_CHFI_S = @as(c_uint, 6);
pub const LRFDMDM_DEMENABLE0_CHFI_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE0_CHFI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_BDEC = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE0_BDEC_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE0_BDEC_S = @as(c_uint, 5);
pub const LRFDMDM_DEMENABLE0_BDEC_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE0_BDEC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_IQMC = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE0_IQMC_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE0_IQMC_S = @as(c_uint, 4);
pub const LRFDMDM_DEMENABLE0_IQMC_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE0_IQMC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_MGE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE0_MGE1_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE0_MGE1_S = @as(c_uint, 3);
pub const LRFDMDM_DEMENABLE0_MGE1_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE0_MGE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_MGE0 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE0_MGE0_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE0_MGE0_S = @as(c_uint, 2);
pub const LRFDMDM_DEMENABLE0_MGE0_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE0_MGE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_CODC = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE0_CODC_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE0_CODC_S = @as(c_uint, 1);
pub const LRFDMDM_DEMENABLE0_CODC_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE0_CODC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE0_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE0_CMIX_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE0_CMIX_S = @as(c_uint, 0);
pub const LRFDMDM_DEMENABLE0_CMIX_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE0_CMIX_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_VITE = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMENABLE1_VITE_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMENABLE1_VITE_S = @as(c_uint, 13);
pub const LRFDMDM_DEMENABLE1_VITE_EN = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMENABLE1_VITE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_MLSE = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMENABLE1_MLSE_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMENABLE1_MLSE_S = @as(c_uint, 12);
pub const LRFDMDM_DEMENABLE1_MLSE_EN = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMENABLE1_MLSE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_SOFD = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMENABLE1_SOFD_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMENABLE1_SOFD_S = @as(c_uint, 11);
pub const LRFDMDM_DEMENABLE1_SOFD_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMENABLE1_SOFD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_SWQU = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMENABLE1_SWQU_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMENABLE1_SWQU_S = @as(c_uint, 10);
pub const LRFDMDM_DEMENABLE1_SWQU_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMENABLE1_SWQU_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_MAFC = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMENABLE1_MAFC_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMENABLE1_MAFC_S = @as(c_uint, 9);
pub const LRFDMDM_DEMENABLE1_MAFC_EN = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMENABLE1_MAFC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_MAFI = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE1_MAFI_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE1_MAFI_S = @as(c_uint, 8);
pub const LRFDMDM_DEMENABLE1_MAFI_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMENABLE1_MAFI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_FIFE = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE1_FIFE_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE1_FIFE_S = @as(c_uint, 7);
pub const LRFDMDM_DEMENABLE1_FIFE_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMENABLE1_FIFE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_PDIF = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE1_PDIF_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE1_PDIF_S = @as(c_uint, 6);
pub const LRFDMDM_DEMENABLE1_PDIF_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMENABLE1_PDIF_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_CA2P = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE1_CA2P_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE1_CA2P_S = @as(c_uint, 5);
pub const LRFDMDM_DEMENABLE1_CA2P_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMENABLE1_CA2P_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_C1BE = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE1_C1BE_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE1_C1BE_S = @as(c_uint, 4);
pub const LRFDMDM_DEMENABLE1_C1BE_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMENABLE1_C1BE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_LQIE = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE1_LQIE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE1_LQIE_S = @as(c_uint, 3);
pub const LRFDMDM_DEMENABLE1_LQIE_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMENABLE1_LQIE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_F4BA = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE1_F4BA_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE1_F4BA_S = @as(c_uint, 2);
pub const LRFDMDM_DEMENABLE1_F4BA_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMENABLE1_F4BA_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_STIM = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE1_STIM_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE1_STIM_S = @as(c_uint, 1);
pub const LRFDMDM_DEMENABLE1_STIM_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMENABLE1_STIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMENABLE1_DSBU = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE1_DSBU_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE1_DSBU_S = @as(c_uint, 0);
pub const LRFDMDM_DEMENABLE1_DSBU_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMENABLE1_DSBU_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_FRAC = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT0_FRAC_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT0_FRAC_S = @as(c_uint, 8);
pub const LRFDMDM_DEMINIT0_FRAC_RESET = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT0_FRAC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_FIDC = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT0_FIDC_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT0_FIDC_S = @as(c_uint, 7);
pub const LRFDMDM_DEMINIT0_FIDC_RESET = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT0_FIDC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_CHFI = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT0_CHFI_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT0_CHFI_S = @as(c_uint, 6);
pub const LRFDMDM_DEMINIT0_CHFI_RESET = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT0_CHFI_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_BDEC = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT0_BDEC_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT0_BDEC_S = @as(c_uint, 5);
pub const LRFDMDM_DEMINIT0_BDEC_RESET = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT0_BDEC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_IQMC = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT0_IQMC_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT0_IQMC_S = @as(c_uint, 4);
pub const LRFDMDM_DEMINIT0_IQMC_RESET = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT0_IQMC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_MGE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT0_MGE1_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT0_MGE1_S = @as(c_uint, 3);
pub const LRFDMDM_DEMINIT0_MGE1_RESET = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT0_MGE1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_MGE0 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT0_MGE0_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT0_MGE0_S = @as(c_uint, 2);
pub const LRFDMDM_DEMINIT0_MGE0_RESET = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT0_MGE0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_CODC = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT0_CODC_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT0_CODC_S = @as(c_uint, 1);
pub const LRFDMDM_DEMINIT0_CODC_RESET = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT0_CODC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT0_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT0_CMIX_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT0_CMIX_S = @as(c_uint, 0);
pub const LRFDMDM_DEMINIT0_CMIX_RESET = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT0_CMIX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_VITE = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMINIT1_VITE_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMINIT1_VITE_S = @as(c_uint, 13);
pub const LRFDMDM_DEMINIT1_VITE_RESET = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMINIT1_VITE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_MLSE = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMINIT1_MLSE_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMINIT1_MLSE_S = @as(c_uint, 12);
pub const LRFDMDM_DEMINIT1_MLSE_RESET = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMINIT1_MLSE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_SOFD = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMINIT1_SOFD_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMINIT1_SOFD_S = @as(c_uint, 11);
pub const LRFDMDM_DEMINIT1_SOFD_RESET = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMINIT1_SOFD_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_SWQU = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMINIT1_SWQU_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMINIT1_SWQU_S = @as(c_uint, 10);
pub const LRFDMDM_DEMINIT1_SWQU_RESET = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMINIT1_SWQU_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_MAFC = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMINIT1_MAFC_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMINIT1_MAFC_S = @as(c_uint, 9);
pub const LRFDMDM_DEMINIT1_MAFC_RESET = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMINIT1_MAFC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_MAFI = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT1_MAFI_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT1_MAFI_S = @as(c_uint, 8);
pub const LRFDMDM_DEMINIT1_MAFI_RESET = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMINIT1_MAFI_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_FIFE = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT1_FIFE_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT1_FIFE_S = @as(c_uint, 7);
pub const LRFDMDM_DEMINIT1_FIFE_RESET = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMINIT1_FIFE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_PDIF = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT1_PDIF_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT1_PDIF_S = @as(c_uint, 6);
pub const LRFDMDM_DEMINIT1_PDIF_RESET = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMINIT1_PDIF_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_CA2P = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT1_CA2P_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT1_CA2P_S = @as(c_uint, 5);
pub const LRFDMDM_DEMINIT1_CA2P_RESET = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMINIT1_CA2P_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_C1BE = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT1_C1BE_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT1_C1BE_S = @as(c_uint, 4);
pub const LRFDMDM_DEMINIT1_C1BE_RESET = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMINIT1_C1BE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_LQIE = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT1_LQIE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT1_LQIE_S = @as(c_uint, 3);
pub const LRFDMDM_DEMINIT1_LQIE_RESET = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMINIT1_LQIE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_F4BA = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT1_F4BA_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT1_F4BA_S = @as(c_uint, 2);
pub const LRFDMDM_DEMINIT1_F4BA_RESET = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMINIT1_F4BA_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_STIM = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT1_STIM_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT1_STIM_S = @as(c_uint, 1);
pub const LRFDMDM_DEMINIT1_STIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMINIT1_STIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMINIT1_DSBU = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT1_DSBU_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT1_DSBU_S = @as(c_uint, 0);
pub const LRFDMDM_DEMINIT1_DSBU_RESET = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMINIT1_DSBU_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_TIMBADVANCE = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB0_TIMBADVANCE_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB0_TIMBADVANCE_S = @as(c_uint, 11);
pub const LRFDMDM_STRB0_TIMBADVANCE_ON = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB0_TIMBADVANCE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_TIMBSTALL = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB0_TIMBSTALL_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB0_TIMBSTALL_S = @as(c_uint, 10);
pub const LRFDMDM_STRB0_TIMBSTALL_ON = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB0_TIMBSTALL_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT5 = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB0_EVT5_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB0_EVT5_S = @as(c_uint, 9);
pub const LRFDMDM_STRB0_EVT5_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB0_EVT5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT4 = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB0_EVT4_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB0_EVT4_S = @as(c_uint, 8);
pub const LRFDMDM_STRB0_EVT4_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB0_EVT4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_MLSETERM = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB0_MLSETERM_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB0_MLSETERM_S = @as(c_uint, 7);
pub const LRFDMDM_STRB0_MLSETERM_ON = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB0_MLSETERM_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT3 = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB0_EVT3_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB0_EVT3_S = @as(c_uint, 6);
pub const LRFDMDM_STRB0_EVT3_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB0_EVT3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT2 = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB0_EVT2_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB0_EVT2_S = @as(c_uint, 5);
pub const LRFDMDM_STRB0_EVT2_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB0_EVT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT1 = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB0_EVT1_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB0_EVT1_S = @as(c_uint, 4);
pub const LRFDMDM_STRB0_EVT1_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB0_EVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_EVT0 = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB0_EVT0_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB0_EVT0_S = @as(c_uint, 3);
pub const LRFDMDM_STRB0_EVT0_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB0_EVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_TIMBALIGN = @as(c_uint, 0x00000004);
pub const LRFDMDM_STRB0_TIMBALIGN_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_STRB0_TIMBALIGN_S = @as(c_uint, 2);
pub const LRFDMDM_STRB0_TIMBALIGN_ON = @as(c_uint, 0x00000004);
pub const LRFDMDM_STRB0_TIMBALIGN_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_DSBURST = @as(c_uint, 0x00000002);
pub const LRFDMDM_STRB0_DSBURST_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_STRB0_DSBURST_S = @as(c_uint, 1);
pub const LRFDMDM_STRB0_DSBURST_RESTART = @as(c_uint, 0x00000002);
pub const LRFDMDM_STRB0_DSBURST_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB0_CMDDONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB0_CMDDONE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB0_CMDDONE_S = @as(c_uint, 0);
pub const LRFDMDM_STRB0_CMDDONE_YES = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB0_CMDDONE_NO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_S2RTRG = @as(c_uint, 0x00002000);
pub const LRFDMDM_STRB1_S2RTRG_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_STRB1_S2RTRG_S = @as(c_uint, 13);
pub const LRFDMDM_STRB1_S2RTRG_ONE = @as(c_uint, 0x00002000);
pub const LRFDMDM_STRB1_S2RTRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_DMATRG = @as(c_uint, 0x00001000);
pub const LRFDMDM_STRB1_DMATRG_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_STRB1_DMATRG_S = @as(c_uint, 12);
pub const LRFDMDM_STRB1_DMATRG_ONE = @as(c_uint, 0x00001000);
pub const LRFDMDM_STRB1_DMATRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_SYSTCAPT2 = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB1_SYSTCAPT2_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB1_SYSTCAPT2_S = @as(c_uint, 11);
pub const LRFDMDM_STRB1_SYSTCAPT2_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_STRB1_SYSTCAPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_SYSTCAPT1 = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB1_SYSTCAPT1_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB1_SYSTCAPT1_S = @as(c_uint, 10);
pub const LRFDMDM_STRB1_SYSTCAPT1_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM_STRB1_SYSTCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_SYSTCAPT0 = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB1_SYSTCAPT0_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB1_SYSTCAPT0_S = @as(c_uint, 9);
pub const LRFDMDM_STRB1_SYSTCAPT0_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM_STRB1_SYSTCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEPEAKAB = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB1_C1BEPEAKAB_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB1_C1BEPEAKAB_S = @as(c_uint, 8);
pub const LRFDMDM_STRB1_C1BEPEAKAB_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_STRB1_C1BEPEAKAB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEPEAKC = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB1_C1BEPEAKC_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB1_C1BEPEAKC_S = @as(c_uint, 7);
pub const LRFDMDM_STRB1_C1BEPEAKC_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_STRB1_C1BEPEAKC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEPEAKB = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB1_C1BEPEAKB_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB1_C1BEPEAKB_S = @as(c_uint, 6);
pub const LRFDMDM_STRB1_C1BEPEAKB_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_STRB1_C1BEPEAKB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEPEAKA = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB1_C1BEPEAKA_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB1_C1BEPEAKA_S = @as(c_uint, 5);
pub const LRFDMDM_STRB1_C1BEPEAKA_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_STRB1_C1BEPEAKA_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEADVANCE = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB1_C1BEADVANCE_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB1_C1BEADVANCE_S = @as(c_uint, 4);
pub const LRFDMDM_STRB1_C1BEADVANCE_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_STRB1_C1BEADVANCE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BESTALL = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB1_C1BESTALL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB1_C1BESTALL_S = @as(c_uint, 3);
pub const LRFDMDM_STRB1_C1BESTALL_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_STRB1_C1BESTALL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BEROT_W = @as(c_uint, 2);
pub const LRFDMDM_STRB1_C1BEROT_M = @as(c_uint, 0x00000006);
pub const LRFDMDM_STRB1_C1BEROT_S = @as(c_uint, 1);
pub const LRFDMDM_STRB1_C1BEROT_ROT16R = @as(c_uint, 0x00000006);
pub const LRFDMDM_STRB1_C1BEROT_ROT1L = @as(c_uint, 0x00000004);
pub const LRFDMDM_STRB1_C1BEROT_ROT1R = @as(c_uint, 0x00000002);
pub const LRFDMDM_STRB1_C1BEROT_ROT0 = @as(c_uint, 0x00000000);
pub const LRFDMDM_STRB1_C1BECOPY = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB1_C1BECOPY_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB1_C1BECOPY_S = @as(c_uint, 0);
pub const LRFDMDM_STRB1_C1BECOPY_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_STRB1_C1BECOPY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM_EVT0_PBEDAT_ONE = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT0_PBEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM_EVT0_PBECMD_ONE = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVT0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVT0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM_EVT0_RFEDAT_ONE = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVT0_RFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM_EVT0_BDEC_ONE = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT0_BDEC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM_EVT0_FRAC_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT0_FRAC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM_EVT0_SYSTIMEVT2_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT0_SYSTIMEVT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM_EVT0_SYSTIMEVT1_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT0_SYSTIMEVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM_EVT0_SYSTIMEVT0_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT0_SYSTIMEVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM_EVT0_FIFOWR_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT0_FIFOWR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM_EVT0_COUNTER_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM_EVT0_RFECMD_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT0_RFECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM_EVT0_FIFOOVFL_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT0_FIFOOVFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM_EVT0_FIFOUNFL_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT0_FIFOUNFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM_EVT0_CLKEN4BAUD_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT0_CLKEN4BAUD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM_EVT0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM_EVT0_MDMAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT0_MDMAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_REFCLK = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT1_REFCLK_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT1_REFCLK_S = @as(c_uint, 8);
pub const LRFDMDM_EVT1_REFCLK_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT1_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_S2RSTOP = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT1_S2RSTOP_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT1_S2RSTOP_S = @as(c_uint, 7);
pub const LRFDMDM_EVT1_S2RSTOP_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT1_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_SWQUFALSESYNC = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT1_SWQUFALSESYNC_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT1_SWQUFALSESYNC_S = @as(c_uint, 6);
pub const LRFDMDM_EVT1_SWQUFALSESYNC_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT1_SWQUFALSESYNC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_SWQUSYNCED = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT1_SWQUSYNCED_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT1_SWQUSYNCED_S = @as(c_uint, 5);
pub const LRFDMDM_EVT1_SWQUSYNCED_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT1_SWQUSYNCED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_CLKENBAUDF = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT1_CLKENBAUDF_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT1_CLKENBAUDF_S = @as(c_uint, 4);
pub const LRFDMDM_EVT1_CLKENBAUDF_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT1_CLKENBAUDF_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_FIFORVALID = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT1_FIFORVALID_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT1_FIFORVALID_S = @as(c_uint, 3);
pub const LRFDMDM_EVT1_FIFORVALID_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT1_FIFORVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_FIFOWREADY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT1_FIFOWREADY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT1_FIFOWREADY_S = @as(c_uint, 2);
pub const LRFDMDM_EVT1_FIFOWREADY_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT1_FIFOWREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_CLKENBAUD = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT1_CLKENBAUD_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT1_CLKENBAUD_S = @as(c_uint, 1);
pub const LRFDMDM_EVT1_CLKENBAUD_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT1_CLKENBAUD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT1_PREAMBLEDONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT1_PREAMBLEDONE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT1_PREAMBLEDONE_S = @as(c_uint, 0);
pub const LRFDMDM_EVT1_PREAMBLEDONE_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT1_PREAMBLEDONE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM_EVT2_GPI1_ONE = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVT2_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM_EVT2_GPI0_ONE = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVT2_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM_EVT2_C1BEBLOADED_ONE = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVT2_C1BEBLOADED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM_EVT2_C1BECMBANY_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVT2_C1BECMBANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM_EVT2_C1BECMBNEG_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVT2_C1BECMBNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM_EVT2_C1BECMBPOS_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVT2_C1BECMBPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM_EVT2_C1BECANY_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVT2_C1BECANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM_EVT2_C1BECNEG_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVT2_C1BECNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM_EVT2_C1BECPOS_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVT2_C1BECPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM_EVT2_C1BEBANY_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVT2_C1BEBANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM_EVT2_C1BEBNEG_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVT2_C1BEBNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM_EVT2_C1BEBPOS_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVT2_C1BEBPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM_EVT2_C1BEAANY_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVT2_C1BEAANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM_EVT2_C1BEANEG_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVT2_C1BEANEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVT2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM_EVT2_C1BEAPOS_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVT2_C1BEAPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM_EVTMSK0_PBEDAT_EN = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK0_PBEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM_EVTMSK0_PBECMD_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK0_PBECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTMSK0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTMSK0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM_EVTMSK0_RFEDAT_EN = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTMSK0_RFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM_EVTMSK0_BDEC_EN = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK0_BDEC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM_EVTMSK0_FRAC_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK0_FRAC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT2_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT1_EN = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT0_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK0_SYSTIMEVT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM_EVTMSK0_FIFOWR_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK0_FIFOWR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM_EVTMSK0_COUNTER_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK0_COUNTER_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM_EVTMSK0_RFECMD_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK0_RFECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM_EVTMSK0_FIFOOVFL_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK0_FIFOOVFL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM_EVTMSK0_FIFOUNFL_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK0_FIFOUNFL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM_EVTMSK0_CLKEN4BAUD_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK0_CLKEN4BAUD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM_EVTMSK0_TIMER_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK0_TIMER_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM_EVTMSK0_MDMAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK0_MDMAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_REFCLK = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK1_REFCLK_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK1_REFCLK_S = @as(c_uint, 8);
pub const LRFDMDM_EVTMSK1_REFCLK_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK1_REFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_S2RSTOP = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK1_S2RSTOP_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK1_S2RSTOP_S = @as(c_uint, 7);
pub const LRFDMDM_EVTMSK1_S2RSTOP_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK1_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_SWQUFALSESYNC = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK1_SWQUFALSESYNC_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK1_SWQUFALSESYNC_S = @as(c_uint, 6);
pub const LRFDMDM_EVTMSK1_SWQUFALSESYNC_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK1_SWQUFALSESYNC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_SWQUSYNCED = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK1_SWQUSYNCED_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK1_SWQUSYNCED_S = @as(c_uint, 5);
pub const LRFDMDM_EVTMSK1_SWQUSYNCED_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK1_SWQUSYNCED_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_CLKENBAUDF = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK1_CLKENBAUDF_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK1_CLKENBAUDF_S = @as(c_uint, 4);
pub const LRFDMDM_EVTMSK1_CLKENBAUDF_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK1_CLKENBAUDF_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_FIFORVALID = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK1_FIFORVALID_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK1_FIFORVALID_S = @as(c_uint, 3);
pub const LRFDMDM_EVTMSK1_FIFORVALID_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK1_FIFORVALID_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_FIFOWREADY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK1_FIFOWREADY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK1_FIFOWREADY_S = @as(c_uint, 2);
pub const LRFDMDM_EVTMSK1_FIFOWREADY_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK1_FIFOWREADY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_CLKENBAUD = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK1_CLKENBAUD_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK1_CLKENBAUD_S = @as(c_uint, 1);
pub const LRFDMDM_EVTMSK1_CLKENBAUD_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK1_CLKENBAUD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK1_PREAMBLEDONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK1_PREAMBLEDONE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK1_PREAMBLEDONE_S = @as(c_uint, 0);
pub const LRFDMDM_EVTMSK1_PREAMBLEDONE_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK1_PREAMBLEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM_EVTMSK2_GPI1_EN = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTMSK2_GPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM_EVTMSK2_GPI0_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTMSK2_GPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM_EVTMSK2_C1BEBLOADED_EN = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTMSK2_C1BEBLOADED_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM_EVTMSK2_C1BECMBANY_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTMSK2_C1BECMBANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM_EVTMSK2_C1BECMBNEG_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTMSK2_C1BECMBNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM_EVTMSK2_C1BECMBPOS_EN = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTMSK2_C1BECMBPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM_EVTMSK2_C1BECANY_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTMSK2_C1BECANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM_EVTMSK2_C1BECNEG_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTMSK2_C1BECNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM_EVTMSK2_C1BECPOS_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTMSK2_C1BECPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM_EVTMSK2_C1BEBANY_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTMSK2_C1BEBANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM_EVTMSK2_C1BEBNEG_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTMSK2_C1BEBNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM_EVTMSK2_C1BEBPOS_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTMSK2_C1BEBPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM_EVTMSK2_C1BEAANY_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTMSK2_C1BEAANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM_EVTMSK2_C1BEANEG_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTMSK2_C1BEANEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTMSK2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM_EVTMSK2_C1BEAPOS_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTMSK2_C1BEAPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM_EVTCLR0_PBEDAT_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR0_PBEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM_EVTCLR0_PBECMD_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR0_PBECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTCLR0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTCLR0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM_EVTCLR0_RFEDAT_CLEAR = @as(c_uint, 0x00002000);
pub const LRFDMDM_EVTCLR0_RFEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM_EVTCLR0_BDEC_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR0_BDEC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM_EVTCLR0_FRAC_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR0_FRAC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT2_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT1_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT0_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR0_SYSTIMEVT0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM_EVTCLR0_FIFOWR_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR0_FIFOWR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM_EVTCLR0_COUNTER_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR0_COUNTER_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM_EVTCLR0_RFECMD_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR0_RFECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM_EVTCLR0_FIFOOVFL_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR0_FIFOOVFL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM_EVTCLR0_FIFOUNFL_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR0_FIFOUNFL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM_EVTCLR0_CLKEN4BAUD_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR0_CLKEN4BAUD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM_EVTCLR0_TIMER_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR0_TIMER_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM_EVTCLR0_MDMAPI_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR0_MDMAPI_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_REFCLK = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR1_REFCLK_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR1_REFCLK_S = @as(c_uint, 8);
pub const LRFDMDM_EVTCLR1_REFCLK_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR1_REFCLK_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_S2RSTOP = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR1_S2RSTOP_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR1_S2RSTOP_S = @as(c_uint, 7);
pub const LRFDMDM_EVTCLR1_S2RSTOP_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR1_S2RSTOP_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_SWQUFALSESYNC = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR1_SWQUFALSESYNC_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR1_SWQUFALSESYNC_S = @as(c_uint, 6);
pub const LRFDMDM_EVTCLR1_SWQUFALSESYNC_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR1_SWQUFALSESYNC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_SWQUSYNCED = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR1_SWQUSYNCED_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR1_SWQUSYNCED_S = @as(c_uint, 5);
pub const LRFDMDM_EVTCLR1_SWQUSYNCED_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR1_SWQUSYNCED_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_CLKENBAUDF = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR1_CLKENBAUDF_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR1_CLKENBAUDF_S = @as(c_uint, 4);
pub const LRFDMDM_EVTCLR1_CLKENBAUDF_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR1_CLKENBAUDF_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_FIFORVALID = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR1_FIFORVALID_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR1_FIFORVALID_S = @as(c_uint, 3);
pub const LRFDMDM_EVTCLR1_FIFORVALID_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR1_FIFORVALID_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_FIFOWREADY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR1_FIFOWREADY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR1_FIFOWREADY_S = @as(c_uint, 2);
pub const LRFDMDM_EVTCLR1_FIFOWREADY_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR1_FIFOWREADY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_CLKENBAUD = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR1_CLKENBAUD_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR1_CLKENBAUD_S = @as(c_uint, 1);
pub const LRFDMDM_EVTCLR1_CLKENBAUD_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR1_CLKENBAUD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR1_PREAMBLEDONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR1_PREAMBLEDONE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR1_PREAMBLEDONE_S = @as(c_uint, 0);
pub const LRFDMDM_EVTCLR1_PREAMBLEDONE_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR1_PREAMBLEDONE_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM_EVTCLR2_GPI1_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDMDM_EVTCLR2_GPI1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM_EVTCLR2_GPI0_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDMDM_EVTCLR2_GPI0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM_EVTCLR2_C1BEBLOADED_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDMDM_EVTCLR2_C1BEBLOADED_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM_EVTCLR2_C1BECMBANY_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDMDM_EVTCLR2_C1BECMBANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM_EVTCLR2_C1BECMBNEG_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDMDM_EVTCLR2_C1BECMBNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM_EVTCLR2_C1BECMBPOS_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDMDM_EVTCLR2_C1BECMBPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM_EVTCLR2_C1BECANY_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDMDM_EVTCLR2_C1BECANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM_EVTCLR2_C1BECNEG_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDMDM_EVTCLR2_C1BECNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM_EVTCLR2_C1BECPOS_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDMDM_EVTCLR2_C1BECPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM_EVTCLR2_C1BEBANY_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDMDM_EVTCLR2_C1BEBANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM_EVTCLR2_C1BEBNEG_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDMDM_EVTCLR2_C1BEBNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM_EVTCLR2_C1BEBPOS_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDMDM_EVTCLR2_C1BEBPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM_EVTCLR2_C1BEAANY_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDMDM_EVTCLR2_C1BEAANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM_EVTCLR2_C1BEANEG_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDMDM_EVTCLR2_C1BEANEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_EVTCLR2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM_EVTCLR2_C1BEAPOS_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDMDM_EVTCLR2_C1BEAPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDMDM_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDMDM_PDREQ_TOPSMPDREQ_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM_PDREQ_TOPSMPDREQ_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_API_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDMDM_API_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDMDM_API_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDMDM_API_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDMDM_API_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_API_MDMCMD_W = @as(c_uint, 4);
pub const LRFDMDM_API_MDMCMD_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_API_MDMCMD_S = @as(c_uint, 0);
pub const LRFDMDM_API_MDMCMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_API_MDMCMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_CMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_CMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_CMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_CMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_CMDPAR2_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_CMDPAR2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR2_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_CMDPAR2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_CMDPAR2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_MSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_MSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_MSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_MSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FREQ_OFFSET_W = @as(c_uint, 16);
pub const LRFDMDM_FREQ_OFFSET_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FREQ_OFFSET_S = @as(c_uint, 0);
pub const LRFDMDM_FREQ_OFFSET_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FREQ_OFFSET_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOWR_PAYLOADIN_W = @as(c_uint, 16);
pub const LRFDMDM_FIFOWR_PAYLOADIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FIFOWR_PAYLOADIN_S = @as(c_uint, 0);
pub const LRFDMDM_FIFOWR_PAYLOADIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FIFOWR_PAYLOADIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFORD_PAYLOADOUT_W = @as(c_uint, 16);
pub const LRFDMDM_FIFORD_PAYLOADOUT_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FIFORD_PAYLOADOUT_S = @as(c_uint, 0);
pub const LRFDMDM_FIFORD_PAYLOADOUT_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_FIFORD_PAYLOADOUT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_W = @as(c_uint, 2);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_S = @as(c_uint, 4);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_PBE = @as(c_uint, 0x00000020);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_MODEM = @as(c_uint, 0x00000010);
pub const LRFDMDM_FIFOWRCTRL_FIFOWRPORT_MDMFIFOWR = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_W = @as(c_uint, 4);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_S = @as(c_uint, 0);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDMDM_FIFOWRCTRL_WORDSZWR_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_W = @as(c_uint, 2);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_S = @as(c_uint, 4);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_PBE = @as(c_uint, 0x00000020);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_MODEM = @as(c_uint, 0x00000010);
pub const LRFDMDM_FIFORDCTRL_FIFORDPORT_MDMFIFORD = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_W = @as(c_uint, 4);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_S = @as(c_uint, 0);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDMDM_FIFORDCTRL_WORDSZRD_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_OVERFLOW = @as(c_uint, 0x00000020);
pub const LRFDMDM_FIFOSTA_OVERFLOW_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_FIFOSTA_OVERFLOW_S = @as(c_uint, 5);
pub const LRFDMDM_FIFOSTA_OVERFLOW_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_FIFOSTA_OVERFLOW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_ALMOSTFULL = @as(c_uint, 0x00000010);
pub const LRFDMDM_FIFOSTA_ALMOSTFULL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_FIFOSTA_ALMOSTFULL_S = @as(c_uint, 4);
pub const LRFDMDM_FIFOSTA_ALMOSTFULL_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_FIFOSTA_ALMOSTFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_ALMOSTEMPTY = @as(c_uint, 0x00000008);
pub const LRFDMDM_FIFOSTA_ALMOSTEMPTY_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_FIFOSTA_ALMOSTEMPTY_S = @as(c_uint, 3);
pub const LRFDMDM_FIFOSTA_ALMOSTEMPTY_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_FIFOSTA_ALMOSTEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_UNDERFLOW = @as(c_uint, 0x00000004);
pub const LRFDMDM_FIFOSTA_UNDERFLOW_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_FIFOSTA_UNDERFLOW_S = @as(c_uint, 2);
pub const LRFDMDM_FIFOSTA_UNDERFLOW_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_FIFOSTA_UNDERFLOW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_RXVALID = @as(c_uint, 0x00000002);
pub const LRFDMDM_FIFOSTA_RXVALID_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_FIFOSTA_RXVALID_S = @as(c_uint, 1);
pub const LRFDMDM_FIFOSTA_RXVALID_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_FIFOSTA_RXVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FIFOSTA_TXREADY = @as(c_uint, 0x00000001);
pub const LRFDMDM_FIFOSTA_TXREADY_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_FIFOSTA_TXREADY_S = @as(c_uint, 0);
pub const LRFDMDM_FIFOSTA_TXREADY_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_FIFOSTA_TXREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_RFEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_RFEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_RFEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_RFEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_RFEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_RFEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDMDM_RFECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_RFECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_RFECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDMDM_RFECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_RFECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_RFECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_PBEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_PBEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_PBEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_PBEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_PBEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_PBEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_PBEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_PBEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_PBEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_PBEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_PBECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDMDM_PBECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_PBECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_PBECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_PBECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_PBECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDMDM_PBECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_PBECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_PBECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_PBECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_LQIEST_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_LQIEST_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_LQIEST_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_LQIEST_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_LQIEST_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_PBEEVTMUX_SEL_W = @as(c_uint, 6);
pub const LRFDMDM_PBEEVTMUX_SEL_M = @as(c_uint, 0x0000003F);
pub const LRFDMDM_PBEEVTMUX_SEL_S = @as(c_uint, 0);
pub const LRFDMDM_PBEEVTMUX_SEL_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDMDM_PBEEVTMUX_SEL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL1_W = @as(c_uint, 6);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL1_M = @as(c_uint, 0x00000FC0);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL1_S = @as(c_uint, 6);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL1_ALLONES = @as(c_uint, 0x00000FC0);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL0_W = @as(c_uint, 6);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL0_M = @as(c_uint, 0x0000003F);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL0_S = @as(c_uint, 0);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL0_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDMDM_SYSTIMEVTMUX0_SEL0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYSTIMEVTMUX1_SEL2_W = @as(c_uint, 6);
pub const LRFDMDM_SYSTIMEVTMUX1_SEL2_M = @as(c_uint, 0x0000003F);
pub const LRFDMDM_SYSTIMEVTMUX1_SEL2_S = @as(c_uint, 0);
pub const LRFDMDM_SYSTIMEVTMUX1_SEL2_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDMDM_SYSTIMEVTMUX1_SEL2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_ADCDIGCONF_QBRANCHEN = @as(c_uint, 0x00000002);
pub const LRFDMDM_ADCDIGCONF_QBRANCHEN_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_ADCDIGCONF_QBRANCHEN_S = @as(c_uint, 1);
pub const LRFDMDM_ADCDIGCONF_QBRANCHEN_ON = @as(c_uint, 0x00000002);
pub const LRFDMDM_ADCDIGCONF_QBRANCHEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_ADCDIGCONF_IBRANCHEN = @as(c_uint, 0x00000001);
pub const LRFDMDM_ADCDIGCONF_IBRANCHEN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_ADCDIGCONF_IBRANCHEN_S = @as(c_uint, 0);
pub const LRFDMDM_ADCDIGCONF_IBRANCHEN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM_ADCDIGCONF_IBRANCHEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODPRECTRL_REPS_W = @as(c_uint, 4);
pub const LRFDMDM_MODPRECTRL_REPS_M = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODPRECTRL_REPS_S = @as(c_uint, 4);
pub const LRFDMDM_MODPRECTRL_REPS_REPS16 = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS15 = @as(c_uint, 0x000000E0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS14 = @as(c_uint, 0x000000D0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS13 = @as(c_uint, 0x000000C0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS12 = @as(c_uint, 0x000000B0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS11 = @as(c_uint, 0x000000A0);
pub const LRFDMDM_MODPRECTRL_REPS_REPS10 = @as(c_uint, 0x00000090);
pub const LRFDMDM_MODPRECTRL_REPS_REPS9 = @as(c_uint, 0x00000080);
pub const LRFDMDM_MODPRECTRL_REPS_REPS8 = @as(c_uint, 0x00000070);
pub const LRFDMDM_MODPRECTRL_REPS_REPS7 = @as(c_uint, 0x00000060);
pub const LRFDMDM_MODPRECTRL_REPS_REPS6 = @as(c_uint, 0x00000050);
pub const LRFDMDM_MODPRECTRL_REPS_REPS5 = @as(c_uint, 0x00000040);
pub const LRFDMDM_MODPRECTRL_REPS_REPS4 = @as(c_uint, 0x00000030);
pub const LRFDMDM_MODPRECTRL_REPS_REPS3 = @as(c_uint, 0x00000020);
pub const LRFDMDM_MODPRECTRL_REPS_REPS2 = @as(c_uint, 0x00000010);
pub const LRFDMDM_MODPRECTRL_REPS_REPS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODPRECTRL_SIZE_W = @as(c_uint, 4);
pub const LRFDMDM_MODPRECTRL_SIZE_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODPRECTRL_SIZE_S = @as(c_uint, 0);
pub const LRFDMDM_MODPRECTRL_SIZE_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODPRECTRL_SIZE_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDMDM_MODPRECTRL_SIZE_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDMDM_MODSYMMAP0_SYM3_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP0_SYM3_M = @as(c_uint, 0x0000F000);
pub const LRFDMDM_MODSYMMAP0_SYM3_S = @as(c_uint, 12);
pub const LRFDMDM_MODSYMMAP0_SYM3_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDMDM_MODSYMMAP0_SYM3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP0_SYM2_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP0_SYM2_M = @as(c_uint, 0x00000F00);
pub const LRFDMDM_MODSYMMAP0_SYM2_S = @as(c_uint, 8);
pub const LRFDMDM_MODSYMMAP0_SYM2_ALLONES = @as(c_uint, 0x00000F00);
pub const LRFDMDM_MODSYMMAP0_SYM2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP0_SYM1_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP0_SYM1_M = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODSYMMAP0_SYM1_S = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP0_SYM1_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODSYMMAP0_SYM1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP0_SYM0_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP0_SYM0_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSYMMAP0_SYM0_S = @as(c_uint, 0);
pub const LRFDMDM_MODSYMMAP0_SYM0_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSYMMAP0_SYM0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP1_SYM7_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP1_SYM7_M = @as(c_uint, 0x0000F000);
pub const LRFDMDM_MODSYMMAP1_SYM7_S = @as(c_uint, 12);
pub const LRFDMDM_MODSYMMAP1_SYM7_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDMDM_MODSYMMAP1_SYM7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP1_SYM6_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP1_SYM6_M = @as(c_uint, 0x00000F00);
pub const LRFDMDM_MODSYMMAP1_SYM6_S = @as(c_uint, 8);
pub const LRFDMDM_MODSYMMAP1_SYM6_ALLONES = @as(c_uint, 0x00000F00);
pub const LRFDMDM_MODSYMMAP1_SYM6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP1_SYM5_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP1_SYM5_M = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODSYMMAP1_SYM5_S = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP1_SYM5_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDMDM_MODSYMMAP1_SYM5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSYMMAP1_SYM4_W = @as(c_uint, 4);
pub const LRFDMDM_MODSYMMAP1_SYM4_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSYMMAP1_SYM4_S = @as(c_uint, 0);
pub const LRFDMDM_MODSYMMAP1_SYM4_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSYMMAP1_SYM4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODSOFTTX_SOFTSYMBOL_W = @as(c_uint, 4);
pub const LRFDMDM_MODSOFTTX_SOFTSYMBOL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSOFTTX_SOFTSYMBOL_S = @as(c_uint, 0);
pub const LRFDMDM_MODSOFTTX_SOFTSYMBOL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_MODSOFTTX_SOFTSYMBOL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BAUD_RATEWORD_W = @as(c_uint, 16);
pub const LRFDMDM_BAUD_RATEWORD_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_BAUD_RATEWORD_S = @as(c_uint, 0);
pub const LRFDMDM_BAUD_RATEWORD_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_BAUD_RATEWORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BAUDPRE_ALIGNVALUE_W = @as(c_uint, 3);
pub const LRFDMDM_BAUDPRE_ALIGNVALUE_M = @as(c_uint, 0x0000E000);
pub const LRFDMDM_BAUDPRE_ALIGNVALUE_S = @as(c_uint, 13);
pub const LRFDMDM_BAUDPRE_ALIGNVALUE_ALLONES = @as(c_uint, 0x0000E000);
pub const LRFDMDM_BAUDPRE_ALIGNVALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BAUDPRE_EXTRATEWORD_W = @as(c_uint, 5);
pub const LRFDMDM_BAUDPRE_EXTRATEWORD_M = @as(c_uint, 0x00001F00);
pub const LRFDMDM_BAUDPRE_EXTRATEWORD_S = @as(c_uint, 8);
pub const LRFDMDM_BAUDPRE_EXTRATEWORD_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDMDM_BAUDPRE_EXTRATEWORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BAUDPRE_PRESCALER_W = @as(c_uint, 8);
pub const LRFDMDM_BAUDPRE_PRESCALER_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BAUDPRE_PRESCALER_S = @as(c_uint, 0);
pub const LRFDMDM_BAUDPRE_PRESCALER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BAUDPRE_PRESCALER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODMAIN_FECSELECT_W = @as(c_uint, 2);
pub const LRFDMDM_MODMAIN_FECSELECT_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM_MODMAIN_FECSELECT_S = @as(c_uint, 2);
pub const LRFDMDM_MODMAIN_FECSELECT_BLR = @as(c_uint, 0x0000000C);
pub const LRFDMDM_MODMAIN_FECSELECT_RESERVED = @as(c_uint, 0x00000008);
pub const LRFDMDM_MODMAIN_FECSELECT_IEEE15_4 = @as(c_uint, 0x00000004);
pub const LRFDMDM_MODMAIN_FECSELECT_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODMAIN_MODLEVELS_W = @as(c_uint, 2);
pub const LRFDMDM_MODMAIN_MODLEVELS_M = @as(c_uint, 0x00000003);
pub const LRFDMDM_MODMAIN_MODLEVELS_S = @as(c_uint, 0);
pub const LRFDMDM_MODMAIN_MODLEVELS_LVL8 = @as(c_uint, 0x00000002);
pub const LRFDMDM_MODMAIN_MODLEVELS_LVL4 = @as(c_uint, 0x00000001);
pub const LRFDMDM_MODMAIN_MODLEVELS_LVL2 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC0_CMIXN_W = @as(c_uint, 10);
pub const LRFDMDM_DEMMISC0_CMIXN_M = @as(c_uint, 0x000003FF);
pub const LRFDMDM_DEMMISC0_CMIXN_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMISC0_CMIXN_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDMDM_DEMMISC0_CMIXN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC1_CDCTGAINMA_W = @as(c_uint, 5);
pub const LRFDMDM_DEMMISC1_CDCTGAINMA_M = @as(c_uint, 0x00001F00);
pub const LRFDMDM_DEMMISC1_CDCTGAINMA_S = @as(c_uint, 8);
pub const LRFDMDM_DEMMISC1_CDCTGAINMA_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDMDM_DEMMISC1_CDCTGAINMA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC1_CDCTGAINEX_W = @as(c_uint, 3);
pub const LRFDMDM_DEMMISC1_CDCTGAINEX_M = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMMISC1_CDCTGAINEX_S = @as(c_uint, 5);
pub const LRFDMDM_DEMMISC1_CDCTGAINEX_ALLONES = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMMISC1_CDCTGAINEX_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC1_CDCCOLRST = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMMISC1_CDCCOLRST_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMMISC1_CDCCOLRST_S = @as(c_uint, 4);
pub const LRFDMDM_DEMMISC1_CDCCOLRST_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMMISC1_CDCCOLRST_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_S = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_CHFI = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_FEXB1 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMMISC1_MGE1SRCSEL_FIDC = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC1_CHFIBW_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC1_CHFIBW_M = @as(c_uint, 0x00000003);
pub const LRFDMDM_DEMMISC1_CHFIBW_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMISC1_CHFIBW_BW0_29 = @as(c_uint, 0x00000003);
pub const LRFDMDM_DEMMISC1_CHFIBW_BW0_41667 = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMMISC1_CHFIBW_BW0_3333 = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMMISC1_CHFIBW_BW0_5 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_MLSERUN = @as(c_uint, 0x00004000);
pub const LRFDMDM_DEMMISC2_MLSERUN_M = @as(c_uint, 0x00004000);
pub const LRFDMDM_DEMMISC2_MLSERUN_S = @as(c_uint, 14);
pub const LRFDMDM_DEMMISC2_MLSERUN_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM_DEMMISC2_MLSERUN_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_MAFCGAIN_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC2_MAFCGAIN_M = @as(c_uint, 0x00003000);
pub const LRFDMDM_DEMMISC2_MAFCGAIN_S = @as(c_uint, 12);
pub const LRFDMDM_DEMMISC2_MAFCGAIN_ALLONES = @as(c_uint, 0x00003000);
pub const LRFDMDM_DEMMISC2_MAFCGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_STIMBYPASS = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMMISC2_STIMBYPASS_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMMISC2_STIMBYPASS_S = @as(c_uint, 11);
pub const LRFDMDM_DEMMISC2_STIMBYPASS_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMMISC2_STIMBYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_STIMESTONLY = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMMISC2_STIMESTONLY_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMMISC2_STIMESTONLY_S = @as(c_uint, 10);
pub const LRFDMDM_DEMMISC2_STIMESTONLY_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMMISC2_STIMESTONLY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_W = @as(c_uint, 3);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_M = @as(c_uint, 0x00000380);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_S = @as(c_uint, 7);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM128 = @as(c_uint, 0x00000280);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM64 = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM32 = @as(c_uint, 0x00000180);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM16 = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM8 = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMMISC2_STIMTEAPERIOD_SYM4 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_W = @as(c_uint, 3);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_M = @as(c_uint, 0x00000070);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_S = @as(c_uint, 4);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV4 = @as(c_uint, 0x00000070);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV8 = @as(c_uint, 0x00000060);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV16 = @as(c_uint, 0x00000050);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV32 = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV64 = @as(c_uint, 0x00000030);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV128 = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV256 = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMMISC2_STIMTEAGAIN_DIV512 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_PDIFLINPREDEN = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMMISC2_PDIFLINPREDEN_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMMISC2_PDIFLINPREDEN_S = @as(c_uint, 3);
pub const LRFDMDM_DEMMISC2_PDIFLINPREDEN_ON = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMMISC2_PDIFLINPREDEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_PDIFDESPECK = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMMISC2_PDIFDESPECK_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMMISC2_PDIFDESPECK_S = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC2_PDIFDESPECK_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMMISC2_PDIFDESPECK_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_PDIFIQCONJEN = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMMISC2_PDIFIQCONJEN_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMMISC2_PDIFIQCONJEN_S = @as(c_uint, 1);
pub const LRFDMDM_DEMMISC2_PDIFIQCONJEN_ON = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMMISC2_PDIFIQCONJEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC2_PDIFLIMITRANGE = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMMISC2_PDIFLIMITRANGE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMMISC2_PDIFLIMITRANGE_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMISC2_PDIFLIMITRANGE_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMMISC2_PDIFLIMITRANGE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_M = @as(c_uint, 0x00006000);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_S = @as(c_uint, 13);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_GAIN8 = @as(c_uint, 0x00006000);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_GAIN4 = @as(c_uint, 0x00004000);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_GAIN2 = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMMISC3_BDE2DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_BDE1FILTMODE = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMMISC3_BDE1FILTMODE_M = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMMISC3_BDE1FILTMODE_S = @as(c_uint, 12);
pub const LRFDMDM_DEMMISC3_BDE1FILTMODE_DIV2 = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMMISC3_BDE1FILTMODE_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_M = @as(c_uint, 0x00000C00);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_S = @as(c_uint, 10);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_SYM1024 = @as(c_uint, 0x00000C00);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_SYM256 = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_SYM64 = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMMISC3_LQIPERIOD_SYM16 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_M = @as(c_uint, 0x00000300);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_S = @as(c_uint, 8);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_GAIN8 = @as(c_uint, 0x00000300);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_GAIN4 = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_GAIN2 = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMMISC3_BDE1DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_BDE1NUMSTAGES = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMMISC3_BDE1NUMSTAGES_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMMISC3_BDE1NUMSTAGES_S = @as(c_uint, 7);
pub const LRFDMDM_DEMMISC3_BDE1NUMSTAGES_DIV2 = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMMISC3_BDE1NUMSTAGES_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_W = @as(c_uint, 2);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_M = @as(c_uint, 0x00000060);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_S = @as(c_uint, 5);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_DIV4 = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_DIV2 = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMMISC3_PDIFDECIM_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_W = @as(c_uint, 5);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_M = @as(c_uint, 0x0000001F);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_DIV8 = @as(c_uint, 0x00000003);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_DIV4 = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_DIV2 = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMMISC3_BDE2DECRATIO_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMIQMC0_GAINFACTOR_W = @as(c_uint, 8);
pub const LRFDMDM_DEMIQMC0_GAINFACTOR_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMIQMC0_GAINFACTOR_S = @as(c_uint, 8);
pub const LRFDMDM_DEMIQMC0_GAINFACTOR_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMIQMC0_GAINFACTOR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMIQMC0_PHASEFACTOR_W = @as(c_uint, 8);
pub const LRFDMDM_DEMIQMC0_PHASEFACTOR_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMIQMC0_PHASEFACTOR_S = @as(c_uint, 0);
pub const LRFDMDM_DEMIQMC0_PHASEFACTOR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMIQMC0_PHASEFACTOR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSBU_DSBUAVGLENGTH_W = @as(c_uint, 8);
pub const LRFDMDM_DEMDSBU_DSBUAVGLENGTH_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMDSBU_DSBUAVGLENGTH_S = @as(c_uint, 8);
pub const LRFDMDM_DEMDSBU_DSBUAVGLENGTH_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMDSBU_DSBUAVGLENGTH_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSBU_DSBUDELAY_W = @as(c_uint, 8);
pub const LRFDMDM_DEMDSBU_DSBUDELAY_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMDSBU_DSBUDELAY_S = @as(c_uint, 0);
pub const LRFDMDM_DEMDSBU_DSBUDELAY_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMDSBU_DSBUDELAY_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_ESTSEL = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMCODC0_ESTSEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMCODC0_ESTSEL_S = @as(c_uint, 11);
pub const LRFDMDM_DEMCODC0_ESTSEL_IIR = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMCODC0_ESTSEL_ACC = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_COMPSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMCODC0_COMPSEL_M = @as(c_uint, 0x00000600);
pub const LRFDMDM_DEMCODC0_COMPSEL_S = @as(c_uint, 9);
pub const LRFDMDM_DEMCODC0_COMPSEL_IIR = @as(c_uint, 0x00000600);
pub const LRFDMDM_DEMCODC0_COMPSEL_ACC = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMCODC0_COMPSEL_MANUAL = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_IIRUSEINITIAL = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMCODC0_IIRUSEINITIAL_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMCODC0_IIRUSEINITIAL_S = @as(c_uint, 8);
pub const LRFDMDM_DEMCODC0_IIRUSEINITIAL_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMCODC0_IIRUSEINITIAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_IIRGAIN_W = @as(c_uint, 3);
pub const LRFDMDM_DEMCODC0_IIRGAIN_M = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMCODC0_IIRGAIN_S = @as(c_uint, 5);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV1024 = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV512 = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV256 = @as(c_uint, 0x000000A0);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV128 = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV64 = @as(c_uint, 0x00000060);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV32 = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMCODC0_IIRGAIN_DIV16 = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMCODC0_IIRGAIN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_IIREN = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMCODC0_IIREN_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMCODC0_IIREN_S = @as(c_uint, 4);
pub const LRFDMDM_DEMCODC0_IIREN_ON = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMCODC0_IIREN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_ACCMODE = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMCODC0_ACCMODE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMCODC0_ACCMODE_S = @as(c_uint, 3);
pub const LRFDMDM_DEMCODC0_ACCMODE_CONT = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMCODC0_ACCMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_M = @as(c_uint, 0x00000006);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_S = @as(c_uint, 1);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_SMPL512 = @as(c_uint, 0x00000006);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_SMPL128 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_SMPL32 = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMCODC0_ACCPERIOD_SMPL8 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC0_ACCEN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMCODC0_ACCEN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMCODC0_ACCEN_S = @as(c_uint, 0);
pub const LRFDMDM_DEMCODC0_ACCEN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMCODC0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC0_COMPSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFIDC0_COMPSEL_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_DEMFIDC0_COMPSEL_S = @as(c_uint, 4);
pub const LRFDMDM_DEMFIDC0_COMPSEL_ACC = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMFIDC0_COMPSEL_MANUAL = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_S = @as(c_uint, 2);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_SMPL512 = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_SMPL128 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_SMPL32 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMFIDC0_ACCPERIOD_SMPL8 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC0_ACCMODE = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMFIDC0_ACCMODE_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMFIDC0_ACCMODE_S = @as(c_uint, 1);
pub const LRFDMDM_DEMFIDC0_ACCMODE_CONT = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMFIDC0_ACCMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC0_ACCEN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIDC0_ACCEN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIDC0_ACCEN_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFIDC0_ACCEN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIDC0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_OUT2PASSTHROUGH = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMFEXB0_OUT2PASSTHROUGH_M = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMFEXB0_OUT2PASSTHROUGH_S = @as(c_uint, 13);
pub const LRFDMDM_DEMFEXB0_OUT2PASSTHROUGH_ONE = @as(c_uint, 0x00002000);
pub const LRFDMDM_DEMFEXB0_OUT2PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_M = @as(c_uint, 0x00001800);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_S = @as(c_uint, 11);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_BDE1 = @as(c_uint, 0x00001000);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_CMIX = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMFEXB0_OUT2SRCSEL_CODC = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_OUT1PASSTHROUGH = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMFEXB0_OUT1PASSTHROUGH_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMFEXB0_OUT1PASSTHROUGH_S = @as(c_uint, 10);
pub const LRFDMDM_DEMFEXB0_OUT1PASSTHROUGH_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMFEXB0_OUT1PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_M = @as(c_uint, 0x00000300);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_S = @as(c_uint, 8);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_BDE1 = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_CMIX = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMFEXB0_OUT1SRCSEL_CODC = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_B4SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_B4SRCSEL_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMFEXB0_B4SRCSEL_S = @as(c_uint, 6);
pub const LRFDMDM_DEMFEXB0_B4SRCSEL_ONES = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMFEXB0_B4SRCSEL_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_S = @as(c_uint, 4);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_CMIX = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_CODC = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMFEXB0_B3SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_S = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_BDE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_CODC = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMFEXB0_B2SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_M = @as(c_uint, 0x00000003);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_BDE1 = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFEXB0_B1SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_OUT2PASSTHROUGH = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMDSXB0_OUT2PASSTHROUGH_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMDSXB0_OUT2PASSTHROUGH_S = @as(c_uint, 5);
pub const LRFDMDM_DEMDSXB0_OUT2PASSTHROUGH_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMDSXB0_OUT2PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_OUT1PASSTHROUGH = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDSXB0_OUT1PASSTHROUGH_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDSXB0_OUT1PASSTHROUGH_S = @as(c_uint, 4);
pub const LRFDMDM_DEMDSXB0_OUT1PASSTHROUGH_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDSXB0_OUT1PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL2 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL2_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL2_S = @as(c_uint, 3);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL2_MAFI = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL2_FIFE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL1 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL1_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL1_S = @as(c_uint, 2);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL1_MAFI = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMDSXB0_OUTSRCSEL1_FIFE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_B2SRCSEL = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMDSXB0_B2SRCSEL_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMDSXB0_B2SRCSEL_S = @as(c_uint, 1);
pub const LRFDMDM_DEMDSXB0_B2SRCSEL_FIFE = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMDSXB0_B2SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDSXB0_B1SRCSEL = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDSXB0_B1SRCSEL_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDSXB0_B1SRCSEL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMDSXB0_B1SRCSEL_MAFI = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDSXB0_B1SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_FINEFOESEL = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMFIFE0_FINEFOESEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMFIFE0_FINEFOESEL_S = @as(c_uint, 11);
pub const LRFDMDM_DEMFIFE0_FINEFOESEL_ACC = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMFIFE0_FINEFOESEL_IIR = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_M = @as(c_uint, 0x00000600);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_S = @as(c_uint, 9);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_MANUAL = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_ACC = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMFIFE0_FOCFFSEL_IIR = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_ACCCNTMODE = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMFIFE0_ACCCNTMODE_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMFIFE0_ACCCNTMODE_S = @as(c_uint, 8);
pub const LRFDMDM_DEMFIFE0_ACCCNTMODE_CONT = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMFIFE0_ACCCNTMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_S = @as(c_uint, 6);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_PER512 = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_PER256 = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_PER128 = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMFIFE0_ACCPERIOD_PER64 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_ACCEN = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMFIFE0_ACCEN_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMFIFE0_ACCEN_S = @as(c_uint, 5);
pub const LRFDMDM_DEMFIFE0_ACCEN_ON = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMFIFE0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_IIRUSEINITIAL = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMFIFE0_IIRUSEINITIAL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMFIFE0_IIRUSEINITIAL_S = @as(c_uint, 4);
pub const LRFDMDM_DEMFIFE0_IIRUSEINITIAL_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMFIFE0_IIRUSEINITIAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_W = @as(c_uint, 3);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_M = @as(c_uint, 0x0000000E);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_S = @as(c_uint, 1);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV1024 = @as(c_uint, 0x0000000E);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV512 = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV256 = @as(c_uint, 0x0000000A);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV128 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV64 = @as(c_uint, 0x00000006);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV32 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_DIV16 = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMFIFE0_IIRGAIN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE0_IIREN = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIFE0_IIREN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIFE0_IIREN_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFIFE0_IIREN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMFIFE0_IIREN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI0_C1C7_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI0_C1C7_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMMAFI0_C1C7_S = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI0_C1C7_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMMAFI0_C1C7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI0_C0C8_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI0_C0C8_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI0_C0C8_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMAFI0_C0C8_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI0_C0C8_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI1_C3C5_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI1_C3C5_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMMAFI1_C3C5_S = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI1_C3C5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMMAFI1_C3C5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI1_C2C6_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI1_C2C6_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI1_C2C6_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMAFI1_C2C6_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI1_C2C6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI2_C4_W = @as(c_uint, 9);
pub const LRFDMDM_DEMMAFI2_C4_M = @as(c_uint, 0x000001FF);
pub const LRFDMDM_DEMMAFI2_C4_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMAFI2_C4_ALLONES = @as(c_uint, 0x000001FF);
pub const LRFDMDM_DEMMAFI2_C4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE0_MASKB_W = @as(c_uint, 5);
pub const LRFDMDM_DEMC1BE0_MASKB_M = @as(c_uint, 0x0000F800);
pub const LRFDMDM_DEMC1BE0_MASKB_S = @as(c_uint, 11);
pub const LRFDMDM_DEMC1BE0_MASKB_ALLONES = @as(c_uint, 0x0000F800);
pub const LRFDMDM_DEMC1BE0_MASKB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE0_MASKA_W = @as(c_uint, 5);
pub const LRFDMDM_DEMC1BE0_MASKA_M = @as(c_uint, 0x000007C0);
pub const LRFDMDM_DEMC1BE0_MASKA_S = @as(c_uint, 6);
pub const LRFDMDM_DEMC1BE0_MASKA_ALLONES = @as(c_uint, 0x000007C0);
pub const LRFDMDM_DEMC1BE0_MASKA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE0_CASCCONF_W = @as(c_uint, 2);
pub const LRFDMDM_DEMC1BE0_CASCCONF_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_DEMC1BE0_CASCCONF_S = @as(c_uint, 4);
pub const LRFDMDM_DEMC1BE0_CASCCONF_PARALLEL = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMC1BE0_CASCCONF_SERIAL = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMC1BE0_CASCCONF_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE0_COPYCONF_W = @as(c_uint, 4);
pub const LRFDMDM_DEMC1BE0_COPYCONF_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM_DEMC1BE0_COPYCONF_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BE0_COPYCONF_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM_DEMC1BE0_COPYCONF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE1_THRESHOLDB_W = @as(c_uint, 8);
pub const LRFDMDM_DEMC1BE1_THRESHOLDB_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMC1BE1_THRESHOLDB_S = @as(c_uint, 8);
pub const LRFDMDM_DEMC1BE1_THRESHOLDB_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMC1BE1_THRESHOLDB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE1_THRESHOLDA_W = @as(c_uint, 8);
pub const LRFDMDM_DEMC1BE1_THRESHOLDA_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMC1BE1_THRESHOLDA_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BE1_THRESHOLDA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMC1BE1_THRESHOLDA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE2_PARLOADCONF = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMC1BE2_PARLOADCONF_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMC1BE2_PARLOADCONF_S = @as(c_uint, 10);
pub const LRFDMDM_DEMC1BE2_PARLOADCONF_ATOD = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMC1BE2_PARLOADCONF_ATOB = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_W = @as(c_uint, 2);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_M = @as(c_uint, 0x00000300);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_S = @as(c_uint, 8);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_BESTAB = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_BEST = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMC1BE2_PEAKCONF_THRESH = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BE2_THRESHOLDC_W = @as(c_uint, 8);
pub const LRFDMDM_DEMC1BE2_THRESHOLDC_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMC1BE2_THRESHOLDC_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BE2_THRESHOLDC_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMC1BE2_THRESHOLDC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SPARE0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_SPARE0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_SPARE0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SPARE1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_SPARE1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_SPARE1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SPARE2_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_SPARE2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE2_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_SPARE2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SPARE3_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_SPARE3_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE3_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_SPARE3_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SPARE3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU0_SYNCMODE = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMSWQU0_SYNCMODE_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMSWQU0_SYNCMODE_S = @as(c_uint, 7);
pub const LRFDMDM_DEMSWQU0_SYNCMODE_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMSWQU0_SYNCMODE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU0_AUTOMAFC = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMSWQU0_AUTOMAFC_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMSWQU0_AUTOMAFC_S = @as(c_uint, 6);
pub const LRFDMDM_DEMSWQU0_AUTOMAFC_ON = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMSWQU0_AUTOMAFC_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU0_RUN = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMSWQU0_RUN_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMSWQU0_RUN_S = @as(c_uint, 5);
pub const LRFDMDM_DEMSWQU0_RUN_ON = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMSWQU0_RUN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU0_REFLEN_W = @as(c_uint, 5);
pub const LRFDMDM_DEMSWQU0_REFLEN_M = @as(c_uint, 0x0000001F);
pub const LRFDMDM_DEMSWQU0_REFLEN_S = @as(c_uint, 0);
pub const LRFDMDM_DEMSWQU0_REFLEN_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDMDM_DEMSWQU0_REFLEN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BEREF0_CAR15C0_W = @as(c_uint, 16);
pub const LRFDMDM_DEMC1BEREF0_CAR15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF0_CAR15C0_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BEREF0_CAR15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF0_CAR15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BEREF1_CAR31C16_W = @as(c_uint, 16);
pub const LRFDMDM_DEMC1BEREF1_CAR31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF1_CAR31C16_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BEREF1_CAR31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF1_CAR31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BEREF2_CBR15C0_W = @as(c_uint, 16);
pub const LRFDMDM_DEMC1BEREF2_CBR15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF2_CBR15C0_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BEREF2_CBR15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF2_CBR15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMC1BEREF3_CBR31C16_W = @as(c_uint, 16);
pub const LRFDMDM_DEMC1BEREF3_CBR31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF3_CBR31C16_S = @as(c_uint, 0);
pub const LRFDMDM_DEMC1BEREF3_CBR31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMC1BEREF3_CBR31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_DSBUSEL = @as(c_uint, 0x00000800);
pub const LRFDMDM_MODCTRL_DSBUSEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_MODCTRL_DSBUSEL_S = @as(c_uint, 11);
pub const LRFDMDM_MODCTRL_DSBUSEL_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_MODCTRL_DSBUSEL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_HDISMODE = @as(c_uint, 0x00000400);
pub const LRFDMDM_MODCTRL_HDISMODE_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_MODCTRL_HDISMODE_S = @as(c_uint, 10);
pub const LRFDMDM_MODCTRL_HDISMODE_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM_MODCTRL_HDISMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_PARBITQUALEN = @as(c_uint, 0x00000200);
pub const LRFDMDM_MODCTRL_PARBITQUALEN_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_MODCTRL_PARBITQUALEN_S = @as(c_uint, 9);
pub const LRFDMDM_MODCTRL_PARBITQUALEN_ON = @as(c_uint, 0x00000200);
pub const LRFDMDM_MODCTRL_PARBITQUALEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_STIMMODE_W = @as(c_uint, 2);
pub const LRFDMDM_MODCTRL_STIMMODE_M = @as(c_uint, 0x00000180);
pub const LRFDMDM_MODCTRL_STIMMODE_S = @as(c_uint, 7);
pub const LRFDMDM_MODCTRL_STIMMODE_EARLY = @as(c_uint, 0x00000100);
pub const LRFDMDM_MODCTRL_STIMMODE_LATE = @as(c_uint, 0x00000080);
pub const LRFDMDM_MODCTRL_STIMMODE_NORMAL = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_C1BEMODE = @as(c_uint, 0x00000040);
pub const LRFDMDM_MODCTRL_C1BEMODE_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_MODCTRL_C1BEMODE_S = @as(c_uint, 6);
pub const LRFDMDM_MODCTRL_C1BEMODE_EARLYLATE = @as(c_uint, 0x00000040);
pub const LRFDMDM_MODCTRL_C1BEMODE_NORMAL = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_SOFTPDIFFMODE = @as(c_uint, 0x00000020);
pub const LRFDMDM_MODCTRL_SOFTPDIFFMODE_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_MODCTRL_SOFTPDIFFMODE_S = @as(c_uint, 5);
pub const LRFDMDM_MODCTRL_SOFTPDIFFMODE_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM_MODCTRL_SOFTPDIFFMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_SOFTTXENABLE = @as(c_uint, 0x00000010);
pub const LRFDMDM_MODCTRL_SOFTTXENABLE_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_MODCTRL_SOFTTXENABLE_S = @as(c_uint, 4);
pub const LRFDMDM_MODCTRL_SOFTTXENABLE_ON = @as(c_uint, 0x00000010);
pub const LRFDMDM_MODCTRL_SOFTTXENABLE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_FECENABLE = @as(c_uint, 0x00000008);
pub const LRFDMDM_MODCTRL_FECENABLE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_MODCTRL_FECENABLE_S = @as(c_uint, 3);
pub const LRFDMDM_MODCTRL_FECENABLE_ON = @as(c_uint, 0x00000008);
pub const LRFDMDM_MODCTRL_FECENABLE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_FEC5TERMINATE = @as(c_uint, 0x00000004);
pub const LRFDMDM_MODCTRL_FEC5TERMINATE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_MODCTRL_FEC5TERMINATE_S = @as(c_uint, 2);
pub const LRFDMDM_MODCTRL_FEC5TERMINATE_ON = @as(c_uint, 0x00000004);
pub const LRFDMDM_MODCTRL_FEC5TERMINATE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_TONEINSERT = @as(c_uint, 0x00000002);
pub const LRFDMDM_MODCTRL_TONEINSERT_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_MODCTRL_TONEINSERT_S = @as(c_uint, 1);
pub const LRFDMDM_MODCTRL_TONEINSERT_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM_MODCTRL_TONEINSERT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODCTRL_PREAMBLEINSERT = @as(c_uint, 0x00000001);
pub const LRFDMDM_MODCTRL_PREAMBLEINSERT_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_MODCTRL_PREAMBLEINSERT_S = @as(c_uint, 0);
pub const LRFDMDM_MODCTRL_PREAMBLEINSERT_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_MODCTRL_PREAMBLEINSERT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MODPREAMBLE_WORD_W = @as(c_uint, 16);
pub const LRFDMDM_MODPREAMBLE_WORD_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MODPREAMBLE_WORD_S = @as(c_uint, 0);
pub const LRFDMDM_MODPREAMBLE_WORD_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MODPREAMBLE_WORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFRAC0_P15C0_W = @as(c_uint, 16);
pub const LRFDMDM_DEMFRAC0_P15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMFRAC0_P15C0_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFRAC0_P15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMFRAC0_P15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFRAC1_P27C16_W = @as(c_uint, 12);
pub const LRFDMDM_DEMFRAC1_P27C16_M = @as(c_uint, 0x00000FFF);
pub const LRFDMDM_DEMFRAC1_P27C16_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFRAC1_P27C16_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDMDM_DEMFRAC1_P27C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFRAC2_Q15C0_W = @as(c_uint, 16);
pub const LRFDMDM_DEMFRAC2_Q15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMFRAC2_Q15C0_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFRAC2_Q15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_DEMFRAC2_Q15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFRAC3_Q27C16_W = @as(c_uint, 12);
pub const LRFDMDM_DEMFRAC3_Q27C16_M = @as(c_uint, 0x00000FFF);
pub const LRFDMDM_DEMFRAC3_Q27C16_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFRAC3_Q27C16_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDMDM_DEMFRAC3_Q27C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC1_COMPIVAL_W = @as(c_uint, 13);
pub const LRFDMDM_DEMCODC1_COMPIVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMCODC1_COMPIVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMCODC1_COMPIVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMCODC1_COMPIVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMCODC2_COMPQVAL_W = @as(c_uint, 13);
pub const LRFDMDM_DEMCODC2_COMPQVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMCODC2_COMPQVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMCODC2_COMPQVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMCODC2_COMPQVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC1_COMPIVAL_W = @as(c_uint, 13);
pub const LRFDMDM_DEMFIDC1_COMPIVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMFIDC1_COMPIVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFIDC1_COMPIVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMFIDC1_COMPIVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIDC2_COMPQVAL_W = @as(c_uint, 13);
pub const LRFDMDM_DEMFIDC2_COMPQVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMFIDC2_COMPQVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFIDC2_COMPQVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_DEMFIDC2_COMPQVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMFIFE1_FOCFBREGVAL_W = @as(c_uint, 8);
pub const LRFDMDM_DEMFIFE1_FOCFBREGVAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMFIFE1_FOCFBREGVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMFIFE1_FOCFBREGVAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMFIFE1_FOCFBREGVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFC0_COMPVAL_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFC0_COMPVAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFC0_COMPVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMAFC0_COMPVAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFC0_COMPVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMMAFI4_TERMVAL_W = @as(c_uint, 8);
pub const LRFDMDM_DEMMAFI4_TERMVAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI4_TERMVAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMMAFI4_TERMVAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMMAFI4_TERMVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWIMBAL_IMBALB_W = @as(c_uint, 8);
pub const LRFDMDM_DEMSWIMBAL_IMBALB_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMSWIMBAL_IMBALB_S = @as(c_uint, 8);
pub const LRFDMDM_DEMSWIMBAL_IMBALB_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_DEMSWIMBAL_IMBALB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWIMBAL_IMBALA_W = @as(c_uint, 8);
pub const LRFDMDM_DEMSWIMBAL_IMBALA_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMSWIMBAL_IMBALA_S = @as(c_uint, 0);
pub const LRFDMDM_DEMSWIMBAL_IMBALA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMSWIMBAL_IMBALA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSOFTPDIFF_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_DEMSOFTPDIFF_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMSOFTPDIFF_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_DEMSOFTPDIFF_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DEMSOFTPDIFF_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_W = @as(c_uint, 3);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_M = @as(c_uint, 0x00000E00);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_S = @as(c_uint, 9);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI7 = @as(c_uint, 0x00000E00);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI6 = @as(c_uint, 0x00000C00);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI5 = @as(c_uint, 0x00000A00);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI4 = @as(c_uint, 0x00000800);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI3 = @as(c_uint, 0x00000600);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI2 = @as(c_uint, 0x00000400);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI1 = @as(c_uint, 0x00000200);
pub const LRFDMDM_DEMDEBUG_LOOPBACKPIN_GPI0 = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_DECSTAGETRIGGER = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMDEBUG_DECSTAGETRIGGER_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMDEBUG_DECSTAGETRIGGER_S = @as(c_uint, 8);
pub const LRFDMDM_DEMDEBUG_DECSTAGETRIGGER_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_DEMDEBUG_DECSTAGETRIGGER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_W = @as(c_uint, 3);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_M = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_S = @as(c_uint, 5);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_SOFD = @as(c_uint, 0x000000E0);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_STIM = @as(c_uint, 0x000000C0);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_MAFC = @as(c_uint, 0x000000A0);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_C1BE = @as(c_uint, 0x00000080);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_MAFI = @as(c_uint, 0x00000060);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_FIFE = @as(c_uint, 0x00000040);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_PDIF = @as(c_uint, 0x00000020);
pub const LRFDMDM_DEMDEBUG_DECSTAGEDEBUG_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_FRONTENDTRIGGER = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDEBUG_FRONTENDTRIGGER_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDEBUG_FRONTENDTRIGGER_S = @as(c_uint, 4);
pub const LRFDMDM_DEMDEBUG_FRONTENDTRIGGER_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_DEMDEBUG_FRONTENDTRIGGER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_W = @as(c_uint, 3);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_M = @as(c_uint, 0x0000000E);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_S = @as(c_uint, 1);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_FIDC = @as(c_uint, 0x0000000E);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_FRAC = @as(c_uint, 0x0000000C);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_CHFI = @as(c_uint, 0x0000000A);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_BDE2 = @as(c_uint, 0x00000008);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_FEXB2 = @as(c_uint, 0x00000006);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_BDE1 = @as(c_uint, 0x00000004);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_IQMC = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMDEBUG_FRONTENDDEBUG_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMDEBUG_LOOPBACKMODE = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDEBUG_LOOPBACKMODE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDEBUG_LOOPBACKMODE_S = @as(c_uint, 0);
pub const LRFDMDM_DEMDEBUG_LOOPBACKMODE_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMDEBUG_LOOPBACKMODE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITCTRL_METRSEL_W = @as(c_uint, 2);
pub const LRFDMDM_VITCTRL_METRSEL_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM_VITCTRL_METRSEL_S = @as(c_uint, 6);
pub const LRFDMDM_VITCTRL_METRSEL_MLSE = @as(c_uint, 0x000000C0);
pub const LRFDMDM_VITCTRL_METRSEL_SOFD = @as(c_uint, 0x00000080);
pub const LRFDMDM_VITCTRL_METRSEL_PHAC = @as(c_uint, 0x00000040);
pub const LRFDMDM_VITCTRL_METRSEL_MET5M = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_W = @as(c_uint, 4);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_M = @as(c_uint, 0x0000003C);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_S = @as(c_uint, 2);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM7 = @as(c_uint, 0x0000003C);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM6 = @as(c_uint, 0x00000038);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM5 = @as(c_uint, 0x00000034);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM4 = @as(c_uint, 0x00000030);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM3 = @as(c_uint, 0x0000002C);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM2 = @as(c_uint, 0x00000028);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM1 = @as(c_uint, 0x00000024);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_APM0 = @as(c_uint, 0x00000020);
pub const LRFDMDM_VITCTRL_APMRDBACKSEL_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITCTRL_ACSITERATIONS = @as(c_uint, 0x00000002);
pub const LRFDMDM_VITCTRL_ACSITERATIONS_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_VITCTRL_ACSITERATIONS_S = @as(c_uint, 1);
pub const LRFDMDM_VITCTRL_ACSITERATIONS_CODE23 = @as(c_uint, 0x00000002);
pub const LRFDMDM_VITCTRL_ACSITERATIONS_CODE12 = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITCTRL_METRICS = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCTRL_METRICS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCTRL_METRICS_S = @as(c_uint, 0);
pub const LRFDMDM_VITCTRL_METRICS_SOFT = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCTRL_METRICS_HW = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITCOMPUTE_START = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCOMPUTE_START_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCOMPUTE_START_S = @as(c_uint, 0);
pub const LRFDMDM_VITCOMPUTE_START_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_VITCOMPUTE_START_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITAPMRDBACK_VALUE_W = @as(c_uint, 10);
pub const LRFDMDM_VITAPMRDBACK_VALUE_M = @as(c_uint, 0x000003FF);
pub const LRFDMDM_VITAPMRDBACK_VALUE_S = @as(c_uint, 0);
pub const LRFDMDM_VITAPMRDBACK_VALUE_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDMDM_VITAPMRDBACK_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITSTATE_VALUE_W = @as(c_uint, 3);
pub const LRFDMDM_VITSTATE_VALUE_M = @as(c_uint, 0x00000007);
pub const LRFDMDM_VITSTATE_VALUE_S = @as(c_uint, 0);
pub const LRFDMDM_VITSTATE_VALUE_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDMDM_VITSTATE_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC10_MET1_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC10_MET1_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC10_MET1_S = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC10_MET1_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC10_MET1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC10_MET0_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC10_MET0_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC10_MET0_S = @as(c_uint, 0);
pub const LRFDMDM_VITBRMETRIC10_MET0_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC10_MET0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC32_MET3_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC32_MET3_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC32_MET3_S = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC32_MET3_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC32_MET3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC32_MET2_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC32_MET2_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC32_MET2_S = @as(c_uint, 0);
pub const LRFDMDM_VITBRMETRIC32_MET2_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC32_MET2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC54_MET5_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC54_MET5_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC54_MET5_S = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC54_MET5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC54_MET5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC54_MET4_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC54_MET4_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC54_MET4_S = @as(c_uint, 0);
pub const LRFDMDM_VITBRMETRIC54_MET4_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC54_MET4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC76_MET7_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC76_MET7_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC76_MET7_S = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC76_MET7_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_VITBRMETRIC76_MET7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_VITBRMETRIC76_MET6_W = @as(c_uint, 8);
pub const LRFDMDM_VITBRMETRIC76_MET6_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC76_MET6_S = @as(c_uint, 0);
pub const LRFDMDM_VITBRMETRIC76_MET6_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_VITBRMETRIC76_MET6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_CPTSRC_W = @as(c_uint, 6);
pub const LRFDMDM_TIMCTL_CPTSRC_M = @as(c_uint, 0x00003F00);
pub const LRFDMDM_TIMCTL_CPTSRC_S = @as(c_uint, 8);
pub const LRFDMDM_TIMCTL_CPTSRC_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDMDM_TIMCTL_CPTSRC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_CPTCTL = @as(c_uint, 0x00000080);
pub const LRFDMDM_TIMCTL_CPTCTL_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_TIMCTL_CPTCTL_S = @as(c_uint, 7);
pub const LRFDMDM_TIMCTL_CPTCTL_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM_TIMCTL_CPTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_CNTRSRC_W = @as(c_uint, 2);
pub const LRFDMDM_TIMCTL_CNTRSRC_M = @as(c_uint, 0x00000060);
pub const LRFDMDM_TIMCTL_CNTRSRC_S = @as(c_uint, 5);
pub const LRFDMDM_TIMCTL_CNTRSRC_CLK4BAUDF = @as(c_uint, 0x00000060);
pub const LRFDMDM_TIMCTL_CNTRSRC_CLK4BAUD = @as(c_uint, 0x00000040);
pub const LRFDMDM_TIMCTL_CNTRSRC_CLKBAUD = @as(c_uint, 0x00000020);
pub const LRFDMDM_TIMCTL_CNTRSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_CNTRCLR = @as(c_uint, 0x00000010);
pub const LRFDMDM_TIMCTL_CNTRCLR_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_TIMCTL_CNTRCLR_S = @as(c_uint, 4);
pub const LRFDMDM_TIMCTL_CNTRCLR_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_TIMCTL_CNTRCLR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_CNTRCTL = @as(c_uint, 0x00000008);
pub const LRFDMDM_TIMCTL_CNTRCTL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_TIMCTL_CNTRCTL_S = @as(c_uint, 3);
pub const LRFDMDM_TIMCTL_CNTRCTL_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_TIMCTL_CNTRCTL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_TIMSRC_W = @as(c_uint, 2);
pub const LRFDMDM_TIMCTL_TIMSRC_M = @as(c_uint, 0x00000006);
pub const LRFDMDM_TIMCTL_TIMSRC_S = @as(c_uint, 1);
pub const LRFDMDM_TIMCTL_TIMSRC_CLK4BAUDF = @as(c_uint, 0x00000006);
pub const LRFDMDM_TIMCTL_TIMSRC_CLK4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM_TIMCTL_TIMSRC_CLKBAUD = @as(c_uint, 0x00000002);
pub const LRFDMDM_TIMCTL_TIMSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCTL_TIMCTL = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMCTL_TIMCTL_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMCTL_TIMCTL_S = @as(c_uint, 0);
pub const LRFDMDM_TIMCTL_TIMCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMCTL_TIMCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMINC_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_TIMINC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMINC_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_TIMINC_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMINC_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMPER_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_TIMPER_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMPER_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_TIMPER_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMPER_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCNT_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_TIMCNT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMCNT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_TIMCNT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMCNT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMCAPT_VALUE_W = @as(c_uint, 16);
pub const LRFDMDM_TIMCAPT_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMCAPT_VALUE_S = @as(c_uint, 0);
pub const LRFDMDM_TIMCAPT_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_TIMCAPT_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_TIMEBASE_FLUSH = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMEBASE_FLUSH_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMEBASE_FLUSH_S = @as(c_uint, 0);
pub const LRFDMDM_TIMEBASE_FLUSH_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_TIMEBASE_FLUSH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_COUNT1IN_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_COUNT1IN_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_COUNT1IN_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_COUNT1IN_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_COUNT1IN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_COUNT1RES_VAL_W = @as(c_uint, 5);
pub const LRFDMDM_COUNT1RES_VAL_M = @as(c_uint, 0x0000001F);
pub const LRFDMDM_COUNT1RES_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_COUNT1RES_VAL_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDMDM_COUNT1RES_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BRMACC1_METRIC01_W = @as(c_uint, 8);
pub const LRFDMDM_BRMACC1_METRIC01_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_BRMACC1_METRIC01_S = @as(c_uint, 8);
pub const LRFDMDM_BRMACC1_METRIC01_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_BRMACC1_METRIC01_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BRMACC1_METRIC00_W = @as(c_uint, 8);
pub const LRFDMDM_BRMACC1_METRIC00_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BRMACC1_METRIC00_S = @as(c_uint, 0);
pub const LRFDMDM_BRMACC1_METRIC00_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BRMACC1_METRIC00_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BRMACC2_METRIC11_W = @as(c_uint, 8);
pub const LRFDMDM_BRMACC2_METRIC11_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_BRMACC2_METRIC11_S = @as(c_uint, 8);
pub const LRFDMDM_BRMACC2_METRIC11_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM_BRMACC2_METRIC11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_BRMACC2_METRIC10_W = @as(c_uint, 8);
pub const LRFDMDM_BRMACC2_METRIC10_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BRMACC2_METRIC10_S = @as(c_uint, 0);
pub const LRFDMDM_BRMACC2_METRIC10_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_BRMACC2_METRIC10_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCCTRL_SEND = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCCTRL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCCTRL_SEND_S = @as(c_uint, 0);
pub const LRFDMDM_MCETRCCTRL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCCTRL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCSTAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCSTAT_BUSY_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCSTAT_BUSY_S = @as(c_uint, 0);
pub const LRFDMDM_MCETRCSTAT_BUSY_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_MCETRCSTAT_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDMDM_MCETRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDMDM_MCETRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDMDM_MCETRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDMDM_MCETRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDMDM_MCETRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_MCETRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDMDM_MCETRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_MCETRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_MCETRCPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MCETRCPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_MCETRCPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MCETRCPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_MCETRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM_MCETRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MCETRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_MCETRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_MCETRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_CHFI = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT0_CHFI_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT0_CHFI_S = @as(c_uint, 5);
pub const LRFDMDM_RDCAPT0_CHFI_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT0_CHFI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_BDE2 = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT0_BDE2_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT0_BDE2_S = @as(c_uint, 4);
pub const LRFDMDM_RDCAPT0_BDE2_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT0_BDE2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_FIDC = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT0_FIDC_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT0_FIDC_S = @as(c_uint, 3);
pub const LRFDMDM_RDCAPT0_FIDC_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT0_FIDC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_FRAC = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT0_FRAC_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT0_FRAC_S = @as(c_uint, 2);
pub const LRFDMDM_RDCAPT0_FRAC_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT0_FRAC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_MGEX = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT0_MGEX_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT0_MGEX_S = @as(c_uint, 1);
pub const LRFDMDM_RDCAPT0_MGEX_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT0_MGEX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT0_CODC = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT0_CODC_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT0_CODC_S = @as(c_uint, 0);
pub const LRFDMDM_RDCAPT0_CODC_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT0_CODC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_C1BEX2 = @as(c_uint, 0x00000800);
pub const LRFDMDM_RDCAPT1_C1BEX2_M = @as(c_uint, 0x00000800);
pub const LRFDMDM_RDCAPT1_C1BEX2_S = @as(c_uint, 11);
pub const LRFDMDM_RDCAPT1_C1BEX2_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_RDCAPT1_C1BEX2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_C1BEX1 = @as(c_uint, 0x00000400);
pub const LRFDMDM_RDCAPT1_C1BEX1_M = @as(c_uint, 0x00000400);
pub const LRFDMDM_RDCAPT1_C1BEX1_S = @as(c_uint, 10);
pub const LRFDMDM_RDCAPT1_C1BEX1_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM_RDCAPT1_C1BEX1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_C1BEX0 = @as(c_uint, 0x00000200);
pub const LRFDMDM_RDCAPT1_C1BEX0_M = @as(c_uint, 0x00000200);
pub const LRFDMDM_RDCAPT1_C1BEX0_S = @as(c_uint, 9);
pub const LRFDMDM_RDCAPT1_C1BEX0_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM_RDCAPT1_C1BEX0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_SOFD = @as(c_uint, 0x00000100);
pub const LRFDMDM_RDCAPT1_SOFD_M = @as(c_uint, 0x00000100);
pub const LRFDMDM_RDCAPT1_SOFD_S = @as(c_uint, 8);
pub const LRFDMDM_RDCAPT1_SOFD_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_RDCAPT1_SOFD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_LQIE = @as(c_uint, 0x00000080);
pub const LRFDMDM_RDCAPT1_LQIE_M = @as(c_uint, 0x00000080);
pub const LRFDMDM_RDCAPT1_LQIE_S = @as(c_uint, 7);
pub const LRFDMDM_RDCAPT1_LQIE_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM_RDCAPT1_LQIE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_STIM = @as(c_uint, 0x00000040);
pub const LRFDMDM_RDCAPT1_STIM_M = @as(c_uint, 0x00000040);
pub const LRFDMDM_RDCAPT1_STIM_S = @as(c_uint, 6);
pub const LRFDMDM_RDCAPT1_STIM_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM_RDCAPT1_STIM_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_FIFE = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT1_FIFE_M = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT1_FIFE_S = @as(c_uint, 5);
pub const LRFDMDM_RDCAPT1_FIFE_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM_RDCAPT1_FIFE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_PDIF = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT1_PDIF_M = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT1_PDIF_S = @as(c_uint, 4);
pub const LRFDMDM_RDCAPT1_PDIF_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM_RDCAPT1_PDIF_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_CA2P = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT1_CA2P_M = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT1_CA2P_S = @as(c_uint, 3);
pub const LRFDMDM_RDCAPT1_CA2P_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM_RDCAPT1_CA2P_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_MAFI = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT1_MAFI_M = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT1_MAFI_S = @as(c_uint, 2);
pub const LRFDMDM_RDCAPT1_MAFI_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM_RDCAPT1_MAFI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_DSBU = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT1_DSBU_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT1_DSBU_S = @as(c_uint, 1);
pub const LRFDMDM_RDCAPT1_DSBU_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM_RDCAPT1_DSBU_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RDCAPT1_MLSEBIT = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT1_MLSEBIT_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT1_MLSEBIT_S = @as(c_uint, 0);
pub const LRFDMDM_RDCAPT1_MLSEBIT_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_RDCAPT1_MLSEBIT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_FECAPT0_VAL_W = @as(c_uint, 13);
pub const LRFDMDM_FECAPT0_VAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_FECAPT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_FECAPT0_VAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_FECAPT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_FECAPT1_VAL_W = @as(c_uint, 13);
pub const LRFDMDM_FECAPT1_VAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_FECAPT1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_FECAPT1_VAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM_FECAPT1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DSCAPT0_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_DSCAPT0_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_DSCAPT0_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DSCAPT1_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_DSCAPT1_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_DSCAPT1_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DSCAPT2_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_DSCAPT2_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT2_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_DSCAPT2_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DSCAPT3_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_DSCAPT3_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT3_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_DSCAPT3_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_DSCAPT3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU1_MAFCCOMPVAL_W = @as(c_uint, 8);
pub const LRFDMDM_DEMSWQU1_MAFCCOMPVAL_M = @as(c_uint, 0x000003FC);
pub const LRFDMDM_DEMSWQU1_MAFCCOMPVAL_S = @as(c_uint, 2);
pub const LRFDMDM_DEMSWQU1_MAFCCOMPVAL_ALLONES = @as(c_uint, 0x000003FC);
pub const LRFDMDM_DEMSWQU1_MAFCCOMPVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU1_SWSEL = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMSWQU1_SWSEL_M = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMSWQU1_SWSEL_S = @as(c_uint, 1);
pub const LRFDMDM_DEMSWQU1_SWSEL_B = @as(c_uint, 0x00000002);
pub const LRFDMDM_DEMSWQU1_SWSEL_A = @as(c_uint, 0x00000000);
pub const LRFDMDM_DEMSWQU1_SYNCED = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMSWQU1_SYNCED_M = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMSWQU1_SYNCED_S = @as(c_uint, 0);
pub const LRFDMDM_DEMSWQU1_SYNCED_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_DEMSWQU1_SYNCED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO7_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO7_M = @as(c_uint, 0x0000C000);
pub const LRFDMDM_GPOCTRL0_GPO7_S = @as(c_uint, 14);
pub const LRFDMDM_GPOCTRL0_GPO7_THREE = @as(c_uint, 0x0000C000);
pub const LRFDMDM_GPOCTRL0_GPO7_TWO = @as(c_uint, 0x00008000);
pub const LRFDMDM_GPOCTRL0_GPO7_TOPSM_WAIT = @as(c_uint, 0x00004000);
pub const LRFDMDM_GPOCTRL0_GPO7_SW7 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO6_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO6_M = @as(c_uint, 0x00003000);
pub const LRFDMDM_GPOCTRL0_GPO6_S = @as(c_uint, 12);
pub const LRFDMDM_GPOCTRL0_GPO6_THREE = @as(c_uint, 0x00003000);
pub const LRFDMDM_GPOCTRL0_GPO6_TWO = @as(c_uint, 0x00002000);
pub const LRFDMDM_GPOCTRL0_GPO6_TRANSPARENT_OUT = @as(c_uint, 0x00001000);
pub const LRFDMDM_GPOCTRL0_GPO6_SW6 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO5_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO5_M = @as(c_uint, 0x00000C00);
pub const LRFDMDM_GPOCTRL0_GPO5_S = @as(c_uint, 10);
pub const LRFDMDM_GPOCTRL0_GPO5_THREE = @as(c_uint, 0x00000C00);
pub const LRFDMDM_GPOCTRL0_GPO5_TWO = @as(c_uint, 0x00000800);
pub const LRFDMDM_GPOCTRL0_GPO5_DEM_OUT_WORD = @as(c_uint, 0x00000400);
pub const LRFDMDM_GPOCTRL0_GPO5_SW5 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO4_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO4_M = @as(c_uint, 0x00000300);
pub const LRFDMDM_GPOCTRL0_GPO4_S = @as(c_uint, 8);
pub const LRFDMDM_GPOCTRL0_GPO4_THREE = @as(c_uint, 0x00000300);
pub const LRFDMDM_GPOCTRL0_GPO4_TWO = @as(c_uint, 0x00000200);
pub const LRFDMDM_GPOCTRL0_GPO4_CORR_PEAK_C = @as(c_uint, 0x00000100);
pub const LRFDMDM_GPOCTRL0_GPO4_SW4 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO3_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO3_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM_GPOCTRL0_GPO3_S = @as(c_uint, 6);
pub const LRFDMDM_GPOCTRL0_GPO3_THREE = @as(c_uint, 0x000000C0);
pub const LRFDMDM_GPOCTRL0_GPO3_TWO = @as(c_uint, 0x00000080);
pub const LRFDMDM_GPOCTRL0_GPO3_CORR_PEAK_B = @as(c_uint, 0x00000040);
pub const LRFDMDM_GPOCTRL0_GPO3_SW3 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO2_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO2_M = @as(c_uint, 0x00000030);
pub const LRFDMDM_GPOCTRL0_GPO2_S = @as(c_uint, 4);
pub const LRFDMDM_GPOCTRL0_GPO2_THREE = @as(c_uint, 0x00000030);
pub const LRFDMDM_GPOCTRL0_GPO2_TWO = @as(c_uint, 0x00000020);
pub const LRFDMDM_GPOCTRL0_GPO2_CORR_PEAK_A = @as(c_uint, 0x00000010);
pub const LRFDMDM_GPOCTRL0_GPO2_SW2 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO1_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO1_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM_GPOCTRL0_GPO1_S = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO1_THREE = @as(c_uint, 0x0000000C);
pub const LRFDMDM_GPOCTRL0_GPO1_TWO = @as(c_uint, 0x00000008);
pub const LRFDMDM_GPOCTRL0_GPO1_HWCLK1 = @as(c_uint, 0x00000004);
pub const LRFDMDM_GPOCTRL0_GPO1_SW1 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL0_GPO0_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL0_GPO0_M = @as(c_uint, 0x00000003);
pub const LRFDMDM_GPOCTRL0_GPO0_S = @as(c_uint, 0);
pub const LRFDMDM_GPOCTRL0_GPO0_THREE = @as(c_uint, 0x00000003);
pub const LRFDMDM_GPOCTRL0_GPO0_LOOPBACK = @as(c_uint, 0x00000002);
pub const LRFDMDM_GPOCTRL0_GPO0_HWCLK0 = @as(c_uint, 0x00000001);
pub const LRFDMDM_GPOCTRL0_GPO0_SW0 = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL1_HWCLKSTRETCH_W = @as(c_uint, 2);
pub const LRFDMDM_GPOCTRL1_HWCLKSTRETCH_M = @as(c_uint, 0x0000C000);
pub const LRFDMDM_GPOCTRL1_HWCLKSTRETCH_S = @as(c_uint, 14);
pub const LRFDMDM_GPOCTRL1_HWCLKSTRETCH_ONE = @as(c_uint, 0x00004000);
pub const LRFDMDM_GPOCTRL1_HWCLKSTRETCH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX1_W = @as(c_uint, 3);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX1_M = @as(c_uint, 0x00003800);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX1_S = @as(c_uint, 11);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX1_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX0_W = @as(c_uint, 3);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX0_M = @as(c_uint, 0x00000700);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX0_S = @as(c_uint, 8);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX0_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM_GPOCTRL1_HWCLKMUX0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_GPOCTRL1_SW_W = @as(c_uint, 8);
pub const LRFDMDM_GPOCTRL1_SW_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_GPOCTRL1_SW_S = @as(c_uint, 0);
pub const LRFDMDM_GPOCTRL1_SW_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM_GPOCTRL1_SW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFERSSI_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_RFERSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFERSSI_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFERSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFERSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFEMAXRSSI_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_RFEMAXRSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFEMAXRSSI_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFEMAXRSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFEMAXRSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_RFEDBGAIN_VAL_W = @as(c_uint, 8);
pub const LRFDMDM_RFEDBGAIN_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFEDBGAIN_VAL_S = @as(c_uint, 0);
pub const LRFDMDM_RFEDBGAIN_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM_RFEDBGAIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYNC0_SWA15C0_W = @as(c_uint, 16);
pub const LRFDMDM_SYNC0_SWA15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC0_SWA15C0_S = @as(c_uint, 0);
pub const LRFDMDM_SYNC0_SWA15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC0_SWA15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYNC1_SWA31C16_W = @as(c_uint, 16);
pub const LRFDMDM_SYNC1_SWA31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC1_SWA31C16_S = @as(c_uint, 0);
pub const LRFDMDM_SYNC1_SWA31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC1_SWA31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYNC2_SWB15C0_W = @as(c_uint, 16);
pub const LRFDMDM_SYNC2_SWB15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC2_SWB15C0_S = @as(c_uint, 0);
pub const LRFDMDM_SYNC2_SWB15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC2_SWB15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM_SYNC3_SWB31C16_W = @as(c_uint, 16);
pub const LRFDMDM_SYNC3_SWB31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC3_SWB31C16_S = @as(c_uint, 0);
pub const LRFDMDM_SYNC3_SWB31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM_SYNC3_SWB31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const __HW_LRFDMDM32_H__ = "";
pub const LRFDMDM32_O_FWSRC_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_O_INIT = @as(c_uint, 0x00000004);
pub const LRFDMDM32_O_DEMENABLE1_DEMENABLE0 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_O_DEMINIT1_DEMINIT0 = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_O_STRB1_STRB0 = @as(c_uint, 0x00000010);
pub const LRFDMDM32_O_EVT1_EVT0 = @as(c_uint, 0x00000014);
pub const LRFDMDM32_O_EVT2 = @as(c_uint, 0x00000018);
pub const LRFDMDM32_O_EVTMSK1_EVTMSK0 = @as(c_uint, 0x0000001C);
pub const LRFDMDM32_O_EVTMSK2 = @as(c_uint, 0x00000020);
pub const LRFDMDM32_O_EVTCLR1_EVTCLR0 = @as(c_uint, 0x00000024);
pub const LRFDMDM32_O_EVTCLR2 = @as(c_uint, 0x00000028);
pub const LRFDMDM32_O_API_PDREQ = @as(c_uint, 0x0000002C);
pub const LRFDMDM32_O_CMDPAR1_CMDPAR0 = @as(c_uint, 0x00000030);
pub const LRFDMDM32_O_MSGBOX_CMDPAR2 = @as(c_uint, 0x00000034);
pub const LRFDMDM32_O_FIFOWR_FREQ = @as(c_uint, 0x00000038);
pub const LRFDMDM32_O_FIFORD = @as(c_uint, 0x0000003C);
pub const LRFDMDM32_O_FIFORDCTRL_FIFOWRCTRL = @as(c_uint, 0x00000040);
pub const LRFDMDM32_O_FIFOSTA = @as(c_uint, 0x00000044);
pub const LRFDMDM32_O_RFEDATIN0_RFEDATOUT0 = @as(c_uint, 0x00000048);
pub const LRFDMDM32_O_RFECMDIN_RFECMDOUT = @as(c_uint, 0x0000004C);
pub const LRFDMDM32_O_PBEDATIN0_PBEDATOUT0 = @as(c_uint, 0x00000050);
pub const LRFDMDM32_O_PBECMDIN_PBECMDOUT = @as(c_uint, 0x00000054);
pub const LRFDMDM32_O_PBEEVTMUX_LQIEST = @as(c_uint, 0x00000058);
pub const LRFDMDM32_O_SYSTIMEVTMUX1_SYSTIMEVTMUX0 = @as(c_uint, 0x0000005C);
pub const LRFDMDM32_O_MODPRECTRL_ADCDIGCONF = @as(c_uint, 0x00000060);
pub const LRFDMDM32_O_MODSYMMAP1_MODSYMMAP0 = @as(c_uint, 0x00000064);
pub const LRFDMDM32_O_BAUD_MODSOFTTX = @as(c_uint, 0x00000068);
pub const LRFDMDM32_O_MODMAIN_BAUDPRE = @as(c_uint, 0x0000006C);
pub const LRFDMDM32_O_DEMMISC1_DEMMISC0 = @as(c_uint, 0x00000070);
pub const LRFDMDM32_O_DEMMISC3_DEMMISC2 = @as(c_uint, 0x00000074);
pub const LRFDMDM32_O_DEMDSBU_DEMIQMC0 = @as(c_uint, 0x00000078);
pub const LRFDMDM32_O_DEMFIDC0_DEMCODC0 = @as(c_uint, 0x0000007C);
pub const LRFDMDM32_O_DEMDSXB0_DEMFEXB0 = @as(c_uint, 0x00000080);
pub const LRFDMDM32_O_DEMMAFI0_DEMFIFE0 = @as(c_uint, 0x00000084);
pub const LRFDMDM32_O_DEMMAFI2_DEMMAFI1 = @as(c_uint, 0x00000088);
pub const LRFDMDM32_O_DEMC1BE1_DEMC1BE0 = @as(c_uint, 0x0000008C);
pub const LRFDMDM32_O_SPARE0_DEMC1BE2 = @as(c_uint, 0x00000090);
pub const LRFDMDM32_O_SPARE2_SPARE1 = @as(c_uint, 0x00000094);
pub const LRFDMDM32_O_DEMSWQU0_SPARE3 = @as(c_uint, 0x00000098);
pub const LRFDMDM32_O_DEMC1BEREF1_DEMC1BEREF0 = @as(c_uint, 0x0000009C);
pub const LRFDMDM32_O_DEMC1BEREF3_DEMC1BEREF2 = @as(c_uint, 0x000000A0);
pub const LRFDMDM32_O_MODPREAMBLE_MODCTRL = @as(c_uint, 0x000000A4);
pub const LRFDMDM32_O_DEMFRAC1_DEMFRAC0 = @as(c_uint, 0x000000A8);
pub const LRFDMDM32_O_DEMFRAC3_DEMFRAC2 = @as(c_uint, 0x000000AC);
pub const LRFDMDM32_O_DEMCODC2_DEMCODC1 = @as(c_uint, 0x000000B0);
pub const LRFDMDM32_O_DEMFIDC2_DEMFIDC1 = @as(c_uint, 0x000000B4);
pub const LRFDMDM32_O_DEMMAFC0_DEMFIFE1 = @as(c_uint, 0x000000B8);
pub const LRFDMDM32_O_DEMSWIMBAL_DEMMAFI4 = @as(c_uint, 0x000000BC);
pub const LRFDMDM32_O_DEMDEBUG_DEMSOFTPDIFF = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_O_VITCOMPUTE_VITCTRL = @as(c_uint, 0x000000C4);
pub const LRFDMDM32_O_VITSTATE_VITAPMRDBACK = @as(c_uint, 0x000000C8);
pub const LRFDMDM32_O_VITBRMETRIC32_VITBRMETRIC10 = @as(c_uint, 0x000000CC);
pub const LRFDMDM32_O_VITBRMETRIC76_VITBRMETRIC54 = @as(c_uint, 0x000000D0);
pub const LRFDMDM32_O_TIMCTL = @as(c_uint, 0x000000F0);
pub const LRFDMDM32_O_TIMPER_TIMINC = @as(c_uint, 0x000000F4);
pub const LRFDMDM32_O_TIMCAPT_TIMCNT = @as(c_uint, 0x000000F8);
pub const LRFDMDM32_O_COUNT1IN_TIMEBASE = @as(c_uint, 0x000000FC);
pub const LRFDMDM32_O_COUNT1RES = @as(c_uint, 0x00000100);
pub const LRFDMDM32_O_BRMACC2_BRMACC1 = @as(c_uint, 0x00000104);
pub const LRFDMDM32_O_MCETRCSTAT_MCETRCCTRL = @as(c_uint, 0x00000108);
pub const LRFDMDM32_O_MCETRCPAR0_MCETRCCMD = @as(c_uint, 0x0000010C);
pub const LRFDMDM32_O_RDCAPT0_MCETRCPAR1 = @as(c_uint, 0x00000110);
pub const LRFDMDM32_O_FECAPT0_RDCAPT1 = @as(c_uint, 0x00000114);
pub const LRFDMDM32_O_DSCAPT0_FECAPT1 = @as(c_uint, 0x00000118);
pub const LRFDMDM32_O_DSCAPT2_DSCAPT1 = @as(c_uint, 0x0000011C);
pub const LRFDMDM32_O_DEMSWQU1_DSCAPT3 = @as(c_uint, 0x00000120);
pub const LRFDMDM32_O_GPOCTRL1_GPOCTRL0 = @as(c_uint, 0x00000124);
pub const LRFDMDM32_O_RFEMAXRSSI_RFERSSI = @as(c_uint, 0x00000128);
pub const LRFDMDM32_O_SYNC0_RFEDBGAIN = @as(c_uint, 0x0000012C);
pub const LRFDMDM32_O_SYNC2_SYNC1 = @as(c_uint, 0x00000130);
pub const LRFDMDM32_O_SYNC3 = @as(c_uint, 0x00000134);
pub const LRFDMDM32_FWSRC_ENABLE_DATARAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_DATARAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_DATARAM_S = @as(c_uint, 18);
pub const LRFDMDM32_FWSRC_ENABLE_DATARAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_DATARAM_MDMRAM = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_FWRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_FWRAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_FWRAM_S = @as(c_uint, 17);
pub const LRFDMDM32_FWSRC_ENABLE_FWRAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_FWRAM_MDMRAM = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_BANK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_BANK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_BANK_S = @as(c_uint, 16);
pub const LRFDMDM32_FWSRC_ENABLE_BANK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FWSRC_ENABLE_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_ADCDIG = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FWSRC_ENABLE_ADCDIG_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FWSRC_ENABLE_ADCDIG_S = @as(c_uint, 5);
pub const LRFDMDM32_FWSRC_ENABLE_ADCDIG_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FWSRC_ENABLE_ADCDIG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_DEMODULATOR = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FWSRC_ENABLE_DEMODULATOR_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FWSRC_ENABLE_DEMODULATOR_S = @as(c_uint, 4);
pub const LRFDMDM32_FWSRC_ENABLE_DEMODULATOR_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FWSRC_ENABLE_DEMODULATOR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_MODULATOR = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FWSRC_ENABLE_MODULATOR_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FWSRC_ENABLE_MODULATOR_S = @as(c_uint, 3);
pub const LRFDMDM32_FWSRC_ENABLE_MODULATOR_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FWSRC_ENABLE_MODULATOR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_TIMEBASE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FWSRC_ENABLE_TIMEBASE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FWSRC_ENABLE_TIMEBASE_S = @as(c_uint, 2);
pub const LRFDMDM32_FWSRC_ENABLE_TIMEBASE_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FWSRC_ENABLE_TIMEBASE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_TXRXFIFO = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FWSRC_ENABLE_TXRXFIFO_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FWSRC_ENABLE_TXRXFIFO_S = @as(c_uint, 1);
pub const LRFDMDM32_FWSRC_ENABLE_TXRXFIFO_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FWSRC_ENABLE_TXRXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FWSRC_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FWSRC_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FWSRC_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDMDM32_FWSRC_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FWSRC_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_ADCDIG = @as(c_uint, 0x00000020);
pub const LRFDMDM32_INIT_ADCDIG_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_INIT_ADCDIG_S = @as(c_uint, 5);
pub const LRFDMDM32_INIT_ADCDIG_RESET = @as(c_uint, 0x00000020);
pub const LRFDMDM32_INIT_ADCDIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_DEMODULATOR = @as(c_uint, 0x00000010);
pub const LRFDMDM32_INIT_DEMODULATOR_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_INIT_DEMODULATOR_S = @as(c_uint, 4);
pub const LRFDMDM32_INIT_DEMODULATOR_RESET = @as(c_uint, 0x00000010);
pub const LRFDMDM32_INIT_DEMODULATOR_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_MODULATOR = @as(c_uint, 0x00000008);
pub const LRFDMDM32_INIT_MODULATOR_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_INIT_MODULATOR_S = @as(c_uint, 3);
pub const LRFDMDM32_INIT_MODULATOR_RESET = @as(c_uint, 0x00000008);
pub const LRFDMDM32_INIT_MODULATOR_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_TIMEBASE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_INIT_TIMEBASE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_INIT_TIMEBASE_S = @as(c_uint, 2);
pub const LRFDMDM32_INIT_TIMEBASE_RESET = @as(c_uint, 0x00000004);
pub const LRFDMDM32_INIT_TIMEBASE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_TXRXFIFO = @as(c_uint, 0x00000002);
pub const LRFDMDM32_INIT_TXRXFIFO_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_INIT_TXRXFIFO_S = @as(c_uint, 1);
pub const LRFDMDM32_INIT_TXRXFIFO_RESET = @as(c_uint, 0x00000002);
pub const LRFDMDM32_INIT_TXRXFIFO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDMDM32_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDMDM32_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDMDM32_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_VITE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_VITE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_VITE_S = @as(c_uint, 29);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_VITE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_VITE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MLSE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MLSE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MLSE_S = @as(c_uint, 28);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MLSE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MLSE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SOFD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SOFD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SOFD_S = @as(c_uint, 27);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SOFD_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SOFD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SWQU = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SWQU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SWQU_S = @as(c_uint, 26);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SWQU_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_SWQU_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFC_S = @as(c_uint, 25);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFC_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFI_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFI_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MAFI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIFE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIFE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIFE_S = @as(c_uint, 23);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIFE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIFE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_PDIF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_PDIF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_PDIF_S = @as(c_uint, 22);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_PDIF_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_PDIF_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CA2P = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CA2P_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CA2P_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CA2P_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CA2P_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_C1BE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_C1BE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_C1BE_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_C1BE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_C1BE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_LQIE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_LQIE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_LQIE_S = @as(c_uint, 19);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_LQIE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_LQIE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_F4BA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_F4BA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_F4BA_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_F4BA_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_F4BA_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_STIM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_STIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_STIM_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_STIM_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_STIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_DSBU = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_DSBU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_DSBU_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_DSBU_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_DSBU_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FRAC = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FRAC_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FRAC_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FRAC_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FRAC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIDC = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIDC_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIDC_S = @as(c_uint, 7);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIDC_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_FIDC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CHFI = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CHFI_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CHFI_S = @as(c_uint, 6);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CHFI_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CHFI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_BDEC = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_BDEC_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_BDEC_S = @as(c_uint, 5);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_BDEC_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_BDEC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_IQMC = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_IQMC_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_IQMC_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_IQMC_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_IQMC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE1_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE1_S = @as(c_uint, 3);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE1_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE0 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE0_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE0_S = @as(c_uint, 2);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE0_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_MGE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CODC = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CODC_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CODC_S = @as(c_uint, 1);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CODC_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CODC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CMIX_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CMIX_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CMIX_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMENABLE1_DEMENABLE0_CMIX_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_VITE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_VITE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_VITE_S = @as(c_uint, 29);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_VITE_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_VITE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MLSE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MLSE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MLSE_S = @as(c_uint, 28);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MLSE_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MLSE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SOFD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SOFD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SOFD_S = @as(c_uint, 27);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SOFD_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SOFD_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SWQU = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SWQU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SWQU_S = @as(c_uint, 26);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SWQU_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_SWQU_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFC_S = @as(c_uint, 25);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFC_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFI_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFI_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MAFI_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIFE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIFE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIFE_S = @as(c_uint, 23);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIFE_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIFE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_PDIF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_PDIF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_PDIF_S = @as(c_uint, 22);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_PDIF_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_PDIF_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CA2P = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CA2P_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CA2P_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CA2P_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CA2P_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_C1BE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_C1BE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_C1BE_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_C1BE_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_C1BE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_LQIE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_LQIE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_LQIE_S = @as(c_uint, 19);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_LQIE_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_LQIE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_F4BA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_F4BA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_F4BA_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_F4BA_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_F4BA_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_STIM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_STIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_STIM_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_STIM_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_STIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_DSBU = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_DSBU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_DSBU_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_DSBU_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_DSBU_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FRAC = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FRAC_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FRAC_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FRAC_RESET = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FRAC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIDC = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIDC_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIDC_S = @as(c_uint, 7);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIDC_RESET = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_FIDC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CHFI = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CHFI_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CHFI_S = @as(c_uint, 6);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CHFI_RESET = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CHFI_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_BDEC = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_BDEC_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_BDEC_S = @as(c_uint, 5);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_BDEC_RESET = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_BDEC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_IQMC = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_IQMC_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_IQMC_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_IQMC_RESET = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_IQMC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE1_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE1_S = @as(c_uint, 3);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE1_RESET = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE0 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE0_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE0_S = @as(c_uint, 2);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE0_RESET = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_MGE0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CODC = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CODC_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CODC_S = @as(c_uint, 1);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CODC_RESET = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CODC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CMIX_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CMIX_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CMIX_RESET = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMINIT1_DEMINIT0_CMIX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_S2RTRG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_S2RTRG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_S2RTRG_S = @as(c_uint, 29);
pub const LRFDMDM32_STRB1_STRB0_S2RTRG_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_S2RTRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_DMATRG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_DMATRG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_DMATRG_S = @as(c_uint, 28);
pub const LRFDMDM32_STRB1_STRB0_DMATRG_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_DMATRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT2_S = @as(c_uint, 27);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT1_S = @as(c_uint, 26);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT0_S = @as(c_uint, 25);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_SYSTCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKAB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKAB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKAB_S = @as(c_uint, 24);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKAB_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKAB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKC_S = @as(c_uint, 23);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKC_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKB_S = @as(c_uint, 22);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKB_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKA_S = @as(c_uint, 21);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKA_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEPEAKA_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEADVANCE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEADVANCE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEADVANCE_S = @as(c_uint, 20);
pub const LRFDMDM32_STRB1_STRB0_C1BEADVANCE_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEADVANCE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BESTALL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BESTALL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BESTALL_S = @as(c_uint, 19);
pub const LRFDMDM32_STRB1_STRB0_C1BESTALL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BESTALL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_W = @as(c_uint, 2);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_S = @as(c_uint, 17);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_ROT16R = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_ROT1L = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_ROT1R = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BEROT_ROT0 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_C1BECOPY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BECOPY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BECOPY_S = @as(c_uint, 16);
pub const LRFDMDM32_STRB1_STRB0_C1BECOPY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_STRB1_STRB0_C1BECOPY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_TIMBADVANCE = @as(c_uint, 0x00000800);
pub const LRFDMDM32_STRB1_STRB0_TIMBADVANCE_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_STRB1_STRB0_TIMBADVANCE_S = @as(c_uint, 11);
pub const LRFDMDM32_STRB1_STRB0_TIMBADVANCE_ON = @as(c_uint, 0x00000800);
pub const LRFDMDM32_STRB1_STRB0_TIMBADVANCE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_TIMBSTALL = @as(c_uint, 0x00000400);
pub const LRFDMDM32_STRB1_STRB0_TIMBSTALL_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_STRB1_STRB0_TIMBSTALL_S = @as(c_uint, 10);
pub const LRFDMDM32_STRB1_STRB0_TIMBSTALL_ON = @as(c_uint, 0x00000400);
pub const LRFDMDM32_STRB1_STRB0_TIMBSTALL_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT5 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_STRB1_STRB0_EVT5_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_STRB1_STRB0_EVT5_S = @as(c_uint, 9);
pub const LRFDMDM32_STRB1_STRB0_EVT5_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM32_STRB1_STRB0_EVT5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT4 = @as(c_uint, 0x00000100);
pub const LRFDMDM32_STRB1_STRB0_EVT4_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_STRB1_STRB0_EVT4_S = @as(c_uint, 8);
pub const LRFDMDM32_STRB1_STRB0_EVT4_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM32_STRB1_STRB0_EVT4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_MLSETERM = @as(c_uint, 0x00000080);
pub const LRFDMDM32_STRB1_STRB0_MLSETERM_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_STRB1_STRB0_MLSETERM_S = @as(c_uint, 7);
pub const LRFDMDM32_STRB1_STRB0_MLSETERM_ON = @as(c_uint, 0x00000080);
pub const LRFDMDM32_STRB1_STRB0_MLSETERM_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT3 = @as(c_uint, 0x00000040);
pub const LRFDMDM32_STRB1_STRB0_EVT3_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_STRB1_STRB0_EVT3_S = @as(c_uint, 6);
pub const LRFDMDM32_STRB1_STRB0_EVT3_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_STRB1_STRB0_EVT3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT2 = @as(c_uint, 0x00000020);
pub const LRFDMDM32_STRB1_STRB0_EVT2_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_STRB1_STRB0_EVT2_S = @as(c_uint, 5);
pub const LRFDMDM32_STRB1_STRB0_EVT2_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_STRB1_STRB0_EVT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT1 = @as(c_uint, 0x00000010);
pub const LRFDMDM32_STRB1_STRB0_EVT1_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_STRB1_STRB0_EVT1_S = @as(c_uint, 4);
pub const LRFDMDM32_STRB1_STRB0_EVT1_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM32_STRB1_STRB0_EVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_EVT0 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_STRB1_STRB0_EVT0_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_STRB1_STRB0_EVT0_S = @as(c_uint, 3);
pub const LRFDMDM32_STRB1_STRB0_EVT0_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_STRB1_STRB0_EVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_TIMBALIGN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_STRB1_STRB0_TIMBALIGN_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_STRB1_STRB0_TIMBALIGN_S = @as(c_uint, 2);
pub const LRFDMDM32_STRB1_STRB0_TIMBALIGN_ON = @as(c_uint, 0x00000004);
pub const LRFDMDM32_STRB1_STRB0_TIMBALIGN_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_DSBURST = @as(c_uint, 0x00000002);
pub const LRFDMDM32_STRB1_STRB0_DSBURST_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_STRB1_STRB0_DSBURST_S = @as(c_uint, 1);
pub const LRFDMDM32_STRB1_STRB0_DSBURST_RESTART = @as(c_uint, 0x00000002);
pub const LRFDMDM32_STRB1_STRB0_DSBURST_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_STRB1_STRB0_CMDDONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_STRB1_STRB0_CMDDONE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_STRB1_STRB0_CMDDONE_S = @as(c_uint, 0);
pub const LRFDMDM32_STRB1_STRB0_CMDDONE_YES = @as(c_uint, 0x00000001);
pub const LRFDMDM32_STRB1_STRB0_CMDDONE_NO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVT1_EVT0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVT1_EVT0_REFCLK_S = @as(c_uint, 24);
pub const LRFDMDM32_EVT1_EVT0_REFCLK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVT1_EVT0_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVT1_EVT0_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVT1_EVT0_S2RSTOP_S = @as(c_uint, 23);
pub const LRFDMDM32_EVT1_EVT0_S2RSTOP_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVT1_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_SWQUFALSESYNC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUFALSESYNC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUFALSESYNC_S = @as(c_uint, 22);
pub const LRFDMDM32_EVT1_EVT0_SWQUFALSESYNC_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUFALSESYNC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_SWQUSYNCED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUSYNCED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUSYNCED_S = @as(c_uint, 21);
pub const LRFDMDM32_EVT1_EVT0_SWQUSYNCED_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVT1_EVT0_SWQUSYNCED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUDF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUDF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUDF_S = @as(c_uint, 20);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUDF_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUDF_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FIFORVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFORVALID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFORVALID_S = @as(c_uint, 19);
pub const LRFDMDM32_EVT1_EVT0_FIFORVALID_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFORVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FIFOWREADY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFOWREADY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFOWREADY_S = @as(c_uint, 18);
pub const LRFDMDM32_EVT1_EVT0_FIFOWREADY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVT1_EVT0_FIFOWREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUD_S = @as(c_uint, 17);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUD_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVT1_EVT0_CLKENBAUD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_PREAMBLEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVT1_EVT0_PREAMBLEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVT1_EVT0_PREAMBLEDONE_S = @as(c_uint, 16);
pub const LRFDMDM32_EVT1_EVT0_PREAMBLEDONE_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVT1_EVT0_PREAMBLEDONE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT1_EVT0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT1_EVT0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM32_EVT1_EVT0_PBEDAT_ONE = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT1_EVT0_PBEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT1_EVT0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT1_EVT0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM32_EVT1_EVT0_PBECMD_ONE = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT1_EVT0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVT1_EVT0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVT1_EVT0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM32_EVT1_EVT0_RFEDAT_ONE = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVT1_EVT0_RFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT1_EVT0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT1_EVT0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM32_EVT1_EVT0_BDEC_ONE = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT1_EVT0_BDEC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT1_EVT0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT1_EVT0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM32_EVT1_EVT0_FRAC_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT1_EVT0_FRAC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT2_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT1_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT0_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT1_EVT0_SYSTIMEVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT1_EVT0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT1_EVT0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM32_EVT1_EVT0_FIFOWR_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT1_EVT0_FIFOWR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT1_EVT0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT1_EVT0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM32_EVT1_EVT0_COUNTER_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT1_EVT0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT1_EVT0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT1_EVT0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM32_EVT1_EVT0_RFECMD_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT1_EVT0_RFECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT1_EVT0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT1_EVT0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM32_EVT1_EVT0_FIFOOVFL_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT1_EVT0_FIFOOVFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT1_EVT0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT1_EVT0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM32_EVT1_EVT0_FIFOUNFL_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT1_EVT0_FIFOUNFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT1_EVT0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT1_EVT0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM32_EVT1_EVT0_CLKEN4BAUD_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT1_EVT0_CLKEN4BAUD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT1_EVT0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT1_EVT0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM32_EVT1_EVT0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT1_EVT0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT1_EVT0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT1_EVT0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT1_EVT0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM32_EVT1_EVT0_MDMAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT1_EVT0_MDMAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM32_EVT2_GPI1_ONE = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVT2_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM32_EVT2_GPI0_ONE = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVT2_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM32_EVT2_C1BEBLOADED_ONE = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVT2_C1BEBLOADED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM32_EVT2_C1BECMBANY_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVT2_C1BECMBANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM32_EVT2_C1BECMBNEG_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVT2_C1BECMBNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM32_EVT2_C1BECMBPOS_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVT2_C1BECMBPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM32_EVT2_C1BECANY_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVT2_C1BECANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM32_EVT2_C1BECNEG_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVT2_C1BECNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM32_EVT2_C1BECPOS_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVT2_C1BECPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM32_EVT2_C1BEBANY_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVT2_C1BEBANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM32_EVT2_C1BEBNEG_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVT2_C1BEBNEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM32_EVT2_C1BEBPOS_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVT2_C1BEBPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM32_EVT2_C1BEAANY_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVT2_C1BEAANY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM32_EVT2_C1BEANEG_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVT2_C1BEANEG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVT2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM32_EVT2_C1BEAPOS_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVT2_C1BEAPOS_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_REFCLK_S = @as(c_uint, 24);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_REFCLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_REFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_S2RSTOP_S = @as(c_uint, 23);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_S2RSTOP_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUFALSESYNC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUFALSESYNC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUFALSESYNC_S = @as(c_uint, 22);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUFALSESYNC_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUFALSESYNC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUSYNCED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUSYNCED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUSYNCED_S = @as(c_uint, 21);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUSYNCED_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SWQUSYNCED_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUDF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUDF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUDF_S = @as(c_uint, 20);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUDF_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUDF_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFORVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFORVALID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFORVALID_S = @as(c_uint, 19);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFORVALID_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFORVALID_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWREADY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWREADY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWREADY_S = @as(c_uint, 18);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWREADY_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWREADY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUD_S = @as(c_uint, 17);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUD_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKENBAUD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PREAMBLEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PREAMBLEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PREAMBLEDONE_S = @as(c_uint, 16);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PREAMBLEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PREAMBLEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBEDAT_EN = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBECMD_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_PBECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFEDAT_EN = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_BDEC_EN = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_BDEC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FRAC_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FRAC_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT2_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT1_EN = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT0_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_SYSTIMEVT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWR_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOWR_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_COUNTER_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_COUNTER_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFECMD_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_RFECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOOVFL_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOOVFL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOUNFL_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_FIFOUNFL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKEN4BAUD_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_CLKEN4BAUD_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_TIMER_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_TIMER_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_MDMAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK1_EVTMSK0_MDMAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM32_EVTMSK2_GPI1_EN = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTMSK2_GPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM32_EVTMSK2_GPI0_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTMSK2_GPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM32_EVTMSK2_C1BEBLOADED_EN = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTMSK2_C1BEBLOADED_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM32_EVTMSK2_C1BECMBANY_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTMSK2_C1BECMBANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM32_EVTMSK2_C1BECMBNEG_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTMSK2_C1BECMBNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM32_EVTMSK2_C1BECMBPOS_EN = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTMSK2_C1BECMBPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM32_EVTMSK2_C1BECANY_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTMSK2_C1BECANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM32_EVTMSK2_C1BECNEG_EN = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTMSK2_C1BECNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM32_EVTMSK2_C1BECPOS_EN = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTMSK2_C1BECPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM32_EVTMSK2_C1BEBANY_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTMSK2_C1BEBANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM32_EVTMSK2_C1BEBNEG_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTMSK2_C1BEBNEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM32_EVTMSK2_C1BEBPOS_EN = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTMSK2_C1BEBPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM32_EVTMSK2_C1BEAANY_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTMSK2_C1BEAANY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM32_EVTMSK2_C1BEANEG_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTMSK2_C1BEANEG_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTMSK2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM32_EVTMSK2_C1BEAPOS_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTMSK2_C1BEAPOS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_REFCLK_S = @as(c_uint, 24);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_REFCLK_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_REFCLK_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_S2RSTOP_S = @as(c_uint, 23);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_S2RSTOP_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_S2RSTOP_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUFALSESYNC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUFALSESYNC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUFALSESYNC_S = @as(c_uint, 22);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUFALSESYNC_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUFALSESYNC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUSYNCED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUSYNCED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUSYNCED_S = @as(c_uint, 21);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUSYNCED_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SWQUSYNCED_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUDF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUDF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUDF_S = @as(c_uint, 20);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUDF_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUDF_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFORVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFORVALID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFORVALID_S = @as(c_uint, 19);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFORVALID_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFORVALID_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWREADY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWREADY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWREADY_S = @as(c_uint, 18);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWREADY_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWREADY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUD_S = @as(c_uint, 17);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUD_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKENBAUD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PREAMBLEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PREAMBLEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PREAMBLEDONE_S = @as(c_uint, 16);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PREAMBLEDONE_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PREAMBLEDONE_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBEDAT = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBEDAT_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBEDAT_S = @as(c_uint, 15);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBEDAT_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBECMD = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBECMD_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBECMD_S = @as(c_uint, 14);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBECMD_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_PBECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFEDAT = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFEDAT_M = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFEDAT_S = @as(c_uint, 13);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFEDAT_CLEAR = @as(c_uint, 0x00002000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_BDEC = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_BDEC_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_BDEC_S = @as(c_uint, 12);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_BDEC_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_BDEC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FRAC = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FRAC_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FRAC_S = @as(c_uint, 11);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FRAC_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FRAC_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT2 = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT2_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT2_S = @as(c_uint, 10);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT2_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT1 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT1_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT1_S = @as(c_uint, 9);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT1_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT0 = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT0_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT0_S = @as(c_uint, 8);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT0_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_SYSTIMEVT0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWR = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWR_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWR_S = @as(c_uint, 7);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWR_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOWR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_COUNTER = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_COUNTER_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_COUNTER_S = @as(c_uint, 6);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_COUNTER_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_COUNTER_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFECMD_S = @as(c_uint, 5);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFECMD_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_RFECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOOVFL = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOOVFL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOOVFL_S = @as(c_uint, 4);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOOVFL_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOOVFL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOUNFL = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOUNFL_S = @as(c_uint, 3);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOUNFL_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_FIFOUNFL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKEN4BAUD = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKEN4BAUD_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKEN4BAUD_S = @as(c_uint, 2);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKEN4BAUD_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_CLKEN4BAUD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_TIMER_S = @as(c_uint, 1);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_TIMER_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_TIMER_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_MDMAPI = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_MDMAPI_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_MDMAPI_S = @as(c_uint, 0);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_MDMAPI_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR1_EVTCLR0_MDMAPI_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_GPI1 = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR2_GPI1_M = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR2_GPI1_S = @as(c_uint, 15);
pub const LRFDMDM32_EVTCLR2_GPI1_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDMDM32_EVTCLR2_GPI1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_GPI0 = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR2_GPI0_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR2_GPI0_S = @as(c_uint, 14);
pub const LRFDMDM32_EVTCLR2_GPI0_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDMDM32_EVTCLR2_GPI0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEBLOADED = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR2_C1BEBLOADED_M = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR2_C1BEBLOADED_S = @as(c_uint, 12);
pub const LRFDMDM32_EVTCLR2_C1BEBLOADED_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDMDM32_EVTCLR2_C1BEBLOADED_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECMBANY = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR2_C1BECMBANY_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR2_C1BECMBANY_S = @as(c_uint, 11);
pub const LRFDMDM32_EVTCLR2_C1BECMBANY_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDMDM32_EVTCLR2_C1BECMBANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECMBNEG = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR2_C1BECMBNEG_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR2_C1BECMBNEG_S = @as(c_uint, 10);
pub const LRFDMDM32_EVTCLR2_C1BECMBNEG_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDMDM32_EVTCLR2_C1BECMBNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECMBPOS = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR2_C1BECMBPOS_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR2_C1BECMBPOS_S = @as(c_uint, 9);
pub const LRFDMDM32_EVTCLR2_C1BECMBPOS_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDMDM32_EVTCLR2_C1BECMBPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECANY = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR2_C1BECANY_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR2_C1BECANY_S = @as(c_uint, 8);
pub const LRFDMDM32_EVTCLR2_C1BECANY_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDMDM32_EVTCLR2_C1BECANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECNEG = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR2_C1BECNEG_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR2_C1BECNEG_S = @as(c_uint, 7);
pub const LRFDMDM32_EVTCLR2_C1BECNEG_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDMDM32_EVTCLR2_C1BECNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BECPOS = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR2_C1BECPOS_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR2_C1BECPOS_S = @as(c_uint, 6);
pub const LRFDMDM32_EVTCLR2_C1BECPOS_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDMDM32_EVTCLR2_C1BECPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEBANY = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR2_C1BEBANY_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR2_C1BEBANY_S = @as(c_uint, 5);
pub const LRFDMDM32_EVTCLR2_C1BEBANY_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDMDM32_EVTCLR2_C1BEBANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEBNEG = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR2_C1BEBNEG_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR2_C1BEBNEG_S = @as(c_uint, 4);
pub const LRFDMDM32_EVTCLR2_C1BEBNEG_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDMDM32_EVTCLR2_C1BEBNEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEBPOS = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR2_C1BEBPOS_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR2_C1BEBPOS_S = @as(c_uint, 3);
pub const LRFDMDM32_EVTCLR2_C1BEBPOS_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDMDM32_EVTCLR2_C1BEBPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEAANY = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR2_C1BEAANY_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR2_C1BEAANY_S = @as(c_uint, 2);
pub const LRFDMDM32_EVTCLR2_C1BEAANY_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDMDM32_EVTCLR2_C1BEAANY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEANEG = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR2_C1BEANEG_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR2_C1BEANEG_S = @as(c_uint, 1);
pub const LRFDMDM32_EVTCLR2_C1BEANEG_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDMDM32_EVTCLR2_C1BEANEG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_EVTCLR2_C1BEAPOS = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR2_C1BEAPOS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR2_C1BEAPOS_S = @as(c_uint, 0);
pub const LRFDMDM32_EVTCLR2_C1BEAPOS_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDMDM32_EVTCLR2_C1BEAPOS_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDMDM32_API_PDREQ_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDMDM32_API_PDREQ_PROTOCOLID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_API_PDREQ_PROTOCOLID_S = @as(c_uint, 20);
pub const LRFDMDM32_API_PDREQ_PROTOCOLID_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_API_PDREQ_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_API_PDREQ_MDMCMD_W = @as(c_uint, 4);
pub const LRFDMDM32_API_PDREQ_MDMCMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_API_PDREQ_MDMCMD_S = @as(c_uint, 16);
pub const LRFDMDM32_API_PDREQ_MDMCMD_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_API_PDREQ_MDMCMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_API_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDMDM32_API_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_API_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDMDM32_API_PDREQ_TOPSMPDREQ_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM32_API_PDREQ_TOPSMPDREQ_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR1_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR1_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_CMDPAR1_CMDPAR0_CMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MSGBOX_CMDPAR2_MSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_MSGBOX_CMDPAR2_MSGBOX_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_MSGBOX_CMDPAR2_MSGBOX_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_MSGBOX_CMDPAR2_MSGBOX_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_MSGBOX_CMDPAR2_MSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MSGBOX_CMDPAR2_CMDPAR2_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_MSGBOX_CMDPAR2_CMDPAR2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_MSGBOX_CMDPAR2_CMDPAR2_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_MSGBOX_CMDPAR2_CMDPAR2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_MSGBOX_CMDPAR2_CMDPAR2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOWR_FREQ_PAYLOADIN_W = @as(c_uint, 16);
pub const LRFDMDM32_FIFOWR_FREQ_PAYLOADIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_FIFOWR_FREQ_PAYLOADIN_S = @as(c_uint, 16);
pub const LRFDMDM32_FIFOWR_FREQ_PAYLOADIN_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_FIFOWR_FREQ_PAYLOADIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOWR_FREQ_OFFSET_W = @as(c_uint, 16);
pub const LRFDMDM32_FIFOWR_FREQ_OFFSET_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_FIFOWR_FREQ_OFFSET_S = @as(c_uint, 0);
pub const LRFDMDM32_FIFOWR_FREQ_OFFSET_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_FIFOWR_FREQ_OFFSET_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFORD_PAYLOADOUT_W = @as(c_uint, 16);
pub const LRFDMDM32_FIFORD_PAYLOADOUT_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_FIFORD_PAYLOADOUT_S = @as(c_uint, 0);
pub const LRFDMDM32_FIFORD_PAYLOADOUT_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_FIFORD_PAYLOADOUT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_W = @as(c_uint, 2);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_S = @as(c_uint, 20);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_PBE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_MODEM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFORDPORT_MDMFIFORD = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_W = @as(c_uint, 4);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_S = @as(c_uint, 16);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS13 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZRD_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_W = @as(c_uint, 2);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_M = @as(c_uint, 0x00000030);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_S = @as(c_uint, 4);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_PBE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_MODEM = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_FIFOWRPORT_MDMFIFOWR = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_W = @as(c_uint, 4);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_S = @as(c_uint, 0);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FIFORDCTRL_FIFOWRCTRL_WORDSZWR_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_FIFOSTA_OVERFLOW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_FIFOSTA_OVERFLOW_S = @as(c_uint, 21);
pub const LRFDMDM32_FIFOSTA_OVERFLOW_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_FIFOSTA_OVERFLOW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_ALMOSTFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTFULL_S = @as(c_uint, 20);
pub const LRFDMDM32_FIFOSTA_ALMOSTFULL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_ALMOSTEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTEMPTY_S = @as(c_uint, 19);
pub const LRFDMDM32_FIFOSTA_ALMOSTEMPTY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_FIFOSTA_ALMOSTEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_UNDERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FIFOSTA_UNDERFLOW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FIFOSTA_UNDERFLOW_S = @as(c_uint, 18);
pub const LRFDMDM32_FIFOSTA_UNDERFLOW_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_FIFOSTA_UNDERFLOW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_RXVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FIFOSTA_RXVALID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FIFOSTA_RXVALID_S = @as(c_uint, 17);
pub const LRFDMDM32_FIFOSTA_RXVALID_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_FIFOSTA_RXVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FIFOSTA_TXREADY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FIFOSTA_TXREADY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FIFOSTA_TXREADY_S = @as(c_uint, 16);
pub const LRFDMDM32_FIFOSTA_TXREADY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_FIFOSTA_TXREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATIN0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATIN0_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATIN0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_RFEDATIN0_RFEDATOUT0_RFEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDIN_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDIN_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDIN_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_RFECMDIN_RFECMDOUT_RFECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_SEL_W = @as(c_uint, 6);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_SEL_S = @as(c_uint, 16);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_SEL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_SEL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_PBEEVTMUX_LQIEST_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL2_W = @as(c_uint, 6);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL2_S = @as(c_uint, 16);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL2_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL1_W = @as(c_uint, 6);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL1_M = @as(c_uint, 0x00000FC0);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL1_S = @as(c_uint, 6);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL1_ALLONES = @as(c_uint, 0x00000FC0);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL0_W = @as(c_uint, 6);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL0_M = @as(c_uint, 0x0000003F);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL0_S = @as(c_uint, 0);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL0_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDMDM32_SYSTIMEVTMUX1_SYSTIMEVTMUX0_SEL0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_W = @as(c_uint, 4);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_S = @as(c_uint, 20);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00E00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00D00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS13 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00B00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00A00000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00900000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00700000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00500000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_REPS_REPS1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_W = @as(c_uint, 4);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_S = @as(c_uint, 16);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_BITS16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_BITS8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_SIZE_BITS4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_QBRANCHEN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_QBRANCHEN_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_QBRANCHEN_S = @as(c_uint, 1);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_QBRANCHEN_ON = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_QBRANCHEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_IBRANCHEN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_IBRANCHEN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_IBRANCHEN_S = @as(c_uint, 0);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_IBRANCHEN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPRECTRL_ADCDIGCONF_IBRANCHEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM7_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM7_S = @as(c_uint, 28);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM7_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM6_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM6_S = @as(c_uint, 24);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM6_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM5_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM5_S = @as(c_uint, 20);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM5_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM4_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM4_S = @as(c_uint, 16);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM4_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM3_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM3_M = @as(c_uint, 0x0000F000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM3_S = @as(c_uint, 12);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM3_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM2_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM2_M = @as(c_uint, 0x00000F00);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM2_S = @as(c_uint, 8);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM2_ALLONES = @as(c_uint, 0x00000F00);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM1_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM1_M = @as(c_uint, 0x000000F0);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM1_S = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM1_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM0_W = @as(c_uint, 4);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM0_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM0_S = @as(c_uint, 0);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM0_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_MODSYMMAP1_MODSYMMAP0_SYM0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BAUD_MODSOFTTX_RATEWORD_W = @as(c_uint, 16);
pub const LRFDMDM32_BAUD_MODSOFTTX_RATEWORD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_BAUD_MODSOFTTX_RATEWORD_S = @as(c_uint, 16);
pub const LRFDMDM32_BAUD_MODSOFTTX_RATEWORD_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_BAUD_MODSOFTTX_RATEWORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BAUD_MODSOFTTX_SOFTSYMBOL_W = @as(c_uint, 4);
pub const LRFDMDM32_BAUD_MODSOFTTX_SOFTSYMBOL_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_BAUD_MODSOFTTX_SOFTSYMBOL_S = @as(c_uint, 0);
pub const LRFDMDM32_BAUD_MODSOFTTX_SOFTSYMBOL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_BAUD_MODSOFTTX_SOFTSYMBOL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_W = @as(c_uint, 2);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_S = @as(c_uint, 18);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_BLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_RESERVED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_IEEE15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_FECSELECT_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_W = @as(c_uint, 2);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_S = @as(c_uint, 16);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_LVL8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_LVL4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_MODMAIN_BAUDPRE_MODLEVELS_LVL2 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_ALIGNVALUE_W = @as(c_uint, 3);
pub const LRFDMDM32_MODMAIN_BAUDPRE_ALIGNVALUE_M = @as(c_uint, 0x0000E000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_ALIGNVALUE_S = @as(c_uint, 13);
pub const LRFDMDM32_MODMAIN_BAUDPRE_ALIGNVALUE_ALLONES = @as(c_uint, 0x0000E000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_ALIGNVALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_EXTRATEWORD_W = @as(c_uint, 5);
pub const LRFDMDM32_MODMAIN_BAUDPRE_EXTRATEWORD_M = @as(c_uint, 0x00001F00);
pub const LRFDMDM32_MODMAIN_BAUDPRE_EXTRATEWORD_S = @as(c_uint, 8);
pub const LRFDMDM32_MODMAIN_BAUDPRE_EXTRATEWORD_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDMDM32_MODMAIN_BAUDPRE_EXTRATEWORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODMAIN_BAUDPRE_PRESCALER_W = @as(c_uint, 8);
pub const LRFDMDM32_MODMAIN_BAUDPRE_PRESCALER_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_MODMAIN_BAUDPRE_PRESCALER_S = @as(c_uint, 0);
pub const LRFDMDM32_MODMAIN_BAUDPRE_PRESCALER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_MODMAIN_BAUDPRE_PRESCALER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINMA_W = @as(c_uint, 5);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINMA_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINMA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINMA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINEX_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINEX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00E00000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINEX_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINEX_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00E00000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCTGAINEX_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCCOLRST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCCOLRST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCCOLRST_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCCOLRST_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CDCCOLRST_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_CHFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_FEXB1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_MGE1SRCSEL_FIDC = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_BW0_29 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_BW0_41667 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_BW0_3333 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CHFIBW_BW0_5 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CMIXN_W = @as(c_uint, 10);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CMIXN_M = @as(c_uint, 0x000003FF);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CMIXN_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CMIXN_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDMDM32_DEMMISC1_DEMMISC0_CMIXN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x60000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_S = @as(c_uint, 29);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_GAIN8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x60000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_GAIN4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_GAIN2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1FILTMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1FILTMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1FILTMODE_S = @as(c_uint, 28);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1FILTMODE_DIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1FILTMODE_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_S = @as(c_uint, 26);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_SYM1024 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_SYM256 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_SYM64 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_LQIPERIOD_SYM16 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_GAIN8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_GAIN4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_GAIN2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1NUMSTAGES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1NUMSTAGES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1NUMSTAGES_S = @as(c_uint, 23);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1NUMSTAGES_DIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE1NUMSTAGES_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_DIV4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_DIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDECIM_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_W = @as(c_uint, 5);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_DIV8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_DIV4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_DIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_BDE2DECRATIO_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MLSERUN = @as(c_uint, 0x00004000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MLSERUN_M = @as(c_uint, 0x00004000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MLSERUN_S = @as(c_uint, 14);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MLSERUN_EN = @as(c_uint, 0x00004000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MLSERUN_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MAFCGAIN_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MAFCGAIN_M = @as(c_uint, 0x00003000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MAFCGAIN_S = @as(c_uint, 12);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MAFCGAIN_ALLONES = @as(c_uint, 0x00003000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_MAFCGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMBYPASS = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMBYPASS_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMBYPASS_S = @as(c_uint, 11);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMBYPASS_EN = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMBYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMESTONLY = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMESTONLY_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMESTONLY_S = @as(c_uint, 10);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMESTONLY_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMESTONLY_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_M = @as(c_uint, 0x00000380);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_S = @as(c_uint, 7);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM128 = @as(c_uint, 0x00000280);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM64 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM32 = @as(c_uint, 0x00000180);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM16 = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM8 = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAPERIOD_SYM4 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_M = @as(c_uint, 0x00000070);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV4 = @as(c_uint, 0x00000070);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV8 = @as(c_uint, 0x00000060);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV16 = @as(c_uint, 0x00000050);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV32 = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV64 = @as(c_uint, 0x00000030);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV128 = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV256 = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_STIMTEAGAIN_DIV512 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLINPREDEN = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLINPREDEN_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLINPREDEN_S = @as(c_uint, 3);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLINPREDEN_ON = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLINPREDEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDESPECK = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDESPECK_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDESPECK_S = @as(c_uint, 2);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDESPECK_EN = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFDESPECK_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFIQCONJEN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFIQCONJEN_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFIQCONJEN_S = @as(c_uint, 1);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFIQCONJEN_ON = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFIQCONJEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLIMITRANGE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLIMITRANGE_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLIMITRANGE_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLIMITRANGE_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMISC3_DEMMISC2_PDIFLIMITRANGE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUAVGLENGTH_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUAVGLENGTH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUAVGLENGTH_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUAVGLENGTH_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUAVGLENGTH_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUDELAY_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUDELAY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUDELAY_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUDELAY_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_DSBUDELAY_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_GAINFACTOR_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_GAINFACTOR_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_GAINFACTOR_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_GAINFACTOR_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_GAINFACTOR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_PHASEFACTOR_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_PHASEFACTOR_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_PHASEFACTOR_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_PHASEFACTOR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMDSBU_DEMIQMC0_PHASEFACTOR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_COMPSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_COMPSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_COMPSEL_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_COMPSEL_ACC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_COMPSEL_MANUAL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_SMPL512 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_SMPL128 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_SMPL32 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCPERIOD_SMPL8 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCMODE_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCMODE_CONT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCEN_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCEN_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMFIDC0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ESTSEL = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ESTSEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ESTSEL_S = @as(c_uint, 11);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ESTSEL_IIR = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ESTSEL_ACC = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_M = @as(c_uint, 0x00000600);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_S = @as(c_uint, 9);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_IIR = @as(c_uint, 0x00000600);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_ACC = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_COMPSEL_MANUAL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRUSEINITIAL = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRUSEINITIAL_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRUSEINITIAL_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRUSEINITIAL_EN = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRUSEINITIAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_M = @as(c_uint, 0x000000E0);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_S = @as(c_uint, 5);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV1024 = @as(c_uint, 0x000000E0);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV512 = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV256 = @as(c_uint, 0x000000A0);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV128 = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV64 = @as(c_uint, 0x00000060);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV32 = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_DIV16 = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIRGAIN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIREN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIREN_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIREN_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIREN_ON = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_IIREN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCMODE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCMODE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCMODE_S = @as(c_uint, 3);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCMODE_CONT = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_M = @as(c_uint, 0x00000006);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_S = @as(c_uint, 1);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_SMPL512 = @as(c_uint, 0x00000006);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_SMPL128 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_SMPL32 = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCPERIOD_SMPL8 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCEN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCEN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCEN_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCEN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMFIDC0_DEMCODC0_DEMCODC0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT2PASSTHROUGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT2PASSTHROUGH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT2PASSTHROUGH_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT2PASSTHROUGH_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT2PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT1PASSTHROUGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT1PASSTHROUGH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT1PASSTHROUGH_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT1PASSTHROUGH_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUT1PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL2_S = @as(c_uint, 19);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL2_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL2_FIFE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL1_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL1_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_OUTSRCSEL1_FIFE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B2SRCSEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B2SRCSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B2SRCSEL_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B2SRCSEL_FIFE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B2SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B1SRCSEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B1SRCSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B1SRCSEL_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B1SRCSEL_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMDSXB0_B1SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2PASSTHROUGH = @as(c_uint, 0x00002000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2PASSTHROUGH_M = @as(c_uint, 0x00002000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2PASSTHROUGH_S = @as(c_uint, 13);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2PASSTHROUGH_ONE = @as(c_uint, 0x00002000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_M = @as(c_uint, 0x00001800);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_S = @as(c_uint, 11);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_BDE1 = @as(c_uint, 0x00001000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_CMIX = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT2SRCSEL_CODC = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1PASSTHROUGH = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1PASSTHROUGH_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1PASSTHROUGH_S = @as(c_uint, 10);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1PASSTHROUGH_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1PASSTHROUGH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_M = @as(c_uint, 0x00000300);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_BDE1 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_CMIX = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_OUT1SRCSEL_CODC = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B4SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B4SRCSEL_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B4SRCSEL_S = @as(c_uint, 6);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B4SRCSEL_ONES = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B4SRCSEL_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_M = @as(c_uint, 0x00000030);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_CMIX = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_CODC = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B3SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_S = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_BDE1 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_CODC = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B2SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_M = @as(c_uint, 0x00000003);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_BDE1 = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_CMIX = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMDSXB0_DEMFEXB0_DEMFEXB0_B1SRCSEL_INPUT = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C1C7_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C1C7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C1C7_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C1C7_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C1C7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C0C8_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C0C8_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C0C8_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C0C8_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_C0C8_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FINEFOESEL = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FINEFOESEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FINEFOESEL_S = @as(c_uint, 11);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FINEFOESEL_ACC = @as(c_uint, 0x00000800);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FINEFOESEL_IIR = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_M = @as(c_uint, 0x00000600);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_S = @as(c_uint, 9);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_MANUAL = @as(c_uint, 0x00000400);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_ACC = @as(c_uint, 0x00000200);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_FOCFFSEL_IIR = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCCNTMODE = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCCNTMODE_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCCNTMODE_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCCNTMODE_CONT = @as(c_uint, 0x00000100);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCCNTMODE_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_S = @as(c_uint, 6);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_PER512 = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_PER256 = @as(c_uint, 0x00000080);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_PER128 = @as(c_uint, 0x00000040);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCPERIOD_PER64 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCEN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCEN_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCEN_S = @as(c_uint, 5);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCEN_ON = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_ACCEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRUSEINITIAL = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRUSEINITIAL_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRUSEINITIAL_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRUSEINITIAL_EN = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRUSEINITIAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_M = @as(c_uint, 0x0000000E);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_S = @as(c_uint, 1);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV1024 = @as(c_uint, 0x0000000E);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV512 = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV256 = @as(c_uint, 0x0000000A);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV128 = @as(c_uint, 0x00000008);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV64 = @as(c_uint, 0x00000006);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV32 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_DIV16 = @as(c_uint, 0x00000002);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIRGAIN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIREN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIREN_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIREN_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIREN_ON = @as(c_uint, 0x00000001);
pub const LRFDMDM32_DEMMAFI0_DEMFIFE0_IIREN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C4_W = @as(c_uint, 9);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01FF0000, .hex);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C4_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C4_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01FF0000, .hex);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C3C5_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C3C5_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C3C5_S = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C3C5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C3C5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C2C6_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C2C6_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C2C6_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C2C6_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMMAFI2_DEMMAFI1_C2C6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDB_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDB_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDB_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDA_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDA_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_THRESHOLDA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKB_W = @as(c_uint, 5);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKB_M = @as(c_uint, 0x0000F800);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKB_S = @as(c_uint, 11);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKB_ALLONES = @as(c_uint, 0x0000F800);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKA_W = @as(c_uint, 5);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKA_M = @as(c_uint, 0x000007C0);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKA_S = @as(c_uint, 6);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKA_ALLONES = @as(c_uint, 0x000007C0);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_MASKA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_W = @as(c_uint, 2);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_M = @as(c_uint, 0x00000030);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_S = @as(c_uint, 4);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_PARALLEL = @as(c_uint, 0x00000020);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_SERIAL = @as(c_uint, 0x00000010);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_CASCCONF_SINGLE = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_COPYCONF_W = @as(c_uint, 4);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_COPYCONF_M = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_COPYCONF_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_COPYCONF_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDMDM32_DEMC1BE1_DEMC1BE0_COPYCONF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE0_DEMC1BE2_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_SPARE0_DEMC1BE2_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SPARE0_DEMC1BE2_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_SPARE0_DEMC1BE2_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SPARE0_DEMC1BE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PARLOADCONF = @as(c_uint, 0x00000400);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PARLOADCONF_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PARLOADCONF_S = @as(c_uint, 10);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PARLOADCONF_ATOD = @as(c_uint, 0x00000400);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PARLOADCONF_ATOB = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_W = @as(c_uint, 2);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_M = @as(c_uint, 0x00000300);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_S = @as(c_uint, 8);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_BESTAB = @as(c_uint, 0x00000200);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_BEST = @as(c_uint, 0x00000100);
pub const LRFDMDM32_SPARE0_DEMC1BE2_PEAKCONF_THRESH = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE0_DEMC1BE2_THRESHOLDC_W = @as(c_uint, 8);
pub const LRFDMDM32_SPARE0_DEMC1BE2_THRESHOLDC_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_SPARE0_DEMC1BE2_THRESHOLDC_S = @as(c_uint, 0);
pub const LRFDMDM32_SPARE0_DEMC1BE2_THRESHOLDC_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_SPARE0_DEMC1BE2_THRESHOLDC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE2_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE2_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE2_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE2_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SPARE2_SPARE1_SPARE1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU0_SPARE3_SYNCMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_SYNCMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_SYNCMODE_S = @as(c_uint, 23);
pub const LRFDMDM32_DEMSWQU0_SPARE3_SYNCMODE_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_SYNCMODE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU0_SPARE3_AUTOMAFC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_AUTOMAFC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_AUTOMAFC_S = @as(c_uint, 22);
pub const LRFDMDM32_DEMSWQU0_SPARE3_AUTOMAFC_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_AUTOMAFC_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU0_SPARE3_RUN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_RUN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_RUN_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMSWQU0_SPARE3_RUN_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_RUN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU0_SPARE3_REFLEN_W = @as(c_uint, 5);
pub const LRFDMDM32_DEMSWQU0_SPARE3_REFLEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_REFLEN_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMSWQU0_SPARE3_REFLEN_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDMDM32_DEMSWQU0_SPARE3_REFLEN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU0_SPARE3_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMSWQU0_SPARE3_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMSWQU0_SPARE3_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMSWQU0_SPARE3_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMSWQU0_SPARE3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR31C16_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR31C16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR31C16_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR31C16_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR15C0_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMC1BEREF1_DEMC1BEREF0_CAR15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR31C16_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR31C16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR31C16_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR31C16_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR15C0_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMC1BEREF3_DEMC1BEREF2_CBR15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_WORD_W = @as(c_uint, 16);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_WORD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_WORD_S = @as(c_uint, 16);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_WORD_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_WORD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_DSBUSEL = @as(c_uint, 0x00000800);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_DSBUSEL_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_DSBUSEL_S = @as(c_uint, 11);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_DSBUSEL_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_DSBUSEL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_HDISMODE = @as(c_uint, 0x00000400);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_HDISMODE_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_HDISMODE_S = @as(c_uint, 10);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_HDISMODE_EN = @as(c_uint, 0x00000400);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_HDISMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PARBITQUALEN = @as(c_uint, 0x00000200);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PARBITQUALEN_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PARBITQUALEN_S = @as(c_uint, 9);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PARBITQUALEN_ON = @as(c_uint, 0x00000200);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PARBITQUALEN_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_W = @as(c_uint, 2);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_M = @as(c_uint, 0x00000180);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_S = @as(c_uint, 7);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_EARLY = @as(c_uint, 0x00000100);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_LATE = @as(c_uint, 0x00000080);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_STIMMODE_NORMAL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_C1BEMODE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_C1BEMODE_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_C1BEMODE_S = @as(c_uint, 6);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_C1BEMODE_EARLYLATE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_C1BEMODE_NORMAL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTPDIFFMODE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTPDIFFMODE_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTPDIFFMODE_S = @as(c_uint, 5);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTPDIFFMODE_EN = @as(c_uint, 0x00000020);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTPDIFFMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTTXENABLE = @as(c_uint, 0x00000010);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTTXENABLE_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTTXENABLE_S = @as(c_uint, 4);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTTXENABLE_ON = @as(c_uint, 0x00000010);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_SOFTTXENABLE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FECENABLE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FECENABLE_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FECENABLE_S = @as(c_uint, 3);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FECENABLE_ON = @as(c_uint, 0x00000008);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FECENABLE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FEC5TERMINATE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FEC5TERMINATE_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FEC5TERMINATE_S = @as(c_uint, 2);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FEC5TERMINATE_ON = @as(c_uint, 0x00000004);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_FEC5TERMINATE_OFF = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_TONEINSERT = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_TONEINSERT_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_TONEINSERT_S = @as(c_uint, 1);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_TONEINSERT_EN = @as(c_uint, 0x00000002);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_TONEINSERT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PREAMBLEINSERT = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PREAMBLEINSERT_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PREAMBLEINSERT_S = @as(c_uint, 0);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PREAMBLEINSERT_EN = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MODPREAMBLE_MODCTRL_PREAMBLEINSERT_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P27C16_W = @as(c_uint, 12);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P27C16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P27C16_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P27C16_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P27C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P15C0_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMFRAC1_DEMFRAC0_P15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q27C16_W = @as(c_uint, 12);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q27C16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q27C16_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q27C16_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q27C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q15C0_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q15C0_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q15C0_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_DEMFRAC3_DEMFRAC2_Q15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPQVAL_W = @as(c_uint, 13);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPQVAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPQVAL_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPQVAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPQVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPIVAL_W = @as(c_uint, 13);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPIVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPIVAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPIVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DEMCODC2_DEMCODC1_COMPIVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPQVAL_W = @as(c_uint, 13);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPQVAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPQVAL_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPQVAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPQVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPIVAL_W = @as(c_uint, 13);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPIVAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPIVAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPIVAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DEMFIDC2_DEMFIDC1_COMPIVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_COMPVAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_COMPVAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_COMPVAL_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_COMPVAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_COMPVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_FOCFBREGVAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_FOCFBREGVAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_FOCFBREGVAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_FOCFBREGVAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMMAFC0_DEMFIFE1_FOCFBREGVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALB_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALB_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALB_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALA_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALA_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_IMBALA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_TERMVAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_TERMVAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_TERMVAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_TERMVAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMSWIMBAL_DEMMAFI4_TERMVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_S = @as(c_uint, 25);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKPIN_GPI0 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGETRIGGER = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGETRIGGER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGETRIGGER_S = @as(c_uint, 24);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGETRIGGER_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGETRIGGER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00E00000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_S = @as(c_uint, 21);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_SOFD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00E00000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_STIM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_MAFC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00A00000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_C1BE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_MAFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_FIFE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_PDIF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_DECSTAGEDEBUG_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDTRIGGER = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDTRIGGER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDTRIGGER_S = @as(c_uint, 20);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDTRIGGER_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDTRIGGER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_W = @as(c_uint, 3);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_FIDC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_FRAC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_CHFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_BDE2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_FEXB2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_BDE1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_IQMC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_FRONTENDDEBUG_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKMODE_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKMODE_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_LOOPBACKMODE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMDEBUG_DEMSOFTPDIFF_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_START = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_START_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_START_S = @as(c_uint, 16);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_START_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_START_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_W = @as(c_uint, 2);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_S = @as(c_uint, 6);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_MLSE = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_SOFD = @as(c_uint, 0x00000080);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_PHAC = @as(c_uint, 0x00000040);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRSEL_MET5M = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_W = @as(c_uint, 4);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_M = @as(c_uint, 0x0000003C);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_S = @as(c_uint, 2);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM7 = @as(c_uint, 0x0000003C);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM6 = @as(c_uint, 0x00000038);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM5 = @as(c_uint, 0x00000034);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM4 = @as(c_uint, 0x00000030);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM3 = @as(c_uint, 0x0000002C);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM2 = @as(c_uint, 0x00000028);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM1 = @as(c_uint, 0x00000024);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_APM0 = @as(c_uint, 0x00000020);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_APMRDBACKSEL_NOSEL = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_ACSITERATIONS = @as(c_uint, 0x00000002);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_ACSITERATIONS_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_ACSITERATIONS_S = @as(c_uint, 1);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_ACSITERATIONS_CODE23 = @as(c_uint, 0x00000002);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_ACSITERATIONS_CODE12 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRICS = @as(c_uint, 0x00000001);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRICS_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRICS_S = @as(c_uint, 0);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRICS_SOFT = @as(c_uint, 0x00000001);
pub const LRFDMDM32_VITCOMPUTE_VITCTRL_METRICS_HW = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITSTATE_VALUE_W = @as(c_uint, 3);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITSTATE_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITSTATE_VALUE_S = @as(c_uint, 16);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITSTATE_VALUE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITSTATE_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITAPMRDBACK_VALUE_W = @as(c_uint, 10);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITAPMRDBACK_VALUE_M = @as(c_uint, 0x000003FF);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITAPMRDBACK_VALUE_S = @as(c_uint, 0);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITAPMRDBACK_VALUE_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDMDM32_VITSTATE_VITAPMRDBACK_VITAPMRDBACK_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET3_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET3_S = @as(c_uint, 24);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET3_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET2_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET2_S = @as(c_uint, 16);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET2_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET1_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET1_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET1_S = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET1_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET0_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET0_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET0_S = @as(c_uint, 0);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET0_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_VITBRMETRIC32_VITBRMETRIC10_MET0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET7_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET7_S = @as(c_uint, 24);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET7_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET6_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET6_S = @as(c_uint, 16);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET6_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET5_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET5_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET5_S = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET4_W = @as(c_uint, 8);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET4_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET4_S = @as(c_uint, 0);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET4_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_VITBRMETRIC76_VITBRMETRIC54_MET4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_CPTSRC_W = @as(c_uint, 6);
pub const LRFDMDM32_TIMCTL_CPTSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDMDM32_TIMCTL_CPTSRC_S = @as(c_uint, 24);
pub const LRFDMDM32_TIMCTL_CPTSRC_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDMDM32_TIMCTL_CPTSRC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_CPTCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_TIMCTL_CPTCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_TIMCTL_CPTCTL_S = @as(c_uint, 23);
pub const LRFDMDM32_TIMCTL_CPTCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDMDM32_TIMCTL_CPTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_CNTRSRC_W = @as(c_uint, 2);
pub const LRFDMDM32_TIMCTL_CNTRSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRSRC_S = @as(c_uint, 21);
pub const LRFDMDM32_TIMCTL_CNTRSRC_CLK4BAUDF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRSRC_CLK4BAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRSRC_CLKBAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_CNTRCLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCLR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCLR_S = @as(c_uint, 20);
pub const LRFDMDM32_TIMCTL_CNTRCLR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCLR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_CNTRCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCTL_S = @as(c_uint, 19);
pub const LRFDMDM32_TIMCTL_CNTRCTL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_TIMCTL_CNTRCTL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_TIMSRC_W = @as(c_uint, 2);
pub const LRFDMDM32_TIMCTL_TIMSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_TIMCTL_TIMSRC_S = @as(c_uint, 17);
pub const LRFDMDM32_TIMCTL_TIMSRC_CLK4BAUDF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDMDM32_TIMCTL_TIMSRC_CLK4BAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_TIMCTL_TIMSRC_CLKBAUD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_TIMCTL_TIMSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCTL_TIMCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_TIMCTL_TIMCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_TIMCTL_TIMCTL_S = @as(c_uint, 16);
pub const LRFDMDM32_TIMCTL_TIMCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_TIMCTL_TIMCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMPER_TIMINC_TIMPER_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_TIMPER_TIMINC_TIMPER_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_TIMPER_TIMINC_TIMPER_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_TIMPER_TIMINC_TIMPER_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_TIMPER_TIMINC_TIMPER_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMPER_TIMINC_TIMINC_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_TIMPER_TIMINC_TIMINC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_TIMPER_TIMINC_TIMINC_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_TIMPER_TIMINC_TIMINC_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_TIMPER_TIMINC_TIMINC_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VALUE_W = @as(c_uint, 16);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VALUE_S = @as(c_uint, 16);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VALUE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_TIMCAPT_TIMCNT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_FLUSH = @as(c_uint, 0x00000001);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_FLUSH_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_FLUSH_S = @as(c_uint, 0);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_FLUSH_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_COUNT1IN_TIMEBASE_FLUSH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_COUNT1RES_VAL_W = @as(c_uint, 5);
pub const LRFDMDM32_COUNT1RES_VAL_M = @as(c_uint, 0x0000001F);
pub const LRFDMDM32_COUNT1RES_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_COUNT1RES_VAL_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDMDM32_COUNT1RES_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC11_W = @as(c_uint, 8);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC11_S = @as(c_uint, 24);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC11_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC10_W = @as(c_uint, 8);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC10_S = @as(c_uint, 16);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC10_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC10_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC01_W = @as(c_uint, 8);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC01_M = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC01_S = @as(c_uint, 8);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC01_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC01_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC00_W = @as(c_uint, 8);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC00_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC00_S = @as(c_uint, 0);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC00_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_BRMACC2_BRMACC1_METRIC00_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_BUSY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_BUSY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_BUSY_S = @as(c_uint, 16);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_BUSY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_SEND = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_SEND_S = @as(c_uint, 0);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_MCETRCSTAT_MCETRCCTRL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_MCETRCPAR0_MCETRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CHFI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CHFI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CHFI_S = @as(c_uint, 21);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CHFI_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CHFI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_BDE2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_BDE2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_BDE2_S = @as(c_uint, 20);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_BDE2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_BDE2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FIDC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FIDC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FIDC_S = @as(c_uint, 19);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FIDC_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FIDC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FRAC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FRAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FRAC_S = @as(c_uint, 18);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FRAC_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_FRAC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_MGEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_MGEX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_MGEX_S = @as(c_uint, 17);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_MGEX_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_MGEX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CODC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CODC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CODC_S = @as(c_uint, 16);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CODC_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_CODC_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_RDCAPT0_MCETRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_VAL_W = @as(c_uint, 13);
pub const LRFDMDM32_FECAPT0_RDCAPT1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_FECAPT0_RDCAPT1_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_FECAPT0_RDCAPT1_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub const LRFDMDM32_FECAPT0_RDCAPT1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX2 = @as(c_uint, 0x00000800);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX2_M = @as(c_uint, 0x00000800);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX2_S = @as(c_uint, 11);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX2_ONE = @as(c_uint, 0x00000800);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX1 = @as(c_uint, 0x00000400);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX1_M = @as(c_uint, 0x00000400);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX1_S = @as(c_uint, 10);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX1_ONE = @as(c_uint, 0x00000400);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX0 = @as(c_uint, 0x00000200);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX0_M = @as(c_uint, 0x00000200);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX0_S = @as(c_uint, 9);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX0_ONE = @as(c_uint, 0x00000200);
pub const LRFDMDM32_FECAPT0_RDCAPT1_C1BEX0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_SOFD = @as(c_uint, 0x00000100);
pub const LRFDMDM32_FECAPT0_RDCAPT1_SOFD_M = @as(c_uint, 0x00000100);
pub const LRFDMDM32_FECAPT0_RDCAPT1_SOFD_S = @as(c_uint, 8);
pub const LRFDMDM32_FECAPT0_RDCAPT1_SOFD_ONE = @as(c_uint, 0x00000100);
pub const LRFDMDM32_FECAPT0_RDCAPT1_SOFD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_LQIE = @as(c_uint, 0x00000080);
pub const LRFDMDM32_FECAPT0_RDCAPT1_LQIE_M = @as(c_uint, 0x00000080);
pub const LRFDMDM32_FECAPT0_RDCAPT1_LQIE_S = @as(c_uint, 7);
pub const LRFDMDM32_FECAPT0_RDCAPT1_LQIE_ONE = @as(c_uint, 0x00000080);
pub const LRFDMDM32_FECAPT0_RDCAPT1_LQIE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_STIM = @as(c_uint, 0x00000040);
pub const LRFDMDM32_FECAPT0_RDCAPT1_STIM_M = @as(c_uint, 0x00000040);
pub const LRFDMDM32_FECAPT0_RDCAPT1_STIM_S = @as(c_uint, 6);
pub const LRFDMDM32_FECAPT0_RDCAPT1_STIM_ONE = @as(c_uint, 0x00000040);
pub const LRFDMDM32_FECAPT0_RDCAPT1_STIM_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_FIFE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FECAPT0_RDCAPT1_FIFE_M = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FECAPT0_RDCAPT1_FIFE_S = @as(c_uint, 5);
pub const LRFDMDM32_FECAPT0_RDCAPT1_FIFE_ONE = @as(c_uint, 0x00000020);
pub const LRFDMDM32_FECAPT0_RDCAPT1_FIFE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_PDIF = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FECAPT0_RDCAPT1_PDIF_M = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FECAPT0_RDCAPT1_PDIF_S = @as(c_uint, 4);
pub const LRFDMDM32_FECAPT0_RDCAPT1_PDIF_ONE = @as(c_uint, 0x00000010);
pub const LRFDMDM32_FECAPT0_RDCAPT1_PDIF_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_CA2P = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FECAPT0_RDCAPT1_CA2P_M = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FECAPT0_RDCAPT1_CA2P_S = @as(c_uint, 3);
pub const LRFDMDM32_FECAPT0_RDCAPT1_CA2P_ONE = @as(c_uint, 0x00000008);
pub const LRFDMDM32_FECAPT0_RDCAPT1_CA2P_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MAFI = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MAFI_M = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MAFI_S = @as(c_uint, 2);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MAFI_ONE = @as(c_uint, 0x00000004);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MAFI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_DSBU = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FECAPT0_RDCAPT1_DSBU_M = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FECAPT0_RDCAPT1_DSBU_S = @as(c_uint, 1);
pub const LRFDMDM32_FECAPT0_RDCAPT1_DSBU_ONE = @as(c_uint, 0x00000002);
pub const LRFDMDM32_FECAPT0_RDCAPT1_DSBU_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MLSEBIT = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MLSEBIT_M = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MLSEBIT_S = @as(c_uint, 0);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MLSEBIT_ONE = @as(c_uint, 0x00000001);
pub const LRFDMDM32_FECAPT0_RDCAPT1_MLSEBIT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DSCAPT0_FECAPT1_DSCAPT0_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DSCAPT0_FECAPT1_DSCAPT0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DSCAPT0_FECAPT1_DSCAPT0_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_DSCAPT0_FECAPT1_DSCAPT0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DSCAPT0_FECAPT1_DSCAPT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DSCAPT0_FECAPT1_FECAPT1_VAL_W = @as(c_uint, 13);
pub const LRFDMDM32_DSCAPT0_FECAPT1_FECAPT1_VAL_M = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DSCAPT0_FECAPT1_FECAPT1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DSCAPT0_FECAPT1_FECAPT1_VAL_ALLONES = @as(c_uint, 0x00001FFF);
pub const LRFDMDM32_DSCAPT0_FECAPT1_FECAPT1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT2_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT2_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT2_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT2_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT1_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT1_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT1_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT1_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DSCAPT2_DSCAPT1_DSCAPT1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_MAFCCOMPVAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_MAFCCOMPVAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FC0000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_MAFCCOMPVAL_S = @as(c_uint, 18);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_MAFCCOMPVAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FC0000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_MAFCCOMPVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SWSEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SWSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SWSEL_S = @as(c_uint, 17);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SWSEL_B = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SWSEL_A = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SYNCED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SYNCED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SYNCED_S = @as(c_uint, 16);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SYNCED_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_SYNCED_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_DEMSWQU1_DSCAPT3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKSTRETCH_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKSTRETCH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKSTRETCH_S = @as(c_uint, 30);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKSTRETCH_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKSTRETCH_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX1_W = @as(c_uint, 3);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x38000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX1_S = @as(c_uint, 27);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX0_W = @as(c_uint, 3);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX0_S = @as(c_uint, 24);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_HWCLKMUX0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_SW_W = @as(c_uint, 8);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_SW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_SW_S = @as(c_uint, 16);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_SW_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_SW_ZERO = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_M = @as(c_uint, 0x0000C000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_S = @as(c_uint, 14);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_THREE = @as(c_uint, 0x0000C000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_TWO = @as(c_uint, 0x00008000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_TOPSM_WAIT = @as(c_uint, 0x00004000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO7_SW7 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_M = @as(c_uint, 0x00003000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_S = @as(c_uint, 12);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_THREE = @as(c_uint, 0x00003000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_TWO = @as(c_uint, 0x00002000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_TRANSPARENT_OUT = @as(c_uint, 0x00001000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO6_SW6 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_M = @as(c_uint, 0x00000C00);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_S = @as(c_uint, 10);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_THREE = @as(c_uint, 0x00000C00);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_TWO = @as(c_uint, 0x00000800);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_DEM_OUT_WORD = @as(c_uint, 0x00000400);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO5_SW5 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_M = @as(c_uint, 0x00000300);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_S = @as(c_uint, 8);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_THREE = @as(c_uint, 0x00000300);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_TWO = @as(c_uint, 0x00000200);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_CORR_PEAK_C = @as(c_uint, 0x00000100);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO4_SW4 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_M = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_S = @as(c_uint, 6);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_THREE = @as(c_uint, 0x000000C0);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_TWO = @as(c_uint, 0x00000080);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_CORR_PEAK_B = @as(c_uint, 0x00000040);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO3_SW3 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_M = @as(c_uint, 0x00000030);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_S = @as(c_uint, 4);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_THREE = @as(c_uint, 0x00000030);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_TWO = @as(c_uint, 0x00000020);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_CORR_PEAK_A = @as(c_uint, 0x00000010);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO2_SW2 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_M = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_S = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_THREE = @as(c_uint, 0x0000000C);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_TWO = @as(c_uint, 0x00000008);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_HWCLK1 = @as(c_uint, 0x00000004);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO1_SW1 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_W = @as(c_uint, 2);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_M = @as(c_uint, 0x00000003);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_S = @as(c_uint, 0);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_THREE = @as(c_uint, 0x00000003);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_LOOPBACK = @as(c_uint, 0x00000002);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_HWCLK0 = @as(c_uint, 0x00000001);
pub const LRFDMDM32_GPOCTRL1_GPOCTRL0_GPO0_SW0 = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFEMAXRSSI_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFEMAXRSSI_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFEMAXRSSI_VAL_S = @as(c_uint, 16);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFEMAXRSSI_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFEMAXRSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFERSSI_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFERSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFERSSI_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFERSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_RFEMAXRSSI_RFERSSI_RFERSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_SWA15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_SWA15C0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_SWA15C0_S = @as(c_uint, 16);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_SWA15C0_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_SWA15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_VAL_W = @as(c_uint, 8);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_VAL_S = @as(c_uint, 0);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDMDM32_SYNC0_RFEDBGAIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYNC2_SYNC1_SWB15C0_W = @as(c_uint, 16);
pub const LRFDMDM32_SYNC2_SYNC1_SWB15C0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SYNC2_SYNC1_SWB15C0_S = @as(c_uint, 16);
pub const LRFDMDM32_SYNC2_SYNC1_SWB15C0_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDMDM32_SYNC2_SYNC1_SWB15C0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYNC2_SYNC1_SWA31C16_W = @as(c_uint, 16);
pub const LRFDMDM32_SYNC2_SYNC1_SWA31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SYNC2_SYNC1_SWA31C16_S = @as(c_uint, 0);
pub const LRFDMDM32_SYNC2_SYNC1_SWA31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SYNC2_SYNC1_SWA31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDMDM32_SYNC3_SWB31C16_W = @as(c_uint, 16);
pub const LRFDMDM32_SYNC3_SWB31C16_M = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SYNC3_SWB31C16_S = @as(c_uint, 0);
pub const LRFDMDM32_SYNC3_SWB31C16_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDMDM32_SYNC3_SWB31C16_ALLZEROS = @as(c_uint, 0x00000000);
pub const __HW_LRFDPBE_H__ = "";
pub const LRFDPBE_O_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDPBE_O_FWSRC = @as(c_uint, 0x00000004);
pub const LRFDPBE_O_INIT = @as(c_uint, 0x00000008);
pub const LRFDPBE_O_STROBES0 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_O_IRQ = @as(c_uint, 0x00000010);
pub const LRFDPBE_O_EVT0 = @as(c_uint, 0x00000014);
pub const LRFDPBE_O_EVT1 = @as(c_uint, 0x00000018);
pub const LRFDPBE_O_EVTMSK0 = @as(c_uint, 0x0000001C);
pub const LRFDPBE_O_EVTMSK1 = @as(c_uint, 0x00000020);
pub const LRFDPBE_O_EVTCLR0 = @as(c_uint, 0x00000024);
pub const LRFDPBE_O_EVTCLR1 = @as(c_uint, 0x00000028);
pub const LRFDPBE_O_PDREQ = @as(c_uint, 0x0000002C);
pub const LRFDPBE_O_API = @as(c_uint, 0x00000030);
pub const LRFDPBE_O_MCEDATOUT0 = @as(c_uint, 0x00000034);
pub const LRFDPBE_O_MCEDATIN0 = @as(c_uint, 0x00000038);
pub const LRFDPBE_O_MCECMDOUT = @as(c_uint, 0x0000003C);
pub const LRFDPBE_O_MCECMDIN = @as(c_uint, 0x00000040);
pub const LRFDPBE_O_MDMAPI = @as(c_uint, 0x00000044);
pub const LRFDPBE_O_MDMMSGBOX = @as(c_uint, 0x00000048);
pub const LRFDPBE_O_FREQ = @as(c_uint, 0x0000004C);
pub const LRFDPBE_O_MDMLQI = @as(c_uint, 0x00000050);
pub const LRFDPBE_O_RFEDATOUT0 = @as(c_uint, 0x00000054);
pub const LRFDPBE_O_RFEDATIN0 = @as(c_uint, 0x00000058);
pub const LRFDPBE_O_RFECMDOUT = @as(c_uint, 0x0000005C);
pub const LRFDPBE_O_RFECMDIN = @as(c_uint, 0x00000060);
pub const LRFDPBE_O_RFEAPI = @as(c_uint, 0x00000064);
pub const LRFDPBE_O_RFECMDPAR0 = @as(c_uint, 0x00000068);
pub const LRFDPBE_O_RFECMDPAR1 = @as(c_uint, 0x0000006C);
pub const LRFDPBE_O_RFEMSGBOX = @as(c_uint, 0x00000070);
pub const LRFDPBE_O_RFERSSI = @as(c_uint, 0x00000074);
pub const LRFDPBE_O_RFERSSIMAX = @as(c_uint, 0x00000078);
pub const LRFDPBE_O_RFERFGAIN = @as(c_uint, 0x0000007C);
pub const LRFDPBE_O_MDMSYNCAL = @as(c_uint, 0x00000080);
pub const LRFDPBE_O_MDMSYNCAH = @as(c_uint, 0x00000084);
pub const LRFDPBE_O_MDMSYNCBL = @as(c_uint, 0x00000088);
pub const LRFDPBE_O_MDMSYNCBH = @as(c_uint, 0x0000008C);
pub const LRFDPBE_O_MDMCMDPAR0 = @as(c_uint, 0x00000090);
pub const LRFDPBE_O_MDMCMDPAR1 = @as(c_uint, 0x00000094);
pub const LRFDPBE_O_MDMCMDPAR2 = @as(c_uint, 0x00000098);
pub const LRFDPBE_O_POLY0L = @as(c_uint, 0x000000A0);
pub const LRFDPBE_O_POLY0H = @as(c_uint, 0x000000A4);
pub const LRFDPBE_O_POLY1L = @as(c_uint, 0x000000A8);
pub const LRFDPBE_O_POLY1H = @as(c_uint, 0x000000AC);
pub const LRFDPBE_O_PHACFG = @as(c_uint, 0x000000B0);
pub const LRFDPBE_O_FCFG0 = @as(c_uint, 0x000000B4);
pub const LRFDPBE_O_FCFG1 = @as(c_uint, 0x000000B8);
pub const LRFDPBE_O_FCFG2 = @as(c_uint, 0x000000BC);
pub const LRFDPBE_O_FCFG3 = @as(c_uint, 0x000000C0);
pub const LRFDPBE_O_FCFG4 = @as(c_uint, 0x000000C4);
pub const LRFDPBE_O_FCFG5 = @as(c_uint, 0x000000C8);
pub const LRFDPBE_O_RXFWBTHRS = @as(c_uint, 0x000000CC);
pub const LRFDPBE_O_RXFRBTHRS = @as(c_uint, 0x000000D0);
pub const LRFDPBE_O_TXFWBTHRS = @as(c_uint, 0x000000D4);
pub const LRFDPBE_O_TXFRBTHRS = @as(c_uint, 0x000000D8);
pub const LRFDPBE_O_TIMCTL = @as(c_uint, 0x000000DC);
pub const LRFDPBE_O_TIMPRE = @as(c_uint, 0x000000E0);
pub const LRFDPBE_O_TIMPER0 = @as(c_uint, 0x000000E4);
pub const LRFDPBE_O_TIMPER1 = @as(c_uint, 0x000000E8);
pub const LRFDPBE_O_TIMCAPT0 = @as(c_uint, 0x000000EC);
pub const LRFDPBE_O_TIMCAPT1 = @as(c_uint, 0x000000F0);
pub const LRFDPBE_O_TRCCTL = @as(c_uint, 0x00000100);
pub const LRFDPBE_O_TRCSTAT = @as(c_uint, 0x00000104);
pub const LRFDPBE_O_TRCCMD = @as(c_uint, 0x00000108);
pub const LRFDPBE_O_TRCPAR0 = @as(c_uint, 0x0000010C);
pub const LRFDPBE_O_TRCPAR1 = @as(c_uint, 0x00000110);
pub const LRFDPBE_O_GPOCTRL = @as(c_uint, 0x00000114);
pub const LRFDPBE_O_MDMFWR = @as(c_uint, 0x00000118);
pub const LRFDPBE_O_MDMFRD = @as(c_uint, 0x0000011C);
pub const LRFDPBE_O_MDMFWRCTL = @as(c_uint, 0x00000120);
pub const LRFDPBE_O_MDMFRDCTL = @as(c_uint, 0x00000124);
pub const LRFDPBE_O_MDMFCFG = @as(c_uint, 0x00000128);
pub const LRFDPBE_O_MDMFSTA = @as(c_uint, 0x0000012C);
pub const LRFDPBE_O_PHASTA = @as(c_uint, 0x00000134);
pub const LRFDPBE_O_LFSR0L = @as(c_uint, 0x00000138);
pub const LRFDPBE_O_LFSR0H = @as(c_uint, 0x0000013C);
pub const LRFDPBE_O_LFSR0BRL = @as(c_uint, 0x00000140);
pub const LRFDPBE_O_LFSR0BRH = @as(c_uint, 0x00000144);
pub const LRFDPBE_O_LFSR1L = @as(c_uint, 0x00000148);
pub const LRFDPBE_O_LFSR1H = @as(c_uint, 0x0000014C);
pub const LRFDPBE_O_LFSR1BRL = @as(c_uint, 0x00000150);
pub const LRFDPBE_O_LFSR1BRH = @as(c_uint, 0x00000154);
pub const LRFDPBE_O_LFSR0INL = @as(c_uint, 0x00000158);
pub const LRFDPBE_O_LFSR0N = @as(c_uint, 0x0000015C);
pub const LRFDPBE_O_LFSR0INM = @as(c_uint, 0x00000160);
pub const LRFDPBE_O_PHAOUT0 = @as(c_uint, 0x00000164);
pub const LRFDPBE_O_LFSR1INL = @as(c_uint, 0x00000168);
pub const LRFDPBE_O_LFSR1N = @as(c_uint, 0x0000016C);
pub const LRFDPBE_O_LFSR1INM = @as(c_uint, 0x00000170);
pub const LRFDPBE_O_PHAOUT0BR = @as(c_uint, 0x00000174);
pub const LRFDPBE_O_SYSTIM0L = @as(c_uint, 0x00000180);
pub const LRFDPBE_O_SYSTIM0H = @as(c_uint, 0x00000184);
pub const LRFDPBE_O_SYSTIM1L = @as(c_uint, 0x00000188);
pub const LRFDPBE_O_SYSTIM1H = @as(c_uint, 0x0000018C);
pub const LRFDPBE_O_SYSTIM2L = @as(c_uint, 0x00000190);
pub const LRFDPBE_O_SYSTIM2H = @as(c_uint, 0x00000194);
pub const LRFDPBE_O_GPI = @as(c_uint, 0x00000198);
pub const LRFDPBE_O_FCMD = @as(c_uint, 0x000001A0);
pub const LRFDPBE_O_FSTAT = @as(c_uint, 0x000001A4);
pub const LRFDPBE_O_RXFWP = @as(c_uint, 0x000001A8);
pub const LRFDPBE_O_RXFRP = @as(c_uint, 0x000001AC);
pub const LRFDPBE_O_RXFSWP = @as(c_uint, 0x000001B0);
pub const LRFDPBE_O_RXFSRP = @as(c_uint, 0x000001B4);
pub const LRFDPBE_O_TXFWP = @as(c_uint, 0x000001B8);
pub const LRFDPBE_O_TXFRP = @as(c_uint, 0x000001BC);
pub const LRFDPBE_O_TXFSWP = @as(c_uint, 0x000001C0);
pub const LRFDPBE_O_TXFSRP = @as(c_uint, 0x000001C4);
pub const LRFDPBE_O_RXFWRITABLE = @as(c_uint, 0x000001C8);
pub const LRFDPBE_O_RXFREADABLE = @as(c_uint, 0x000001CC);
pub const LRFDPBE_O_TXFWRITABLE = @as(c_uint, 0x000001D0);
pub const LRFDPBE_O_TXFREADABLE = @as(c_uint, 0x000001D4);
pub const LRFDPBE_O_RXFBRD = @as(c_uint, 0x000001D8);
pub const LRFDPBE_O_RXFBWR = @as(c_uint, 0x000001DC);
pub const LRFDPBE_O_TXFBRD = @as(c_uint, 0x000001E0);
pub const LRFDPBE_O_TXFBWR = @as(c_uint, 0x000001E4);
pub const LRFDPBE_O_RXFHRD = @as(c_uint, 0x000001E8);
pub const LRFDPBE_O_RXFHWR = @as(c_uint, 0x000001EC);
pub const LRFDPBE_O_TXFHRD = @as(c_uint, 0x000001F0);
pub const LRFDPBE_O_TXFHWR = @as(c_uint, 0x000001F4);
pub const LRFDPBE_ENABLE_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE_ENABLE_MDMF_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_DATARAM = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_S = @as(c_uint, 2);
pub const LRFDPBE_FWSRC_DATARAM_S2RRAM = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_FWRAM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_S = @as(c_uint, 1);
pub const LRFDPBE_FWSRC_FWRAM_S2RRAM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_BANK = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_S = @as(c_uint, 0);
pub const LRFDPBE_FWSRC_BANK_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_RFE = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_S = @as(c_uint, 4);
pub const LRFDPBE_INIT_RFE_RESET = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_MDM = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_S = @as(c_uint, 3);
pub const LRFDPBE_INIT_MDM_RESET = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE_INIT_MDMF_RESET = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_TIMCAPT1 = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_S = @as(c_uint, 6);
pub const LRFDPBE_STROBES0_TIMCAPT1_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_TIMCAPT0 = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_S = @as(c_uint, 5);
pub const LRFDPBE_STROBES0_TIMCAPT0_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_S2RTRIG = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_S = @as(c_uint, 4);
pub const LRFDPBE_STROBES0_S2RTRIG_ARM = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_DMATRIG = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_S = @as(c_uint, 3);
pub const LRFDPBE_STROBES0_DMATRIG_ARM = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_S = @as(c_uint, 2);
pub const LRFDPBE_STROBES0_SYSTCAPT2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_S = @as(c_uint, 1);
pub const LRFDPBE_STROBES0_SYSTCAPT1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_S = @as(c_uint, 0);
pub const LRFDPBE_STROBES0_SYSTCAPT0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT15 = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_S = @as(c_uint, 15);
pub const LRFDPBE_IRQ_SOFT15_ON = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT14 = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_S = @as(c_uint, 14);
pub const LRFDPBE_IRQ_SOFT14_ON = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT13 = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_S = @as(c_uint, 13);
pub const LRFDPBE_IRQ_SOFT13_ON = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT12 = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_S = @as(c_uint, 12);
pub const LRFDPBE_IRQ_SOFT12_ON = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT11 = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_S = @as(c_uint, 11);
pub const LRFDPBE_IRQ_SOFT11_ON = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT10 = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_S = @as(c_uint, 10);
pub const LRFDPBE_IRQ_SOFT10_ON = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT9 = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_S = @as(c_uint, 9);
pub const LRFDPBE_IRQ_SOFT9_ON = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT8 = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_S = @as(c_uint, 8);
pub const LRFDPBE_IRQ_SOFT8_ON = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_S = @as(c_uint, 7);
pub const LRFDPBE_IRQ_SOFT7_ON = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_S = @as(c_uint, 6);
pub const LRFDPBE_IRQ_SOFT6_ON = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_S = @as(c_uint, 5);
pub const LRFDPBE_IRQ_SOFT5_ON = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_S = @as(c_uint, 4);
pub const LRFDPBE_IRQ_SOFT4_ON = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_S = @as(c_uint, 3);
pub const LRFDPBE_IRQ_SOFT3_ON = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_S = @as(c_uint, 2);
pub const LRFDPBE_IRQ_SOFT2_ON = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_S = @as(c_uint, 1);
pub const LRFDPBE_IRQ_SOFT1_ON = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_S = @as(c_uint, 0);
pub const LRFDPBE_IRQ_SOFT0_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVT0_MDMFAEMPTY_ONE = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVT0_S2RSTOP_ONE = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVT0_FIFOERR_ONE = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVT0_MDMFAFULL_ONE = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVT0_SYSTCMP2_ONE = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVT0_SYSTCMP1_ONE = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVT0_SYSTCMP0_ONE = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVT0_MDMMSGBOX_ONE = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVT0_RFEMSGBOX_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVT0_RFEDAT_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVT0_RFECMD_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVT0_MDMDAT_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVT0_MDMCMD_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVT0_TIMER1_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVT0_TIMER0_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVT0_PBEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVT1_TXRDBTHR_MET = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVT1_TXWRBTHR_MET = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVT1_RXRDBTHR_MET = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVT1_RXWRBTHR_MET = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVT1_MDMPROG_ONE = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVT1_PBEGPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVT1_PBEGPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVT1_PBEGPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVT1_PBEGPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVT1_PBEGPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVT1_PBEGPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVT1_PBEGPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVT1_PBEGPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_EN = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVTMSK0_S2RSTOP_EN = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVTMSK0_FIFOERR_EN = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_EN = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_EN = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_EN = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_EN = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_EN = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_EN = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVTMSK0_RFEDAT_EN = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVTMSK0_RFECMD_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVTMSK0_MDMDAT_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVTMSK0_MDMCMD_EN = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVTMSK0_TIMER1_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVTMSK0_TIMER0_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVTMSK0_PBEAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_EN = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_EN = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_EN = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_EN = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVTMSK1_MDMPROG_EN = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVTMSK1_PBEGPI7_EN = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVTMSK1_PBEGPI6_EN = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVTMSK1_PBEGPI5_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVTMSK1_PBEGPI4_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVTMSK1_PBEGPI3_EN = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVTMSK1_PBEGPI2_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVTMSK1_PBEGPI1_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVTMSK1_PBEGPI0_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVTCLR0_S2RSTOP_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVTCLR0_FIFOERR_CLEAR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVTCLR0_RFEDAT_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVTCLR0_RFECMD_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVTCLR0_MDMDAT_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVTCLR0_MDMCMD_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVTCLR0_TIMER1_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVTCLR0_TIMER0_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVTCLR0_PBEAPI_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVTCLR1_MDMPROG_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVTCLR1_PBEGPI7_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVTCLR1_PBEGPI6_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVTCLR1_PBEGPI5_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVTCLR1_PBEGPI4_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVTCLR1_PBEGPI3_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVTCLR1_PBEGPI2_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVTCLR1_PBEGPI1_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVTCLR1_PBEGPI0_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_API_PBECMD_W = @as(c_uint, 5);
pub const LRFDPBE_API_PBECMD_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE_API_PBECMD_S = @as(c_uint, 0);
pub const LRFDPBE_API_PBECMD_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDPBE_API_PBECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MCEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MCEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_MCECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_MCECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMAPI_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDPBE_MDMAPI_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDPBE_MDMAPI_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMAPI_MDMCMD_W = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_MDMCMD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMAPI_MDMCMD_S = @as(c_uint, 0);
pub const LRFDPBE_MDMAPI_MDMCMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMAPI_MDMCMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMMSGBOX_VALUE_W = @as(c_uint, 8);
pub const LRFDPBE_MDMMSGBOX_VALUE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMMSGBOX_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_MDMMSGBOX_VALUE_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMMSGBOX_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FREQ_OFFSET_W = @as(c_uint, 16);
pub const LRFDPBE_FREQ_OFFSET_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_FREQ_OFFSET_S = @as(c_uint, 0);
pub const LRFDPBE_FREQ_OFFSET_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_FREQ_OFFSET_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMLQI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_MDMLQI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMLQI_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMLQI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMLQI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_RFECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_RFECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEAPI_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDPBE_RFEAPI_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDPBE_RFEAPI_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEAPI_RFECMD_W = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_RFECMD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFEAPI_RFECMD_S = @as(c_uint, 0);
pub const LRFDPBE_RFEAPI_RFECMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFEAPI_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFECMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFECMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEMSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFEMSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFEMSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEMSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFEMSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERSSI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFERSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSI_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFERSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFERSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFERSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERFGAIN_DBGAIN_W = @as(c_uint, 8);
pub const LRFDPBE_RFERFGAIN_DBGAIN_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERFGAIN_DBGAIN_S = @as(c_uint, 0);
pub const LRFDPBE_RFERFGAIN_DBGAIN_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERFGAIN_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCAL_SWALSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCAL_SWALSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAL_SWALSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCAL_SWALSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAL_SWALSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR2_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR2_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHACFG_MODE1_W = @as(c_uint, 2);
pub const LRFDPBE_PHACFG_MODE1_M = @as(c_uint, 0x00000006);
pub const LRFDPBE_PHACFG_MODE1_S = @as(c_uint, 1);
pub const LRFDPBE_PHACFG_MODE1_PARAL = @as(c_uint, 0x00000004);
pub const LRFDPBE_PHACFG_MODE1_CASC = @as(c_uint, 0x00000002);
pub const LRFDPBE_PHACFG_MODE1_INDEP = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHACFG_MODE0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_S = @as(c_uint, 0);
pub const LRFDPBE_PHACFG_MODE0_WHITE = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_CRC = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXIRQMET = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_S = @as(c_uint, 7);
pub const LRFDPBE_FCFG0_TXIRQMET_TXRDBTHR = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_TXWRBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXIRQMET = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_S = @as(c_uint, 6);
pub const LRFDPBE_FCFG0_RXIRQMET_RXWRBTHR = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_RXRDBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXACOM = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_S = @as(c_uint, 5);
pub const LRFDPBE_FCFG0_TXACOM_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXADEAL = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_S = @as(c_uint, 4);
pub const LRFDPBE_FCFG0_TXADEAL_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXACOM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_S = @as(c_uint, 1);
pub const LRFDPBE_FCFG0_RXACOM_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXADEAL = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG0_RXADEAL_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG1_TXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE_FCFG1_TXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG1_TXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG1_TXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG1_TXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG2_TXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG2_TXHSIZE_M = @as(c_uint, 0x00000700);
pub const LRFDPBE_FCFG2_TXHSIZE_S = @as(c_uint, 8);
pub const LRFDPBE_FCFG2_TXHSIZE_WORD = @as(c_uint, 0x00000200);
pub const LRFDPBE_FCFG2_TXHSIZE_HALFW = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG2_TXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG2_TXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE_FCFG2_TXSIZE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG2_TXSIZE_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG2_TXSIZE_ONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG2_TXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG3_RXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE_FCFG3_RXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG3_RXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG3_RXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG3_RXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG4_RXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG4_RXHSIZE_M = @as(c_uint, 0x00000700);
pub const LRFDPBE_FCFG4_RXHSIZE_S = @as(c_uint, 8);
pub const LRFDPBE_FCFG4_RXHSIZE_WORD = @as(c_uint, 0x00000200);
pub const LRFDPBE_FCFG4_RXHSIZE_HALFW = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG4_RXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG4_RXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE_FCFG4_RXSIZE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG4_RXSIZE_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG4_RXSIZE_ONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG4_RXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG5_DMASREQ_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG5_DMASREQ_M = @as(c_uint, 0x000001C0);
pub const LRFDPBE_FCFG5_DMASREQ_S = @as(c_uint, 6);
pub const LRFDPBE_FCFG5_DMASREQ_TXFIFOFREE = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG5_DMASREQ_TXFIFOMD = @as(c_uint, 0x000000C0);
pub const LRFDPBE_FCFG5_DMASREQ_RXFIFOFREE = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG5_DMASREQ_RXFIFOMD = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG5_DMASREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG5_DMAREQ_W = @as(c_uint, 5);
pub const LRFDPBE_FCFG5_DMAREQ_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE_FCFG5_DMAREQ_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE_FCFG5_DMAREQ_TXWRBTHR_MET = @as(c_uint, 0x0000000A);
pub const LRFDPBE_FCFG5_DMAREQ_TXRDBTHR_MET = @as(c_uint, 0x00000009);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_COMMIT = @as(c_uint, 0x00000007);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_DISCARD = @as(c_uint, 0x00000006);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_DEALLOC = @as(c_uint, 0x00000004);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_RESET = @as(c_uint, 0x00000003);
pub const LRFDPBE_FCFG5_DMAREQ_RXWRBTHR_MET = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG5_DMAREQ_RXRDBTHR_MET = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG5_DMAREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_CPTSRC1_W = @as(c_uint, 5);
pub const LRFDPBE_TIMCTL_CPTSRC1_M = @as(c_uint, 0x0000F800);
pub const LRFDPBE_TIMCTL_CPTSRC1_S = @as(c_uint, 11);
pub const LRFDPBE_TIMCTL_CPTSRC1_ALLONES = @as(c_uint, 0x0000F800);
pub const LRFDPBE_TIMCTL_CPTSRC1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_ENCPT1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_S = @as(c_uint, 10);
pub const LRFDPBE_TIMCTL_ENCPT1_ON = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_SRC1 = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_S = @as(c_uint, 9);
pub const LRFDPBE_TIMCTL_SRC1_PRE1 = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_EN1 = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_S = @as(c_uint, 8);
pub const LRFDPBE_TIMCTL_EN1_ON = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_CPTSRC0_W = @as(c_uint, 5);
pub const LRFDPBE_TIMCTL_CPTSRC0_M = @as(c_uint, 0x000000F8);
pub const LRFDPBE_TIMCTL_CPTSRC0_S = @as(c_uint, 3);
pub const LRFDPBE_TIMCTL_CPTSRC0_ALLONES = @as(c_uint, 0x000000F8);
pub const LRFDPBE_TIMCTL_CPTSRC0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_ENCPT0 = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_S = @as(c_uint, 2);
pub const LRFDPBE_TIMCTL_ENCPT0_ON = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_SRC0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_S = @as(c_uint, 1);
pub const LRFDPBE_TIMCTL_SRC0_PRE0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_EN0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCTL_EN0_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPRE_PRE1_W = @as(c_uint, 6);
pub const LRFDPBE_TIMPRE_PRE1_M = @as(c_uint, 0x00003F00);
pub const LRFDPBE_TIMPRE_PRE1_S = @as(c_uint, 8);
pub const LRFDPBE_TIMPRE_PRE1_DIV64 = @as(c_uint, 0x00003F00);
pub const LRFDPBE_TIMPRE_PRE1_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPRE_PRE0_W = @as(c_uint, 6);
pub const LRFDPBE_TIMPRE_PRE0_M = @as(c_uint, 0x0000003F);
pub const LRFDPBE_TIMPRE_PRE0_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPRE_PRE0_DIV64 = @as(c_uint, 0x0000003F);
pub const LRFDPBE_TIMPRE_PRE0_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPER0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TIMPER0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPER0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPER1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TIMPER1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPER1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCAPT0_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE_TIMCAPT0_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT0_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCAPT0_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT0_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCAPT1_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE_TIMCAPT1_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT1_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCAPT1_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT1_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCTL_SEND = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_S = @as(c_uint, 0);
pub const LRFDPBE_TRCCTL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCSTAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_S = @as(c_uint, 0);
pub const LRFDPBE_TRCSTAT_BUSY_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDPBE_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDPBE_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDPBE_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDPBE_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDPBE_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDPBE_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TRCPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TRCPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_S = @as(c_uint, 7);
pub const LRFDPBE_GPOCTRL_GPO7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_S = @as(c_uint, 6);
pub const LRFDPBE_GPOCTRL_GPO6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_S = @as(c_uint, 5);
pub const LRFDPBE_GPOCTRL_GPO5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_S = @as(c_uint, 4);
pub const LRFDPBE_GPOCTRL_GPO4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_S = @as(c_uint, 3);
pub const LRFDPBE_GPOCTRL_GPO3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_S = @as(c_uint, 2);
pub const LRFDPBE_GPOCTRL_GPO2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_S = @as(c_uint, 1);
pub const LRFDPBE_GPOCTRL_GPO1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_S = @as(c_uint, 0);
pub const LRFDPBE_GPOCTRL_GPO0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFWR_PAYLOADIN_W = @as(c_uint, 16);
pub const LRFDPBE_MDMFWR_PAYLOADIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFWR_PAYLOADIN_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFWR_PAYLOADIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFWR_PAYLOADIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_W = @as(c_uint, 16);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_W = @as(c_uint, 4);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_W = @as(c_uint, 4);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFCFG_AFULLTHR_W = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AFULLTHR_M = @as(c_uint, 0x0000FF00);
pub const LRFDPBE_MDMFCFG_AFULLTHR_S = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AFULLTHR_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDPBE_MDMFCFG_AFULLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_W = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_OVFL = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_S = @as(c_uint, 5);
pub const LRFDPBE_MDMFSTA_OVFL_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_S = @as(c_uint, 4);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_S = @as(c_uint, 3);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_UNFL = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_S = @as(c_uint, 2);
pub const LRFDPBE_MDMFSTA_UNFL_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_RXVALID = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_S = @as(c_uint, 1);
pub const LRFDPBE_MDMFSTA_RXVALID_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_TXREADY = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFSTA_TXREADY_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHASTA_BUSY_W = @as(c_uint, 2);
pub const LRFDPBE_PHASTA_BUSY_M = @as(c_uint, 0x00000003);
pub const LRFDPBE_PHASTA_BUSY_S = @as(c_uint, 0);
pub const LRFDPBE_PHASTA_BUSY_BUSY = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHASTA_BUSY_IDLE = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0BRL_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0BRL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRL_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0BRL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0BRH_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0BRH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRH_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0BRH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1BRL_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1BRL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRL_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1BRL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1BRH_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1BRH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRH_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1BRH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE_LFSR0INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0N_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE_LFSR0N_SIZE_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR0N_SIZE_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0N_SIZE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR0N_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_LFSR0INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHAOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_PHAOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_PHAOUT0_VAL_ALLONES = @as(c_uint, 0x0000DCD7);
pub const LRFDPBE_PHAOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE_LFSR1INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1N_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE_LFSR1N_SIZE_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR1N_SIZE_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1N_SIZE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR1N_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_LFSR1INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHAOUT0BR_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_PHAOUT0BR_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0BR_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_PHAOUT0BR_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0BR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM0L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM0L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM0H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM0H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM1L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM1L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM1H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM1H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM2L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM2L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM2L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM2L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM2L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM2H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM2H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM2H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM2H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM2H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_S = @as(c_uint, 7);
pub const LRFDPBE_GPI_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_S = @as(c_uint, 6);
pub const LRFDPBE_GPI_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_S = @as(c_uint, 5);
pub const LRFDPBE_GPI_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_S = @as(c_uint, 4);
pub const LRFDPBE_GPI_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_S = @as(c_uint, 3);
pub const LRFDPBE_GPI_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_S = @as(c_uint, 2);
pub const LRFDPBE_GPI_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_S = @as(c_uint, 1);
pub const LRFDPBE_GPI_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_S = @as(c_uint, 0);
pub const LRFDPBE_GPI_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCMD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_FCMD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCMD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_FCMD_DATA_FIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE_FCMD_DATA_FIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE_FCMD_DATA_FIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE_FCMD_DATA_FIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE_FCMD_DATA_FIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE_FCMD_DATA_RXFIFO_RETRY = @as(c_uint, 0x0000000A);
pub const LRFDPBE_FCMD_DATA_RXFIFO_DISCARD = @as(c_uint, 0x00000009);
pub const LRFDPBE_FCMD_DATA_RXFIFO_COMMIT = @as(c_uint, 0x00000008);
pub const LRFDPBE_FCMD_DATA_TXFIFO_RESET = @as(c_uint, 0x00000007);
pub const LRFDPBE_FCMD_DATA_TXFIFO_DEALLOC = @as(c_uint, 0x00000006);
pub const LRFDPBE_FCMD_DATA_TXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE_FCMD_DATA_TXFIFO_DISCARD = @as(c_uint, 0x00000004);
pub const LRFDPBE_FCMD_DATA_TXFIFO_COMMIT = @as(c_uint, 0x00000003);
pub const LRFDPBE_FCMD_DATA_RXFIFO_DEALLOC = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCMD_DATA_RXFIFO_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_TXUNFL = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_S = @as(c_uint, 11);
pub const LRFDPBE_FSTAT_TXUNFL_TRUE = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXOVFL = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_S = @as(c_uint, 10);
pub const LRFDPBE_FSTAT_TXOVFL_TRUE = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXEMPTY = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_S = @as(c_uint, 9);
pub const LRFDPBE_FSTAT_TXEMPTY_TRUE = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXFULL = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_S = @as(c_uint, 8);
pub const LRFDPBE_FSTAT_TXFULL_TRUE = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXUNFL = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_S = @as(c_uint, 3);
pub const LRFDPBE_FSTAT_RXUNFL_TRUE = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXOVFL = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_S = @as(c_uint, 2);
pub const LRFDPBE_FSTAT_RXOVFL_TRUE = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXEMPTY = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_S = @as(c_uint, 1);
pub const LRFDPBE_FSTAT_RXEMPTY_TRUE = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXFULL = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_S = @as(c_uint, 0);
pub const LRFDPBE_FSTAT_RXFULL_TRUE = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFSRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFSRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFSRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFSRP_PTR_ALLONES_2 = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFREADABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFREADABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFREADABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFREADABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFREADABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFREADABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_RXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_RXFBWR_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFBWR_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_TXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_TXFBWR_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFBWR_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_RXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_RXFHWR_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFHWR_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_TXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_TXFHWR_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFHWR_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const __HW_LRFDPBE32_H__ = "";
pub const LRFDPBE32_O_FWSRC_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_O_STROBES0_INIT = @as(c_uint, 0x00000004);
pub const LRFDPBE32_O_EVT0_IRQ = @as(c_uint, 0x00000008);
pub const LRFDPBE32_O_EVTMSK0_EVT1 = @as(c_uint, 0x0000000C);
pub const LRFDPBE32_O_EVTCLR0_EVTMSK1 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_O_PDREQ_EVTCLR1 = @as(c_uint, 0x00000014);
pub const LRFDPBE32_O_MCEDATOUT0_API = @as(c_uint, 0x00000018);
pub const LRFDPBE32_O_MCECMDOUT_MCEDATIN0 = @as(c_uint, 0x0000001C);
pub const LRFDPBE32_O_MDMAPI_MCECMDIN = @as(c_uint, 0x00000020);
pub const LRFDPBE32_O_FREQ_MDMMSGBOX = @as(c_uint, 0x00000024);
pub const LRFDPBE32_O_RFEDATOUT0_MDMLQI = @as(c_uint, 0x00000028);
pub const LRFDPBE32_O_RFECMDOUT_RFEDATIN0 = @as(c_uint, 0x0000002C);
pub const LRFDPBE32_O_RFEAPI_RFECMDIN = @as(c_uint, 0x00000030);
pub const LRFDPBE32_O_RFECMDPAR1_RFECMDPAR0 = @as(c_uint, 0x00000034);
pub const LRFDPBE32_O_RFERSSI_RFEMSGBOX = @as(c_uint, 0x00000038);
pub const LRFDPBE32_O_RFERFGAIN_RFERSSIMAX = @as(c_uint, 0x0000003C);
pub const LRFDPBE32_O_MDMSYNCA = @as(c_uint, 0x00000040);
pub const LRFDPBE32_O_MDMSYNCB = @as(c_uint, 0x00000044);
pub const LRFDPBE32_O_MDMCMDPAR1_MDMCMDPAR0 = @as(c_uint, 0x00000048);
pub const LRFDPBE32_O_MDMCMDPAR2 = @as(c_uint, 0x0000004C);
pub const LRFDPBE32_O_POLY0 = @as(c_uint, 0x00000050);
pub const LRFDPBE32_O_POLY1 = @as(c_uint, 0x00000054);
pub const LRFDPBE32_O_FCFG0_PHACFG = @as(c_uint, 0x00000058);
pub const LRFDPBE32_O_FCFG2_FCFG1 = @as(c_uint, 0x0000005C);
pub const LRFDPBE32_O_FCFG4_FCFG3 = @as(c_uint, 0x00000060);
pub const LRFDPBE32_O_RXFWBTHRS_FCFG5 = @as(c_uint, 0x00000064);
pub const LRFDPBE32_O_TXFWBTHRS_RXFRBTHRS = @as(c_uint, 0x00000068);
pub const LRFDPBE32_O_TIMCTL_TXFRBTHRS = @as(c_uint, 0x0000006C);
pub const LRFDPBE32_O_TIMPER0_TIMPRE = @as(c_uint, 0x00000070);
pub const LRFDPBE32_O_TIMCAPT0_TIMPER1 = @as(c_uint, 0x00000074);
pub const LRFDPBE32_O_TIMCAPT1 = @as(c_uint, 0x00000078);
pub const LRFDPBE32_O_TRCSTAT_TRCCTL = @as(c_uint, 0x00000080);
pub const LRFDPBE32_O_TRCPAR0_TRCCMD = @as(c_uint, 0x00000084);
pub const LRFDPBE32_O_GPOCTRL_TRCPAR1 = @as(c_uint, 0x00000088);
pub const LRFDPBE32_O_MDMFRD_MDMFWR = @as(c_uint, 0x0000008C);
pub const LRFDPBE32_O_MDMFRDCTL_MDMFWRCTL = @as(c_uint, 0x00000090);
pub const LRFDPBE32_O_MDMFSTA_MDMFCFG = @as(c_uint, 0x00000094);
pub const LRFDPBE32_O_PHASTA = @as(c_uint, 0x00000098);
pub const LRFDPBE32_O_LFSR0 = @as(c_uint, 0x0000009C);
pub const LRFDPBE32_O_LFSR0BR = @as(c_uint, 0x000000A0);
pub const LRFDPBE32_O_LFSR1 = @as(c_uint, 0x000000A4);
pub const LRFDPBE32_O_LFSR1BR = @as(c_uint, 0x000000A8);
pub const LRFDPBE32_O_LFSR0N_LFSR0INL = @as(c_uint, 0x000000AC);
pub const LRFDPBE32_O_PHAOUT0_LFSR0INM = @as(c_uint, 0x000000B0);
pub const LRFDPBE32_O_LFSR1N_LFSR1INL = @as(c_uint, 0x000000B4);
pub const LRFDPBE32_O_PHAOUT0BR_LFSR1INM = @as(c_uint, 0x000000B8);
pub const LRFDPBE32_O_SYSTIM0 = @as(c_uint, 0x000000C0);
pub const LRFDPBE32_O_SYSTIM1 = @as(c_uint, 0x000000C4);
pub const LRFDPBE32_O_SYSTIM2 = @as(c_uint, 0x000000C8);
pub const LRFDPBE32_O_GPI = @as(c_uint, 0x000000CC);
pub const LRFDPBE32_O_FSTAT_FCMD = @as(c_uint, 0x000000D0);
pub const LRFDPBE32_O_RXFRP_RXFWP = @as(c_uint, 0x000000D4);
pub const LRFDPBE32_O_RXFSRP_RXFSWP = @as(c_uint, 0x000000D8);
pub const LRFDPBE32_O_TXFRP_TXFWP = @as(c_uint, 0x000000DC);
pub const LRFDPBE32_O_TXFSRP_TXFSWP = @as(c_uint, 0x000000E0);
pub const LRFDPBE32_O_RXFREADABLE_RXFWRITABLE = @as(c_uint, 0x000000E4);
pub const LRFDPBE32_O_TXFREADABLE_TXFWRITABLE = @as(c_uint, 0x000000E8);
pub const LRFDPBE32_O_RXFBWR_RXFBRD = @as(c_uint, 0x000000EC);
pub const LRFDPBE32_O_TXFBWR_TXFBRD = @as(c_uint, 0x000000F0);
pub const LRFDPBE32_O_RXFHWR_RXFHRD = @as(c_uint, 0x000000F4);
pub const LRFDPBE32_O_TXFHWR_TXFHRD = @as(c_uint, 0x000000F8);
pub const LRFDPBE32_FWSRC_ENABLE_DATARAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_DATARAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_DATARAM_S = @as(c_uint, 18);
pub const LRFDPBE32_FWSRC_ENABLE_DATARAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_DATARAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FWSRC_ENABLE_FWRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_FWRAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_FWRAM_S = @as(c_uint, 17);
pub const LRFDPBE32_FWSRC_ENABLE_FWRAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_FWRAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FWSRC_ENABLE_BANK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_BANK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_BANK_S = @as(c_uint, 16);
pub const LRFDPBE32_FWSRC_ENABLE_BANK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FWSRC_ENABLE_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FWSRC_ENABLE_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE32_FWSRC_ENABLE_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_FWSRC_ENABLE_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE32_FWSRC_ENABLE_MDMF_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE32_FWSRC_ENABLE_MDMF_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FWSRC_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE32_FWSRC_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_FWSRC_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE32_FWSRC_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE32_FWSRC_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FWSRC_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FWSRC_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FWSRC_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE32_FWSRC_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FWSRC_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT1_S = @as(c_uint, 22);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT0_S = @as(c_uint, 21);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_STROBES0_INIT_TIMCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_S2RTRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_STROBES0_INIT_S2RTRIG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_STROBES0_INIT_S2RTRIG_S = @as(c_uint, 20);
pub const LRFDPBE32_STROBES0_INIT_S2RTRIG_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_STROBES0_INIT_S2RTRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_DMATRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_STROBES0_INIT_DMATRIG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_STROBES0_INIT_DMATRIG_S = @as(c_uint, 19);
pub const LRFDPBE32_STROBES0_INIT_DMATRIG_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_STROBES0_INIT_DMATRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT2_S = @as(c_uint, 18);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT1_S = @as(c_uint, 17);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT0_S = @as(c_uint, 16);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_STROBES0_INIT_SYSTCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_RFE = @as(c_uint, 0x00000010);
pub const LRFDPBE32_STROBES0_INIT_RFE_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_STROBES0_INIT_RFE_S = @as(c_uint, 4);
pub const LRFDPBE32_STROBES0_INIT_RFE_RESET = @as(c_uint, 0x00000010);
pub const LRFDPBE32_STROBES0_INIT_RFE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_MDM = @as(c_uint, 0x00000008);
pub const LRFDPBE32_STROBES0_INIT_MDM_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_STROBES0_INIT_MDM_S = @as(c_uint, 3);
pub const LRFDPBE32_STROBES0_INIT_MDM_RESET = @as(c_uint, 0x00000008);
pub const LRFDPBE32_STROBES0_INIT_MDM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE32_STROBES0_INIT_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_STROBES0_INIT_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE32_STROBES0_INIT_MDMF_RESET = @as(c_uint, 0x00000004);
pub const LRFDPBE32_STROBES0_INIT_MDMF_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE32_STROBES0_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_STROBES0_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE32_STROBES0_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDPBE32_STROBES0_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_STROBES0_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE32_STROBES0_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_STROBES0_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE32_STROBES0_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE32_STROBES0_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_MDMFAEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAEMPTY_S = @as(c_uint, 31);
pub const LRFDPBE32_EVT0_IRQ_MDMFAEMPTY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_S2RSTOP_S = @as(c_uint, 30);
pub const LRFDPBE32_EVT0_IRQ_S2RSTOP_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_FIFOERR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_FIFOERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_FIFOERR_S = @as(c_uint, 29);
pub const LRFDPBE32_EVT0_IRQ_FIFOERR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_FIFOERR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_MDMFAFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAFULL_S = @as(c_uint, 28);
pub const LRFDPBE32_EVT0_IRQ_MDMFAFULL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMFAFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP2_S = @as(c_uint, 27);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP1_S = @as(c_uint, 26);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP0_S = @as(c_uint, 25);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_MDMMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMMSGBOX_S = @as(c_uint, 24);
pub const LRFDPBE32_EVT0_IRQ_MDMMSGBOX_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_RFEMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEMSGBOX_S = @as(c_uint, 23);
pub const LRFDPBE32_EVT0_IRQ_RFEMSGBOX_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_RFEDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEDAT_S = @as(c_uint, 22);
pub const LRFDPBE32_EVT0_IRQ_RFEDAT_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_RFECMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFECMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFECMD_S = @as(c_uint, 21);
pub const LRFDPBE32_EVT0_IRQ_RFECMD_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVT0_IRQ_RFECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_MDMDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMDAT_S = @as(c_uint, 20);
pub const LRFDPBE32_EVT0_IRQ_MDMDAT_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_MDMCMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMCMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMCMD_S = @as(c_uint, 19);
pub const LRFDPBE32_EVT0_IRQ_MDMCMD_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVT0_IRQ_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_TIMER1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER1_S = @as(c_uint, 18);
pub const LRFDPBE32_EVT0_IRQ_TIMER1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_TIMER0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER0_S = @as(c_uint, 17);
pub const LRFDPBE32_EVT0_IRQ_TIMER0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVT0_IRQ_TIMER0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_PBEAPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVT0_IRQ_PBEAPI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVT0_IRQ_PBEAPI_S = @as(c_uint, 16);
pub const LRFDPBE32_EVT0_IRQ_PBEAPI_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVT0_IRQ_PBEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT15 = @as(c_uint, 0x00008000);
pub const LRFDPBE32_EVT0_IRQ_SOFT15_M = @as(c_uint, 0x00008000);
pub const LRFDPBE32_EVT0_IRQ_SOFT15_S = @as(c_uint, 15);
pub const LRFDPBE32_EVT0_IRQ_SOFT15_ON = @as(c_uint, 0x00008000);
pub const LRFDPBE32_EVT0_IRQ_SOFT15_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT14 = @as(c_uint, 0x00004000);
pub const LRFDPBE32_EVT0_IRQ_SOFT14_M = @as(c_uint, 0x00004000);
pub const LRFDPBE32_EVT0_IRQ_SOFT14_S = @as(c_uint, 14);
pub const LRFDPBE32_EVT0_IRQ_SOFT14_ON = @as(c_uint, 0x00004000);
pub const LRFDPBE32_EVT0_IRQ_SOFT14_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT13 = @as(c_uint, 0x00002000);
pub const LRFDPBE32_EVT0_IRQ_SOFT13_M = @as(c_uint, 0x00002000);
pub const LRFDPBE32_EVT0_IRQ_SOFT13_S = @as(c_uint, 13);
pub const LRFDPBE32_EVT0_IRQ_SOFT13_ON = @as(c_uint, 0x00002000);
pub const LRFDPBE32_EVT0_IRQ_SOFT13_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT12 = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVT0_IRQ_SOFT12_M = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVT0_IRQ_SOFT12_S = @as(c_uint, 12);
pub const LRFDPBE32_EVT0_IRQ_SOFT12_ON = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVT0_IRQ_SOFT12_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT11 = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVT0_IRQ_SOFT11_M = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVT0_IRQ_SOFT11_S = @as(c_uint, 11);
pub const LRFDPBE32_EVT0_IRQ_SOFT11_ON = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVT0_IRQ_SOFT11_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT10 = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVT0_IRQ_SOFT10_M = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVT0_IRQ_SOFT10_S = @as(c_uint, 10);
pub const LRFDPBE32_EVT0_IRQ_SOFT10_ON = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVT0_IRQ_SOFT10_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT9 = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVT0_IRQ_SOFT9_M = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVT0_IRQ_SOFT9_S = @as(c_uint, 9);
pub const LRFDPBE32_EVT0_IRQ_SOFT9_ON = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVT0_IRQ_SOFT9_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT8 = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVT0_IRQ_SOFT8_M = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVT0_IRQ_SOFT8_S = @as(c_uint, 8);
pub const LRFDPBE32_EVT0_IRQ_SOFT8_ON = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVT0_IRQ_SOFT8_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT7 = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVT0_IRQ_SOFT7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVT0_IRQ_SOFT7_S = @as(c_uint, 7);
pub const LRFDPBE32_EVT0_IRQ_SOFT7_ON = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVT0_IRQ_SOFT7_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT6 = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVT0_IRQ_SOFT6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVT0_IRQ_SOFT6_S = @as(c_uint, 6);
pub const LRFDPBE32_EVT0_IRQ_SOFT6_ON = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVT0_IRQ_SOFT6_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT5 = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVT0_IRQ_SOFT5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVT0_IRQ_SOFT5_S = @as(c_uint, 5);
pub const LRFDPBE32_EVT0_IRQ_SOFT5_ON = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVT0_IRQ_SOFT5_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT4 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVT0_IRQ_SOFT4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVT0_IRQ_SOFT4_S = @as(c_uint, 4);
pub const LRFDPBE32_EVT0_IRQ_SOFT4_ON = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVT0_IRQ_SOFT4_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT3 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVT0_IRQ_SOFT3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVT0_IRQ_SOFT3_S = @as(c_uint, 3);
pub const LRFDPBE32_EVT0_IRQ_SOFT3_ON = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVT0_IRQ_SOFT3_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT2 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVT0_IRQ_SOFT2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVT0_IRQ_SOFT2_S = @as(c_uint, 2);
pub const LRFDPBE32_EVT0_IRQ_SOFT2_ON = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVT0_IRQ_SOFT2_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT1 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVT0_IRQ_SOFT1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVT0_IRQ_SOFT1_S = @as(c_uint, 1);
pub const LRFDPBE32_EVT0_IRQ_SOFT1_ON = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVT0_IRQ_SOFT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVT0_IRQ_SOFT0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVT0_IRQ_SOFT0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVT0_IRQ_SOFT0_S = @as(c_uint, 0);
pub const LRFDPBE32_EVT0_IRQ_SOFT0_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVT0_IRQ_SOFT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAEMPTY_S = @as(c_uint, 31);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAEMPTY_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAEMPTY_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_S2RSTOP_S = @as(c_uint, 30);
pub const LRFDPBE32_EVTMSK0_EVT1_S2RSTOP_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_FIFOERR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_FIFOERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_FIFOERR_S = @as(c_uint, 29);
pub const LRFDPBE32_EVTMSK0_EVT1_FIFOERR_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_FIFOERR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAFULL_S = @as(c_uint, 28);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAFULL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMFAFULL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP2_S = @as(c_uint, 27);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP1_S = @as(c_uint, 26);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP0_S = @as(c_uint, 25);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMMSGBOX_S = @as(c_uint, 24);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMMSGBOX_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEMSGBOX_S = @as(c_uint, 23);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEMSGBOX_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEDAT_S = @as(c_uint, 22);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEDAT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_RFECMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFECMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFECMD_S = @as(c_uint, 21);
pub const LRFDPBE32_EVTMSK0_EVT1_RFECMD_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_RFECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMDAT_S = @as(c_uint, 20);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMDAT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMCMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMCMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMCMD_S = @as(c_uint, 19);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMCMD_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER1_S = @as(c_uint, 18);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER0_S = @as(c_uint, 17);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_TIMER0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEAPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEAPI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEAPI_S = @as(c_uint, 16);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEAPI_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTMSK0_EVT1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTMSK0_EVT1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE32_EVTMSK0_EVT1_TXRDBTHR_MET = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTMSK0_EVT1_TXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTMSK0_EVT1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTMSK0_EVT1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE32_EVTMSK0_EVT1_TXWRBTHR_MET = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTMSK0_EVT1_TXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTMSK0_EVT1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTMSK0_EVT1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE32_EVTMSK0_EVT1_RXRDBTHR_MET = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTMSK0_EVT1_RXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTMSK0_EVT1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTMSK0_EVT1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE32_EVTMSK0_EVT1_RXWRBTHR_MET = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTMSK0_EVT1_RXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMPROG_ONE = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTMSK0_EVT1_MDMPROG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTMSK0_EVT1_PBEGPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAEMPTY_S = @as(c_uint, 31);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAEMPTY_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAEMPTY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_S2RSTOP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_S2RSTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_S2RSTOP_S = @as(c_uint, 30);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_S2RSTOP_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_S2RSTOP_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_FIFOERR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_FIFOERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_FIFOERR_S = @as(c_uint, 29);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_FIFOERR_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_FIFOERR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAFULL_S = @as(c_uint, 28);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAFULL_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMFAFULL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP2_S = @as(c_uint, 27);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP2_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP1_S = @as(c_uint, 26);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP1_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP0_S = @as(c_uint, 25);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP0_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_SYSTCMP0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMMSGBOX_S = @as(c_uint, 24);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMMSGBOX_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEMSGBOX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEMSGBOX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEMSGBOX_S = @as(c_uint, 23);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEMSGBOX_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEDAT_S = @as(c_uint, 22);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEDAT_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFECMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFECMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFECMD_S = @as(c_uint, 21);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFECMD_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RFECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMDAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMDAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMDAT_S = @as(c_uint, 20);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMDAT_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMCMD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMCMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMCMD_S = @as(c_uint, 19);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMCMD_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMCMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER1_S = @as(c_uint, 18);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER1_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER0_S = @as(c_uint, 17);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER0_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TIMER0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEAPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEAPI_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEAPI_S = @as(c_uint, 16);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEAPI_CLEAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEAPI_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXRDBTHR_EN = @as(c_uint, 0x00001000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXWRBTHR_EN = @as(c_uint, 0x00000800);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_TXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXRDBTHR_EN = @as(c_uint, 0x00000400);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXWRBTHR_EN = @as(c_uint, 0x00000200);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_RXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMPROG_EN = @as(c_uint, 0x00000100);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_MDMPROG_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI7_EN = @as(c_uint, 0x00000080);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI6_EN = @as(c_uint, 0x00000040);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI5_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI4_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI3_EN = @as(c_uint, 0x00000008);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI2_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI1_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI0_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE32_EVTCLR0_EVTMSK1_PBEGPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TOPSMPDREQ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_PDREQ_EVTCLR1_TOPSMPDREQ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_PDREQ_EVTCLR1_TOPSMPDREQ_S = @as(c_uint, 16);
pub const LRFDPBE32_PDREQ_EVTCLR1_TOPSMPDREQ_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_PDREQ_EVTCLR1_TOPSMPDREQ_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXRDBTHR_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXWRBTHR_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDPBE32_PDREQ_EVTCLR1_TXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXRDBTHR_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXWRBTHR_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDPBE32_PDREQ_EVTCLR1_RXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE32_PDREQ_EVTCLR1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE32_PDREQ_EVTCLR1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE32_PDREQ_EVTCLR1_MDMPROG_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDPBE32_PDREQ_EVTCLR1_MDMPROG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI7_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI7_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI6_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI6_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI5_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI5_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI4_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI4_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI3_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI3_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI2_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI1_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI0_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDPBE32_PDREQ_EVTCLR1_PBEGPI0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MCEDATOUT0_API_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_MCEDATOUT0_API_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MCEDATOUT0_API_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_MCEDATOUT0_API_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MCEDATOUT0_API_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MCEDATOUT0_API_PBECMD_W = @as(c_uint, 5);
pub const LRFDPBE32_MCEDATOUT0_API_PBECMD_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE32_MCEDATOUT0_API_PBECMD_S = @as(c_uint, 0);
pub const LRFDPBE32_MCEDATOUT0_API_PBECMD_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDPBE32_MCEDATOUT0_API_PBECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCECMDOUT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCECMDOUT_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCECMDOUT_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MCECMDOUT_MCEDATIN0_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMAPI_MCECMDIN_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE32_MDMAPI_MCECMDIN_PROTOCOLID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDPBE32_MDMAPI_MCECMDIN_PROTOCOLID_S = @as(c_uint, 20);
pub const LRFDPBE32_MDMAPI_MCECMDIN_PROTOCOLID_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDPBE32_MDMAPI_MCECMDIN_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMAPI_MCECMDIN_MDMCMD_W = @as(c_uint, 4);
pub const LRFDPBE32_MDMAPI_MCECMDIN_MDMCMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MDMAPI_MCECMDIN_MDMCMD_S = @as(c_uint, 16);
pub const LRFDPBE32_MDMAPI_MCECMDIN_MDMCMD_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MDMAPI_MCECMDIN_MDMCMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMAPI_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE32_MDMAPI_MCECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_MDMAPI_MCECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMAPI_MCECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_MDMAPI_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FREQ_MDMMSGBOX_OFFSET_W = @as(c_uint, 16);
pub const LRFDPBE32_FREQ_MDMMSGBOX_OFFSET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_FREQ_MDMMSGBOX_OFFSET_S = @as(c_uint, 16);
pub const LRFDPBE32_FREQ_MDMMSGBOX_OFFSET_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_FREQ_MDMMSGBOX_OFFSET_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FREQ_MDMMSGBOX_VALUE_W = @as(c_uint, 8);
pub const LRFDPBE32_FREQ_MDMMSGBOX_VALUE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_FREQ_MDMMSGBOX_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE32_FREQ_MDMMSGBOX_VALUE_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_FREQ_MDMMSGBOX_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_RFEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_RFEDATOUT0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_RFEDATOUT0_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_RFEDATOUT0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_RFEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_MDMLQI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_MDMLQI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_MDMLQI_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_MDMLQI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFEDATOUT0_MDMLQI_MDMLQI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFECMDOUT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFECMDOUT_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFECMDOUT_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RFECMDOUT_RFEDATIN0_RFEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFEAPI_RFECMDIN_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE32_RFEAPI_RFECMDIN_PROTOCOLID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDPBE32_RFEAPI_RFECMDIN_PROTOCOLID_S = @as(c_uint, 20);
pub const LRFDPBE32_RFEAPI_RFECMDIN_PROTOCOLID_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDPBE32_RFEAPI_RFECMDIN_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFEAPI_RFECMDIN_RFECMD_W = @as(c_uint, 4);
pub const LRFDPBE32_RFEAPI_RFECMDIN_RFECMD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_RFEAPI_RFECMDIN_RFECMD_S = @as(c_uint, 16);
pub const LRFDPBE32_RFEAPI_RFECMDIN_RFECMD_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_RFEAPI_RFECMDIN_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFEAPI_RFECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE32_RFEAPI_RFECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_RFEAPI_RFECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFEAPI_RFECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_RFEAPI_RFECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR1_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR1_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RFECMDPAR1_RFECMDPAR0_RFECMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFERSSI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFERSSI_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFERSSI_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFERSSI_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFERSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFEMSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFEMSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFEMSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFEMSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFERSSI_RFEMSGBOX_RFEMSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_DBGAIN_W = @as(c_uint, 8);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_DBGAIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_DBGAIN_S = @as(c_uint, 16);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_DBGAIN_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RFERFGAIN_RFERSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMSYNCA_SWA_W = @as(c_uint, 32);
pub const LRFDPBE32_MDMSYNCA_SWA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_MDMSYNCA_SWA_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMSYNCA_SWA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMSYNCA_SWA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMSYNCB_SWB_W = @as(c_uint, 32);
pub const LRFDPBE32_MDMSYNCB_SWB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_MDMSYNCB_SWB_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMSYNCB_SWB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMSYNCB_SWB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR1_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR1_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMCMDPAR1_MDMCMDPAR0_MDMCMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMCMDPAR2_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_MDMCMDPAR2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMCMDPAR2_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMCMDPAR2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMCMDPAR2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_POLY0_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_POLY0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_POLY0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_POLY0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_POLY0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_POLY1_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_POLY1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_POLY1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_POLY1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_POLY1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_TXIRQMET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXIRQMET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXIRQMET_S = @as(c_uint, 23);
pub const LRFDPBE32_FCFG0_PHACFG_TXIRQMET_TXRDBTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXIRQMET_TXWRBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_RXIRQMET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXIRQMET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXIRQMET_S = @as(c_uint, 22);
pub const LRFDPBE32_FCFG0_PHACFG_RXIRQMET_RXWRBTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXIRQMET_RXRDBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_TXACOM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXACOM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXACOM_S = @as(c_uint, 21);
pub const LRFDPBE32_FCFG0_PHACFG_TXACOM_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_TXADEAL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXADEAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXADEAL_S = @as(c_uint, 20);
pub const LRFDPBE32_FCFG0_PHACFG_TXADEAL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_TXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_RXACOM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXACOM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXACOM_S = @as(c_uint, 17);
pub const LRFDPBE32_FCFG0_PHACFG_RXACOM_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_RXADEAL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXADEAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXADEAL_S = @as(c_uint, 16);
pub const LRFDPBE32_FCFG0_PHACFG_RXADEAL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FCFG0_PHACFG_RXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_W = @as(c_uint, 2);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_M = @as(c_uint, 0x00000006);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_S = @as(c_uint, 1);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_PARAL = @as(c_uint, 0x00000004);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_CASC = @as(c_uint, 0x00000002);
pub const LRFDPBE32_FCFG0_PHACFG_MODE1_INDEP = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG0_PHACFG_MODE0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FCFG0_PHACFG_MODE0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FCFG0_PHACFG_MODE0_S = @as(c_uint, 0);
pub const LRFDPBE32_FCFG0_PHACFG_MODE0_WHITE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_FCFG0_PHACFG_MODE0_CRC = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_S = @as(c_uint, 24);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_WORD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_HALFW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_FCFG2_FCFG1_TXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG2_FCFG1_TXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE32_FCFG2_FCFG1_TXSIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_FCFG2_FCFG1_TXSIZE_S = @as(c_uint, 16);
pub const LRFDPBE32_FCFG2_FCFG1_TXSIZE_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_FCFG2_FCFG1_TXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG2_FCFG1_TXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE32_FCFG2_FCFG1_TXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE32_FCFG2_FCFG1_TXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE32_FCFG2_FCFG1_TXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE32_FCFG2_FCFG1_TXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_S = @as(c_uint, 24);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_WORD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_HALFW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_FCFG4_FCFG3_RXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG4_FCFG3_RXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE32_FCFG4_FCFG3_RXSIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_FCFG4_FCFG3_RXSIZE_S = @as(c_uint, 16);
pub const LRFDPBE32_FCFG4_FCFG3_RXSIZE_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_FCFG4_FCFG3_RXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FCFG4_FCFG3_RXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE32_FCFG4_FCFG3_RXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE32_FCFG4_FCFG3_RXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE32_FCFG4_FCFG3_RXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE32_FCFG4_FCFG3_RXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_BYTES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_BYTES_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_BYTES_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_W = @as(c_uint, 3);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_M = @as(c_uint, 0x000001C0);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_S = @as(c_uint, 6);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_TXFIFOFREE = @as(c_uint, 0x00000100);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_TXFIFOMD = @as(c_uint, 0x000000C0);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_RXFIFOFREE = @as(c_uint, 0x00000080);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_RXFIFOMD = @as(c_uint, 0x00000040);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMASREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_W = @as(c_uint, 5);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXFIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXFIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXFIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXFIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXFIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXWRBTHR_MET = @as(c_uint, 0x0000000A);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_TXRDBTHR_MET = @as(c_uint, 0x00000009);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXFIFO_COMMIT = @as(c_uint, 0x00000007);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXFIFO_DISCARD = @as(c_uint, 0x00000006);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXFIFO_DEALLOC = @as(c_uint, 0x00000004);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXFIFO_RESET = @as(c_uint, 0x00000003);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXWRBTHR_MET = @as(c_uint, 0x00000002);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_RXRDBTHR_MET = @as(c_uint, 0x00000001);
pub const LRFDPBE32_RXFWBTHRS_FCFG5_DMAREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_TXFWBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_TXFWBTHRS_BYTES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_TXFWBTHRS_BYTES_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_TXFWBTHRS_BYTES_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_TXFWBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_RXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_RXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_RXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_RXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFWBTHRS_RXFRBTHRS_RXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC1_W = @as(c_uint, 5);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF8000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC1_S = @as(c_uint, 27);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC1_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF8000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT1_S = @as(c_uint, 26);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT1_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC1_S = @as(c_uint, 25);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC1_PRE1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC1_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN1_S = @as(c_uint, 24);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN1_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC0_W = @as(c_uint, 5);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F80000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC0_S = @as(c_uint, 19);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC0_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F80000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_CPTSRC0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT0_S = @as(c_uint, 18);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT0_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_ENCPT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC0_S = @as(c_uint, 17);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC0_PRE0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_SRC0_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN0_S = @as(c_uint, 16);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN0_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_EN0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TIMCTL_TXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMPER0_TIMPRE_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_TIMPER0_TIMPRE_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TIMPER0_TIMPRE_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_TIMPER0_TIMPRE_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TIMPER0_TIMPRE_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE1_W = @as(c_uint, 6);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE1_M = @as(c_uint, 0x00003F00);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE1_S = @as(c_uint, 8);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE1_DIV64 = @as(c_uint, 0x00003F00);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE1_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE0_W = @as(c_uint, 6);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE0_M = @as(c_uint, 0x0000003F);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE0_S = @as(c_uint, 0);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE0_DIV64 = @as(c_uint, 0x0000003F);
pub const LRFDPBE32_TIMPER0_TIMPRE_PRE0_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VALUE_S = @as(c_uint, 16);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VALUE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TIMCAPT0_TIMPER1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TIMCAPT1_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE32_TIMCAPT1_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TIMCAPT1_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE32_TIMCAPT1_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TIMCAPT1_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TRCSTAT_TRCCTL_BUSY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TRCSTAT_TRCCTL_BUSY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TRCSTAT_TRCCTL_BUSY_S = @as(c_uint, 16);
pub const LRFDPBE32_TRCSTAT_TRCCTL_BUSY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_TRCSTAT_TRCCTL_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TRCSTAT_TRCCTL_SEND = @as(c_uint, 0x00000001);
pub const LRFDPBE32_TRCSTAT_TRCCTL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_TRCSTAT_TRCCTL_SEND_S = @as(c_uint, 0);
pub const LRFDPBE32_TRCSTAT_TRCCTL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_TRCSTAT_TRCCTL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TRCPAR0_TRCCMD_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_TRCPAR0_TRCCMD_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TRCPAR0_TRCCMD_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_TRCPAR0_TRCCMD_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TRCPAR0_TRCCMD_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_TRCPAR0_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO7_S = @as(c_uint, 23);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO6_S = @as(c_uint, 22);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO5_S = @as(c_uint, 21);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO5_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO4_S = @as(c_uint, 20);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO4_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO3_S = @as(c_uint, 19);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO2_S = @as(c_uint, 18);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO1_S = @as(c_uint, 17);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO0_S = @as(c_uint, 16);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_GPOCTRL_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADOUT_W = @as(c_uint, 16);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADOUT_S = @as(c_uint, 16);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADOUT_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADOUT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADIN_W = @as(c_uint, 16);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADIN_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_MDMFRD_MDMFWR_PAYLOADIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_W = @as(c_uint, 4);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_S = @as(c_uint, 16);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS13 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZRD_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_W = @as(c_uint, 4);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_MDMFRDCTL_MDMFWRCTL_WORDSZWR_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_OVFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_OVFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_OVFL_S = @as(c_uint, 21);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_OVFL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_OVFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTFULL_S = @as(c_uint, 20);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTFULL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTEMPTY_S = @as(c_uint, 19);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTEMPTY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_ALMOSTEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_UNFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_UNFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_UNFL_S = @as(c_uint, 18);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_UNFL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_UNFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_RXVALID = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_RXVALID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_RXVALID_S = @as(c_uint, 17);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_RXVALID_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_RXVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_TXREADY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_TXREADY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_TXREADY_S = @as(c_uint, 16);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_TXREADY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_TXREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AFULLTHR_W = @as(c_uint, 8);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AFULLTHR_M = @as(c_uint, 0x0000FF00);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AFULLTHR_S = @as(c_uint, 8);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AFULLTHR_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AFULLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AEMPTYTHR_W = @as(c_uint, 8);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AEMPTYTHR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AEMPTYTHR_S = @as(c_uint, 0);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AEMPTYTHR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_MDMFSTA_MDMFCFG_AEMPTYTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PHASTA_BUSY_W = @as(c_uint, 2);
pub const LRFDPBE32_PHASTA_BUSY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDPBE32_PHASTA_BUSY_S = @as(c_uint, 16);
pub const LRFDPBE32_PHASTA_BUSY_BUSY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_PHASTA_BUSY_IDLE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR0_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_LFSR0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_LFSR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR0BR_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_LFSR0BR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_LFSR0BR_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR0BR_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR0BR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR1_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_LFSR1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_LFSR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR1BR_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_LFSR1BR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_LFSR1BR_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR1BR_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR1BR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR0N_LFSR0INL_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE32_LFSR0N_LFSR0INL_SIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_LFSR0N_LFSR0INL_SIZE_S = @as(c_uint, 16);
pub const LRFDPBE32_LFSR0N_LFSR0INL_SIZE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_LFSR0N_LFSR0INL_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR0N_LFSR0INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_LFSR0N_LFSR0INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR0N_LFSR0INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR0N_LFSR0INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE32_LFSR0N_LFSR0INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_PHAOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_PHAOUT0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_PHAOUT0_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_PHAOUT0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xDCD70000, .hex);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_PHAOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_LFSR0INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_LFSR0INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_LFSR0INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_LFSR0INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_PHAOUT0_LFSR0INM_LFSR0INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR1N_LFSR1INL_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE32_LFSR1N_LFSR1INL_SIZE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_LFSR1N_LFSR1INL_SIZE_S = @as(c_uint, 16);
pub const LRFDPBE32_LFSR1N_LFSR1INL_SIZE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDPBE32_LFSR1N_LFSR1INL_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_LFSR1N_LFSR1INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_LFSR1N_LFSR1INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_LFSR1N_LFSR1INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_LFSR1N_LFSR1INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE32_LFSR1N_LFSR1INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_PHAOUT0BR_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_PHAOUT0BR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_PHAOUT0BR_VAL_S = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_PHAOUT0BR_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_PHAOUT0BR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_LFSR1INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_LFSR1INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_LFSR1INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_LFSR1INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_PHAOUT0BR_LFSR1INM_LFSR1INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_SYSTIM0_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_SYSTIM0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_SYSTIM0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_SYSTIM0_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_SYSTIM0_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_SYSTIM1_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_SYSTIM1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_SYSTIM1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_SYSTIM1_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_SYSTIM1_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_SYSTIM2_VAL_W = @as(c_uint, 32);
pub const LRFDPBE32_SYSTIM2_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDPBE32_SYSTIM2_VAL_S = @as(c_uint, 0);
pub const LRFDPBE32_SYSTIM2_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_SYSTIM2_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE32_GPI_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE32_GPI_GPI7_S = @as(c_uint, 7);
pub const LRFDPBE32_GPI_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE32_GPI_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE32_GPI_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE32_GPI_GPI6_S = @as(c_uint, 6);
pub const LRFDPBE32_GPI_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE32_GPI_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE32_GPI_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE32_GPI_GPI5_S = @as(c_uint, 5);
pub const LRFDPBE32_GPI_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE32_GPI_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE32_GPI_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE32_GPI_GPI4_S = @as(c_uint, 4);
pub const LRFDPBE32_GPI_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE32_GPI_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE32_GPI_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE32_GPI_GPI3_S = @as(c_uint, 3);
pub const LRFDPBE32_GPI_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE32_GPI_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE32_GPI_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE32_GPI_GPI2_S = @as(c_uint, 2);
pub const LRFDPBE32_GPI_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE32_GPI_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE32_GPI_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE32_GPI_GPI1_S = @as(c_uint, 1);
pub const LRFDPBE32_GPI_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE32_GPI_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_GPI_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE32_GPI_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE32_GPI_GPI0_S = @as(c_uint, 0);
pub const LRFDPBE32_GPI_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE32_GPI_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_TXUNFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXUNFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXUNFL_S = @as(c_uint, 27);
pub const LRFDPBE32_FSTAT_FCMD_TXUNFL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_TXOVFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXOVFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXOVFL_S = @as(c_uint, 26);
pub const LRFDPBE32_FSTAT_FCMD_TXOVFL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_TXEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXEMPTY_S = @as(c_uint, 25);
pub const LRFDPBE32_FSTAT_FCMD_TXEMPTY_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_TXFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXFULL_S = @as(c_uint, 24);
pub const LRFDPBE32_FSTAT_FCMD_TXFULL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_TXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_RXUNFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXUNFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXUNFL_S = @as(c_uint, 19);
pub const LRFDPBE32_FSTAT_FCMD_RXUNFL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_RXOVFL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXOVFL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXOVFL_S = @as(c_uint, 18);
pub const LRFDPBE32_FSTAT_FCMD_RXOVFL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_RXEMPTY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXEMPTY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXEMPTY_S = @as(c_uint, 17);
pub const LRFDPBE32_FSTAT_FCMD_RXEMPTY_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_RXFULL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXFULL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXFULL_S = @as(c_uint, 16);
pub const LRFDPBE32_FSTAT_FCMD_RXFULL_TRUE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDPBE32_FSTAT_FCMD_RXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE32_FSTAT_FCMD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE32_FSTAT_FCMD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_FSTAT_FCMD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE32_FSTAT_FCMD_DATA_FIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE32_FSTAT_FCMD_DATA_FIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE32_FSTAT_FCMD_DATA_FIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE32_FSTAT_FCMD_DATA_FIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE32_FSTAT_FCMD_DATA_FIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE32_FSTAT_FCMD_DATA_RXFIFO_RETRY = @as(c_uint, 0x0000000A);
pub const LRFDPBE32_FSTAT_FCMD_DATA_RXFIFO_DISCARD = @as(c_uint, 0x00000009);
pub const LRFDPBE32_FSTAT_FCMD_DATA_RXFIFO_COMMIT = @as(c_uint, 0x00000008);
pub const LRFDPBE32_FSTAT_FCMD_DATA_TXFIFO_RESET = @as(c_uint, 0x00000007);
pub const LRFDPBE32_FSTAT_FCMD_DATA_TXFIFO_DEALLOC = @as(c_uint, 0x00000006);
pub const LRFDPBE32_FSTAT_FCMD_DATA_TXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE32_FSTAT_FCMD_DATA_TXFIFO_DISCARD = @as(c_uint, 0x00000004);
pub const LRFDPBE32_FSTAT_FCMD_DATA_TXFIFO_COMMIT = @as(c_uint, 0x00000003);
pub const LRFDPBE32_FSTAT_FCMD_DATA_RXFIFO_DEALLOC = @as(c_uint, 0x00000002);
pub const LRFDPBE32_FSTAT_FCMD_DATA_RXFIFO_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE32_RXFRP_RXFWP_RXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFRP_RXFWP_RXFRP_PTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFRP_RXFWP_RXFRP_PTR_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFRP_RXFWP_RXFRP_PTR_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFRP_RXFWP_RXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFRP_RXFWP_RXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFRP_RXFWP_RXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFRP_RXFWP_RXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFRP_RXFWP_RXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFRP_RXFWP_RXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSRP_PTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSRP_PTR_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSRP_PTR_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFSRP_RXFSWP_RXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFRP_TXFWP_TXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFRP_TXFWP_TXFRP_PTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFRP_TXFWP_TXFRP_PTR_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFRP_TXFWP_TXFRP_PTR_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFRP_TXFWP_TXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFRP_TXFWP_TXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFRP_TXFWP_TXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFRP_TXFWP_TXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFRP_TXFWP_TXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFRP_TXFWP_TXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSRP_PTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSRP_PTR_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSRP_PTR_ALLONES_2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFSRP_TXFSWP_TXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFREADABLE_BYTES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFREADABLE_BYTES_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFREADABLE_BYTES_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_RXFREADABLE_RXFWRITABLE_RXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFREADABLE_BYTES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFREADABLE_BYTES_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFREADABLE_BYTES_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FF0000, .hex);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE32_TXFREADABLE_TXFWRITABLE_TXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBWR_DATA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBWR_DATA_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBWR_DATA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_RXFBWR_RXFBRD_RXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBWR_DATA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBWR_DATA_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBWR_DATA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE32_TXFBWR_TXFBRD_TXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHWR_DATA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHWR_DATA_S = @as(c_uint, 16);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHWR_DATA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_RXFHWR_RXFHRD_RXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHWR_DATA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHWR_DATA_S = @as(c_uint, 16);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHWR_DATA_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE32_TXFHWR_TXFHRD_TXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const __HW_LRFDRFE_H__ = "";
pub const LRFDRFE_O_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_O_FWSRC = @as(c_uint, 0x00000004);
pub const LRFDRFE_O_INIT = @as(c_uint, 0x00000008);
pub const LRFDRFE_O_PDREQ = @as(c_uint, 0x0000000C);
pub const LRFDRFE_O_EVT0 = @as(c_uint, 0x00000010);
pub const LRFDRFE_O_EVT1 = @as(c_uint, 0x00000014);
pub const LRFDRFE_O_EVTMSK0 = @as(c_uint, 0x00000018);
pub const LRFDRFE_O_EVTMSK1 = @as(c_uint, 0x0000001C);
pub const LRFDRFE_O_EVTCLR0 = @as(c_uint, 0x00000020);
pub const LRFDRFE_O_EVTCLR1 = @as(c_uint, 0x00000024);
pub const LRFDRFE_O_HFXTSTAT = @as(c_uint, 0x00000028);
pub const LRFDRFE_O_RFSTATE = @as(c_uint, 0x00000030);
pub const LRFDRFE_O_API = @as(c_uint, 0x00000048);
pub const LRFDRFE_O_CMDPAR0 = @as(c_uint, 0x0000004C);
pub const LRFDRFE_O_CMDPAR1 = @as(c_uint, 0x00000050);
pub const LRFDRFE_O_MSGBOX = @as(c_uint, 0x00000054);
pub const LRFDRFE_O_MCEDATOUT0 = @as(c_uint, 0x00000058);
pub const LRFDRFE_O_MCEDATIN0 = @as(c_uint, 0x0000005C);
pub const LRFDRFE_O_MCECMDOUT = @as(c_uint, 0x00000060);
pub const LRFDRFE_O_MCECMDIN = @as(c_uint, 0x00000064);
pub const LRFDRFE_O_PBEDATOUT0 = @as(c_uint, 0x00000068);
pub const LRFDRFE_O_PBEDATIN0 = @as(c_uint, 0x0000006C);
pub const LRFDRFE_O_PBECMDOUT = @as(c_uint, 0x00000070);
pub const LRFDRFE_O_PBECMDIN = @as(c_uint, 0x00000074);
pub const LRFDRFE_O_STRB = @as(c_uint, 0x00000078);
pub const LRFDRFE_O_MAGNTHRCFG = @as(c_uint, 0x00000080);
pub const LRFDRFE_O_MAGNTHR = @as(c_uint, 0x00000084);
pub const LRFDRFE_O_RSSIOFFSET = @as(c_uint, 0x00000088);
pub const LRFDRFE_O_GAINCTL = @as(c_uint, 0x0000008C);
pub const LRFDRFE_O_MAGNCTL0 = @as(c_uint, 0x00000090);
pub const LRFDRFE_O_MAGNCTL1 = @as(c_uint, 0x00000094);
pub const LRFDRFE_O_SPARE0 = @as(c_uint, 0x00000098);
pub const LRFDRFE_O_SPARE1 = @as(c_uint, 0x0000009C);
pub const LRFDRFE_O_SPARE2 = @as(c_uint, 0x000000A0);
pub const LRFDRFE_O_SPARE3 = @as(c_uint, 0x000000A4);
pub const LRFDRFE_O_SPARE4 = @as(c_uint, 0x000000A8);
pub const LRFDRFE_O_SPARE5 = @as(c_uint, 0x000000AC);
pub const LRFDRFE_O_LNA = @as(c_uint, 0x000000B0);
pub const LRFDRFE_O_IFAMPRFLDO = @as(c_uint, 0x000000B4);
pub const LRFDRFE_O_PA0 = @as(c_uint, 0x000000B8);
pub const LRFDRFE_O_PA1 = @as(c_uint, 0x000000BC);
pub const LRFDRFE_O_ULNA = @as(c_uint, 0x000000C0);
pub const LRFDRFE_O_IFADC0 = @as(c_uint, 0x000000C4);
pub const LRFDRFE_O_IFADC1 = @as(c_uint, 0x000000C8);
pub const LRFDRFE_O_IFADCLF = @as(c_uint, 0x000000CC);
pub const LRFDRFE_O_IFADCQUANT = @as(c_uint, 0x000000D0);
pub const LRFDRFE_O_IFADCALDO = @as(c_uint, 0x000000D4);
pub const LRFDRFE_O_IFADCDLDO = @as(c_uint, 0x000000D8);
pub const LRFDRFE_O_IFADCTST = @as(c_uint, 0x000000DC);
pub const LRFDRFE_O_ATSTREFL = @as(c_uint, 0x000000E0);
pub const LRFDRFE_O_ATSTREFH = @as(c_uint, 0x000000E4);
pub const LRFDRFE_O_DCO = @as(c_uint, 0x000000E8);
pub const LRFDRFE_O_DIV = @as(c_uint, 0x000000EC);
pub const LRFDRFE_O_DIVLDO = @as(c_uint, 0x000000F0);
pub const LRFDRFE_O_TDCLDO = @as(c_uint, 0x000000F4);
pub const LRFDRFE_O_DCOLDO0 = @as(c_uint, 0x000000F8);
pub const LRFDRFE_O_DCOLDO1 = @as(c_uint, 0x000000FC);
pub const LRFDRFE_O_PRE0 = @as(c_uint, 0x00000100);
pub const LRFDRFE_O_PRE1 = @as(c_uint, 0x00000104);
pub const LRFDRFE_O_PRE2 = @as(c_uint, 0x00000108);
pub const LRFDRFE_O_PRE3 = @as(c_uint, 0x0000010C);
pub const LRFDRFE_O_CAL0 = @as(c_uint, 0x00000110);
pub const LRFDRFE_O_CAL1 = @as(c_uint, 0x00000114);
pub const LRFDRFE_O_CAL2 = @as(c_uint, 0x00000118);
pub const LRFDRFE_O_CAL3 = @as(c_uint, 0x0000011C);
pub const LRFDRFE_O_MISC0 = @as(c_uint, 0x00000120);
pub const LRFDRFE_O_MISC1 = @as(c_uint, 0x00000124);
pub const LRFDRFE_O_LF0 = @as(c_uint, 0x00000128);
pub const LRFDRFE_O_LF1 = @as(c_uint, 0x0000012C);
pub const LRFDRFE_O_PHEDISC = @as(c_uint, 0x00000130);
pub const LRFDRFE_O_PHINIT = @as(c_uint, 0x00000134);
pub const LRFDRFE_O_PLLMON0 = @as(c_uint, 0x00000138);
pub const LRFDRFE_O_PLLMON1 = @as(c_uint, 0x0000013C);
pub const LRFDRFE_O_MOD0 = @as(c_uint, 0x00000140);
pub const LRFDRFE_O_MOD1 = @as(c_uint, 0x00000144);
pub const LRFDRFE_O_DTX0 = @as(c_uint, 0x00000148);
pub const LRFDRFE_O_DTX1 = @as(c_uint, 0x0000014C);
pub const LRFDRFE_O_DTX2 = @as(c_uint, 0x00000150);
pub const LRFDRFE_O_DTX3 = @as(c_uint, 0x00000154);
pub const LRFDRFE_O_DTX4 = @as(c_uint, 0x00000158);
pub const LRFDRFE_O_DTX5 = @as(c_uint, 0x0000015C);
pub const LRFDRFE_O_DTX6 = @as(c_uint, 0x00000160);
pub const LRFDRFE_O_DTX7 = @as(c_uint, 0x00000164);
pub const LRFDRFE_O_DTX8 = @as(c_uint, 0x00000168);
pub const LRFDRFE_O_DTX9 = @as(c_uint, 0x0000016C);
pub const LRFDRFE_O_DTX10 = @as(c_uint, 0x00000170);
pub const LRFDRFE_O_DTX11 = @as(c_uint, 0x00000174);
pub const LRFDRFE_O_PLLM0L = @as(c_uint, 0x00000178);
pub const LRFDRFE_O_PLLM0H = @as(c_uint, 0x0000017C);
pub const LRFDRFE_O_PLLM1L = @as(c_uint, 0x00000180);
pub const LRFDRFE_O_PLLM1H = @as(c_uint, 0x00000184);
pub const LRFDRFE_O_CALMCRS = @as(c_uint, 0x00000188);
pub const LRFDRFE_O_CALMMID = @as(c_uint, 0x0000018C);
pub const LRFDRFE_O_REFDIV = @as(c_uint, 0x00000190);
pub const LRFDRFE_O_DLOCTL0 = @as(c_uint, 0x00000198);
pub const LRFDRFE_O_DLOCTL1 = @as(c_uint, 0x000001A0);
pub const LRFDRFE_O_DCOOVR0 = @as(c_uint, 0x000001A8);
pub const LRFDRFE_O_DCOOVR1 = @as(c_uint, 0x000001AC);
pub const LRFDRFE_O_DTST = @as(c_uint, 0x000001B0);
pub const LRFDRFE_O_DLOEV = @as(c_uint, 0x000001B4);
pub const LRFDRFE_O_DTSTRD = @as(c_uint, 0x000001B8);
pub const LRFDRFE_O_FDCOSPANLSB = @as(c_uint, 0x000001BC);
pub const LRFDRFE_O_FDCOSPANMSB = @as(c_uint, 0x000001C0);
pub const LRFDRFE_O_TDCCAL = @as(c_uint, 0x000001C4);
pub const LRFDRFE_O_CALRES = @as(c_uint, 0x000001C8);
pub const LRFDRFE_O_GPI = @as(c_uint, 0x000001CC);
pub const LRFDRFE_O_MATHACCELIN = @as(c_uint, 0x000001D0);
pub const LRFDRFE_O_LIN2LOGOUT = @as(c_uint, 0x000001D4);
pub const LRFDRFE_O_DIVBY3OUT = @as(c_uint, 0x000001D8);
pub const LRFDRFE_O_TIMCTL = @as(c_uint, 0x000001DC);
pub const LRFDRFE_O_TIMINC = @as(c_uint, 0x000001E0);
pub const LRFDRFE_O_TIMPER = @as(c_uint, 0x000001E4);
pub const LRFDRFE_O_TIMCNT = @as(c_uint, 0x000001E8);
pub const LRFDRFE_O_TIMCAPT = @as(c_uint, 0x000001EC);
pub const LRFDRFE_O_TRCCTRL = @as(c_uint, 0x000001F0);
pub const LRFDRFE_O_TRCSTAT = @as(c_uint, 0x000001F4);
pub const LRFDRFE_O_TRCCMD = @as(c_uint, 0x000001F8);
pub const LRFDRFE_O_TRCPAR0 = @as(c_uint, 0x000001FC);
pub const LRFDRFE_O_TRCPAR1 = @as(c_uint, 0x00000200);
pub const LRFDRFE_O_GPOCTL = @as(c_uint, 0x00000204);
pub const LRFDRFE_O_ANAISOCTL = @as(c_uint, 0x00000208);
pub const LRFDRFE_O_DIVCTL = @as(c_uint, 0x0000020C);
pub const LRFDRFE_O_RXCTRL = @as(c_uint, 0x00000210);
pub const LRFDRFE_O_MAGNACC0 = @as(c_uint, 0x00000214);
pub const LRFDRFE_O_MAGNACC1 = @as(c_uint, 0x00000218);
pub const LRFDRFE_O_RSSI = @as(c_uint, 0x0000021C);
pub const LRFDRFE_O_RSSIMAX = @as(c_uint, 0x00000220);
pub const LRFDRFE_O_RFGAIN = @as(c_uint, 0x00000224);
pub const LRFDRFE_O_IFADCSTAT = @as(c_uint, 0x00000228);
pub const LRFDRFE_O_DIVSTA = @as(c_uint, 0x0000022C);
pub const LRFDRFE_O_DIVIDENDL = @as(c_uint, 0x00000230);
pub const LRFDRFE_O_DIVIDENDH = @as(c_uint, 0x00000234);
pub const LRFDRFE_O_DIVISORL = @as(c_uint, 0x00000238);
pub const LRFDRFE_O_DIVISORH = @as(c_uint, 0x0000023C);
pub const LRFDRFE_O_QUOTIENTL = @as(c_uint, 0x00000240);
pub const LRFDRFE_O_QUOTIENTH = @as(c_uint, 0x00000244);
pub const LRFDRFE_O_PRODUCTL = @as(c_uint, 0x00000248);
pub const LRFDRFE_O_PRODUCTH = @as(c_uint, 0x0000024C);
pub const LRFDRFE_O_MULTSTA = @as(c_uint, 0x00000250);
pub const LRFDRFE_O_MULTCFG = @as(c_uint, 0x00000258);
pub const LRFDRFE_ENABLE_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_ENABLE_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_ENABLE_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_DATARAM = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_S = @as(c_uint, 2);
pub const LRFDRFE_FWSRC_DATARAM_S2RRAM = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_FWRAM = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_S = @as(c_uint, 1);
pub const LRFDRFE_FWSRC_FWRAM_S2RRAM = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_BANK = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_S = @as(c_uint, 0);
pub const LRFDRFE_FWSRC_BANK_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_INIT_ACC1_RESET = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_INIT_ACC0_RESET = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVT0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVT0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVT0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVT0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVT0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVT0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVT0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVT0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVT0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVT0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVT0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVT0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVT0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVT0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVT0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVT1_PREREFCLK_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVT1_REFCLK_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVT1_FBLWTHR_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVT1_FABVTHR_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVT1_LOCK_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVT1_LOL_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVT1_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVT1_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVT1_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVT1_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVT1_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVT1_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVT1_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVT1_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVTMSK0_MAGNTHR_EN = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVTMSK0_S2RSTOP_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVTMSK0_DLO_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVTMSK0_PBECMD_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVTMSK0_COUNTER_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVTMSK0_MDMCMD_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVTMSK0_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVTMSK0_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVTMSK0_TIMER_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVTMSK0_RFEAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVTMSK1_PREREFCLK_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVTMSK1_REFCLK_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVTMSK1_FBLWTHR_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVTMSK1_FABVTHR_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVTMSK1_LOCK_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVTMSK1_LOL_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVTMSK1_GPI7_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVTMSK1_GPI6_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVTMSK1_GPI5_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVTMSK1_GPI4_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVTMSK1_GPI3_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVTMSK1_GPI2_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVTMSK1_GPI1_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVTMSK1_GPI0_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVTCLR0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVTCLR0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVTCLR0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVTCLR0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVTCLR0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVTCLR0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVTCLR0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVTCLR0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVTCLR0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVTCLR0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVTCLR1_PREREFCLK_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVTCLR1_REFCLK_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVTCLR1_FBLWTHR_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVTCLR1_FABVTHR_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVTCLR1_LOCK_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVTCLR1_LOL_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVTCLR1_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVTCLR1_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVTCLR1_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVTCLR1_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVTCLR1_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVTCLR1_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVTCLR1_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVTCLR1_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_HFXTSTAT_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_HFXTSTAT_STAT_QUAL = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_NONQUAL = @as(c_uint, 0x00000000);
pub const LRFDRFE_RFSTATE_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_RFSTATE_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RFSTATE_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RFSTATE_VAL_RX = @as(c_uint, 0x00000003);
pub const LRFDRFE_RFSTATE_VAL_TX = @as(c_uint, 0x00000002);
pub const LRFDRFE_RFSTATE_VAL_SYNTH = @as(c_uint, 0x00000001);
pub const LRFDRFE_RFSTATE_VAL_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_API_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDRFE_API_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_API_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDRFE_API_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_API_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_API_RFECMD_W = @as(c_uint, 4);
pub const LRFDRFE_API_RFECMD_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_API_RFECMD_S = @as(c_uint, 0);
pub const LRFDRFE_API_RFECMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_API_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_MSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MCEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MCEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_MCECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_MCECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_PBEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_PBEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_PBECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_PBECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_S2RTRG = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_S = @as(c_uint, 7);
pub const LRFDRFE_STRB_S2RTRG_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_DMATRG = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_S = @as(c_uint, 6);
pub const LRFDRFE_STRB_DMATRG_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT2 = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_S = @as(c_uint, 5);
pub const LRFDRFE_STRB_SYSTCPT2_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT1 = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_S = @as(c_uint, 4);
pub const LRFDRFE_STRB_SYSTCPT1_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT0 = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_S = @as(c_uint, 3);
pub const LRFDRFE_STRB_SYSTCPT0_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_EVT1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_S = @as(c_uint, 2);
pub const LRFDRFE_STRB_EVT1_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_EVT0 = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_S = @as(c_uint, 1);
pub const LRFDRFE_STRB_EVT0_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_CMDDONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_S = @as(c_uint, 0);
pub const LRFDRFE_STRB_CMDDONE_YES = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_NO = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHRCFG_SEL = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_S = @as(c_uint, 1);
pub const LRFDRFE_MAGNTHRCFG_SEL_MAGNACC1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_MAGNACC0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHRCFG_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNTHRCFG_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHR_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNTHR_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNTHR_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNTHR_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNTHR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSIOFFSET_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSIOFFSET_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIOFFSET_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSIOFFSET_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIOFFSET_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GAINCTL_BDE2DVGA_W = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE2DVGA_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_GAINCTL_BDE2DVGA_S = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN8 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN4 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_GAINCTL_BDE1DVGA_W = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE1DVGA_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_GAINCTL_BDE1DVGA_S = @as(c_uint, 0);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN8 = @as(c_uint, 0x00000003);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN4 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN2 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_PERMODE = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_S = @as(c_uint, 12);
pub const LRFDRFE_MAGNCTL0_PERMODE_PERIODIC = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_SCL_W = @as(c_uint, 4);
pub const LRFDRFE_MAGNCTL0_SCL_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_MAGNCTL0_SCL_S = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL0_SCL_DIV256 = @as(c_uint, 0x00000800);
pub const LRFDRFE_MAGNCTL0_SCL_DIV128 = @as(c_uint, 0x00000700);
pub const LRFDRFE_MAGNCTL0_SCL_DIV64 = @as(c_uint, 0x00000600);
pub const LRFDRFE_MAGNCTL0_SCL_DIV32 = @as(c_uint, 0x00000500);
pub const LRFDRFE_MAGNCTL0_SCL_DIV16 = @as(c_uint, 0x00000400);
pub const LRFDRFE_MAGNCTL0_SCL_DIV8 = @as(c_uint, 0x00000300);
pub const LRFDRFE_MAGNCTL0_SCL_DIV4 = @as(c_uint, 0x00000200);
pub const LRFDRFE_MAGNCTL0_SCL_DIV2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_MAGNCTL0_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_PER_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL0_PER_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL0_PER_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNCTL0_PER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL0_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_PERMODE = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_S = @as(c_uint, 12);
pub const LRFDRFE_MAGNCTL1_PERMODE_PERIODIC = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_SCL_W = @as(c_uint, 4);
pub const LRFDRFE_MAGNCTL1_SCL_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_MAGNCTL1_SCL_S = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL1_SCL_DIV256 = @as(c_uint, 0x00000800);
pub const LRFDRFE_MAGNCTL1_SCL_DIV128 = @as(c_uint, 0x00000700);
pub const LRFDRFE_MAGNCTL1_SCL_DIV64 = @as(c_uint, 0x00000600);
pub const LRFDRFE_MAGNCTL1_SCL_DIV32 = @as(c_uint, 0x00000500);
pub const LRFDRFE_MAGNCTL1_SCL_DIV16 = @as(c_uint, 0x00000400);
pub const LRFDRFE_MAGNCTL1_SCL_DIV8 = @as(c_uint, 0x00000300);
pub const LRFDRFE_MAGNCTL1_SCL_DIV4 = @as(c_uint, 0x00000200);
pub const LRFDRFE_MAGNCTL1_SCL_DIV2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_MAGNCTL1_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_PER_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL1_PER_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL1_PER_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNCTL1_PER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL1_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE2_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE2_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE3_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE3_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE3_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE3_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE4_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE4_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE4_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE4_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE4_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE5_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE5_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE5_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE5_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE5_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_SPARE_W = @as(c_uint, 8);
pub const LRFDRFE_LNA_SPARE_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_LNA_SPARE_S = @as(c_uint, 8);
pub const LRFDRFE_LNA_SPARE_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_LNA_SPARE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_TRIM_W = @as(c_uint, 4);
pub const LRFDRFE_LNA_TRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_LNA_TRIM_S = @as(c_uint, 4);
pub const LRFDRFE_LNA_TRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_LNA_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_BIAS = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_S = @as(c_uint, 3);
pub const LRFDRFE_LNA_BIAS_INT = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_BGAP = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_IB_W = @as(c_uint, 2);
pub const LRFDRFE_LNA_IB_M = @as(c_uint, 0x00000006);
pub const LRFDRFE_LNA_IB_S = @as(c_uint, 1);
pub const LRFDRFE_LNA_IB_MAX = @as(c_uint, 0x00000006);
pub const LRFDRFE_LNA_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_S = @as(c_uint, 0);
pub const LRFDRFE_LNA_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_TRIM_W = @as(c_uint, 7);
pub const LRFDRFE_IFAMPRFLDO_TRIM_M = @as(c_uint, 0x0000FE00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_S = @as(c_uint, 9);
pub const LRFDRFE_IFAMPRFLDO_TRIM_BYPASS = @as(c_uint, 0x0000FE00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_MAX = @as(c_uint, 0x0000FC00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_S = @as(c_uint, 8);
pub const LRFDRFE_IFAMPRFLDO_EN_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_W = @as(c_uint, 4);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_S = @as(c_uint, 4);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_MAX = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_W = @as(c_uint, 3);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_M = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_S = @as(c_uint, 1);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_MAX = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_IFAMP = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_S = @as(c_uint, 0);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_PA0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_MODE = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_S = @as(c_uint, 14);
pub const LRFDRFE_PA0_MODE_HIGH = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_GAIN_W = @as(c_uint, 3);
pub const LRFDRFE_PA0_GAIN_M = @as(c_uint, 0x00003800);
pub const LRFDRFE_PA0_GAIN_S = @as(c_uint, 11);
pub const LRFDRFE_PA0_GAIN_MAX = @as(c_uint, 0x00003800);
pub const LRFDRFE_PA0_GAIN_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_IB_W = @as(c_uint, 6);
pub const LRFDRFE_PA0_IB_M = @as(c_uint, 0x000007E0);
pub const LRFDRFE_PA0_IB_S = @as(c_uint, 5);
pub const LRFDRFE_PA0_IB_MAX = @as(c_uint, 0x000007E0);
pub const LRFDRFE_PA0_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_TRIM_W = @as(c_uint, 5);
pub const LRFDRFE_PA0_TRIM_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PA0_TRIM_S = @as(c_uint, 0);
pub const LRFDRFE_PA0_TRIM_MAX = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PA0_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_SPARE_W = @as(c_uint, 9);
pub const LRFDRFE_PA1_SPARE_M = @as(c_uint, 0x0000FF80);
pub const LRFDRFE_PA1_SPARE_S = @as(c_uint, 7);
pub const LRFDRFE_PA1_SPARE_MAX = @as(c_uint, 0x00000180);
pub const LRFDRFE_PA1_SPARE_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_MIXATST = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_S = @as(c_uint, 6);
pub const LRFDRFE_PA1_MIXATST_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_LDOITST = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_S = @as(c_uint, 5);
pub const LRFDRFE_PA1_LDOITST_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_LDOATST = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_S = @as(c_uint, 4);
pub const LRFDRFE_PA1_LDOATST_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_RC_W = @as(c_uint, 2);
pub const LRFDRFE_PA1_RC_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_PA1_RC_S = @as(c_uint, 2);
pub const LRFDRFE_PA1_RC_MAX = @as(c_uint, 0x0000000C);
pub const LRFDRFE_PA1_RC_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_RAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_S = @as(c_uint, 1);
pub const LRFDRFE_PA1_RAMP_UP = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_DOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_S = @as(c_uint, 0);
pub const LRFDRFE_PA1_EN_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ULNA_SPARE_W = @as(c_uint, 16);
pub const LRFDRFE_ULNA_SPARE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ULNA_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE_ULNA_SPARE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ULNA_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_EXTCLK = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_S = @as(c_uint, 15);
pub const LRFDRFE_IFADC0_EXTCLK_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_DITHERTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_IFADC0_DITHERTRIM_M = @as(c_uint, 0x00007000);
pub const LRFDRFE_IFADC0_DITHERTRIM_S = @as(c_uint, 12);
pub const LRFDRFE_IFADC0_DITHERTRIM_ONES = @as(c_uint, 0x00007000);
pub const LRFDRFE_IFADC0_DITHERTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_DITHEREN_W = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_DITHEREN_M = @as(c_uint, 0x00000C00);
pub const LRFDRFE_IFADC0_DITHEREN_S = @as(c_uint, 10);
pub const LRFDRFE_IFADC0_DITHEREN_ENG = @as(c_uint, 0x00000C00);
pub const LRFDRFE_IFADC0_DITHEREN_ENSD = @as(c_uint, 0x00000800);
pub const LRFDRFE_IFADC0_DITHEREN_ENS = @as(c_uint, 0x00000400);
pub const LRFDRFE_IFADC0_DITHEREN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_ADCIEN = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_S = @as(c_uint, 9);
pub const LRFDRFE_IFADC0_ADCIEN_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_ADCQEN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_S = @as(c_uint, 8);
pub const LRFDRFE_IFADC0_ADCQEN_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_INT2ADJ_W = @as(c_uint, 4);
pub const LRFDRFE_IFADC0_INT2ADJ_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADC0_INT2ADJ_S = @as(c_uint, 4);
pub const LRFDRFE_IFADC0_INT2ADJ_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADC0_INT2ADJ_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_AAFCAP_W = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_AAFCAP_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_IFADC0_AAFCAP_S = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_AAFCAP_ENG = @as(c_uint, 0x0000000C);
pub const LRFDRFE_IFADC0_AAFCAP_ENSD = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADC0_AAFCAP_ENS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADC0_AAFCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_NRZ = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_S = @as(c_uint, 15);
pub const LRFDRFE_IFADC1_NRZ_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_TRIM_W = @as(c_uint, 6);
pub const LRFDRFE_IFADC1_TRIM_M = @as(c_uint, 0x00007E00);
pub const LRFDRFE_IFADC1_TRIM_S = @as(c_uint, 9);
pub const LRFDRFE_IFADC1_TRIM_ONES = @as(c_uint, 0x00007E00);
pub const LRFDRFE_IFADC1_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_RSTN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_S = @as(c_uint, 7);
pub const LRFDRFE_IFADC1_RSTN_DIS = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_CLKGEN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_S = @as(c_uint, 6);
pub const LRFDRFE_IFADC1_CLKGEN_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_ADCDIGCLK = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_S = @as(c_uint, 5);
pub const LRFDRFE_IFADC1_ADCDIGCLK_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_ADCLFSROUT = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_S = @as(c_uint, 4);
pub const LRFDRFE_IFADC1_ADCLFSROUT_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_LPFTSTMODE_W = @as(c_uint, 3);
pub const LRFDRFE_IFADC1_LPFTSTMODE_M = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFADC1_LPFTSTMODE_S = @as(c_uint, 1);
pub const LRFDRFE_IFADC1_LPFTSTMODE_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADC1_LPFTSTMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_INVCLKOUT = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_S = @as(c_uint, 0);
pub const LRFDRFE_IFADC1_INVCLKOUT_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF3_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF3_M = @as(c_uint, 0x0000F000);
pub const LRFDRFE_IFADCLF_FF3_S = @as(c_uint, 12);
pub const LRFDRFE_IFADCLF_FF3_ONES = @as(c_uint, 0x0000F000);
pub const LRFDRFE_IFADCLF_FF3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF2_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF2_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_IFADCLF_FF2_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCLF_FF2_ONES = @as(c_uint, 0x00000F00);
pub const LRFDRFE_IFADCLF_FF2_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF1_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF1_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADCLF_FF1_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF1_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADCLF_FF1_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_INT3_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_INT3_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_IFADCLF_INT3_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCLF_INT3_ONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_IFADCLF_INT3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_S = @as(c_uint, 14);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_ONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_M = @as(c_uint, 0x00003E00);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_S = @as(c_uint, 9);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_ONES = @as(c_uint, 0x00003E00);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_NEG = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_POS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODB = @as(c_uint, 0x000000C0);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODP = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODB = @as(c_uint, 0x00000030);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODP = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_AUTOCAL = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_W = @as(c_uint, 3);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_ONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_S = @as(c_uint, 15);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE_IFADCALDO_TRIMOUT_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCALDO_TRIMOUT_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCALDO_TRIMOUT_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCALDO_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_DUMMY = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCALDO_DUMMY_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTOUT = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCALDO_ATESTOUT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ITEST = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCALDO_ITEST_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_BYPASS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCALDO_BYPASS_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_CLAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCALDO_CLAMP_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCALDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_DUMMY = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCDLDO_DUMMY_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATESTOUT = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATSTBGP = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ITEST = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCDLDO_ITEST_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_BYPASS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCDLDO_BYPASS_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_CLAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCDLDO_CLAMP_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCDLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_EXTCURR = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCTST_EXTCURR_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_QCALDBIQ = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCTST_QCALDBIQ_COMP1 = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_QCALDBC = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCTST_QCALDBC_COMP1 = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_SEL_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCTST_SEL_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_IFADCTST_SEL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCTST_SEL_EXTCLKN1 = @as(c_uint, 0x0000001F);
pub const LRFDRFE_IFADCTST_SEL_NONE = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFL_MUXLSB_W = @as(c_uint, 16);
pub const LRFDRFE_ATSTREFL_MUXLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ATSTREFL_MUXLSB_S = @as(c_uint, 0);
pub const LRFDRFE_ATSTREFL_MUXLSB_IFADC_ATB = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFL_MUXLSB_LDO_VTEST = @as(c_uint, 0x00004000);
pub const LRFDRFE_ATSTREFL_MUXLSB_LDO_ITEST = @as(c_uint, 0x00002000);
pub const LRFDRFE_ATSTREFL_MUXLSB_PA_PEAK_OUTN = @as(c_uint, 0x00000800);
pub const LRFDRFE_ATSTREFL_MUXLSB_PA_PEAK_OUTP = @as(c_uint, 0x00000400);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTQN = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTQP = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTIN = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTIP = @as(c_uint, 0x00000040);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIN_2 = @as(c_uint, 0x00000020);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIP_2 = @as(c_uint, 0x00000010);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTQN = @as(c_uint, 0x00000008);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTQP = @as(c_uint, 0x00000004);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIN = @as(c_uint, 0x00000002);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIP = @as(c_uint, 0x00000001);
pub const LRFDRFE_ATSTREFL_MUXLSB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_S = @as(c_uint, 15);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_BPDIS = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_BPEN = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_IREFTRIM_W = @as(c_uint, 5);
pub const LRFDRFE_ATSTREFH_IREFTRIM_M = @as(c_uint, 0x00007C00);
pub const LRFDRFE_ATSTREFH_IREFTRIM_S = @as(c_uint, 10);
pub const LRFDRFE_ATSTREFH_IREFTRIM_ONES = @as(c_uint, 0x00007C00);
pub const LRFDRFE_ATSTREFH_IREFTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_BIAS = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_S = @as(c_uint, 9);
pub const LRFDRFE_ATSTREFH_BIAS_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_OUTPUT2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_S = @as(c_uint, 8);
pub const LRFDRFE_ATSTREFH_OUTPUT2_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_OUTPUT1 = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_S = @as(c_uint, 7);
pub const LRFDRFE_ATSTREFH_OUTPUT1_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_MUXMSB_W = @as(c_uint, 7);
pub const LRFDRFE_ATSTREFH_MUXMSB_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_ATSTREFH_MUXMSB_S = @as(c_uint, 0);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIVBUF_NMOS_BIAS = @as(c_uint, 0x00000010);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIVBUF_PMOS_BIAS = @as(c_uint, 0x00000008);
pub const LRFDRFE_ATSTREFH_MUXMSB_REFSYS_IREF = @as(c_uint, 0x00000004);
pub const LRFDRFE_ATSTREFH_MUXMSB_IFADC_ATB = @as(c_uint, 0x00000001);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_MTDCSPARE_W = @as(c_uint, 2);
pub const LRFDRFE_DCO_MTDCSPARE_M = @as(c_uint, 0x00000600);
pub const LRFDRFE_DCO_MTDCSPARE_S = @as(c_uint, 9);
pub const LRFDRFE_DCO_MTDCSPARE_DIS = @as(c_uint, 0x00000200);
pub const LRFDRFE_DCO_MTDCSPARE_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_SPARE7_W = @as(c_uint, 2);
pub const LRFDRFE_DCO_SPARE7_M = @as(c_uint, 0x00000180);
pub const LRFDRFE_DCO_SPARE7_S = @as(c_uint, 7);
pub const LRFDRFE_DCO_SPARE7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCO_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_TAILRESTRIM_W = @as(c_uint, 4);
pub const LRFDRFE_DCO_TAILRESTRIM_M = @as(c_uint, 0x00000078);
pub const LRFDRFE_DCO_TAILRESTRIM_S = @as(c_uint, 3);
pub const LRFDRFE_DCO_TAILRESTRIM_ALLONES = @as(c_uint, 0x00000078);
pub const LRFDRFE_DCO_TAILRESTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_RTRIMCAP = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_S = @as(c_uint, 2);
pub const LRFDRFE_DCO_RTRIMCAP_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_CNRCAP = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_S = @as(c_uint, 1);
pub const LRFDRFE_DCO_CNRCAP__50MHZ = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_CRSCAPCM = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_S = @as(c_uint, 0);
pub const LRFDRFE_DCO_CRSCAPCM_REDUCED = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_PDET = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_S = @as(c_uint, 15);
pub const LRFDRFE_DIV_PDET_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_NMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_NMIREFTRIM_M = @as(c_uint, 0x00007000);
pub const LRFDRFE_DIV_NMIREFTRIM_S = @as(c_uint, 12);
pub const LRFDRFE_DIV_NMIREFTRIM_ALLONES = @as(c_uint, 0x00007000);
pub const LRFDRFE_DIV_NMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_PMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_PMIREFTRIM_M = @as(c_uint, 0x00000E00);
pub const LRFDRFE_DIV_PMIREFTRIM_S = @as(c_uint, 9);
pub const LRFDRFE_DIV_PMIREFTRIM_ALLONES = @as(c_uint, 0x00000E00);
pub const LRFDRFE_DIV_PMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_TXBBOOST = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_S = @as(c_uint, 8);
pub const LRFDRFE_DIV_TXBBOOST_INCREASED = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_S1GFRC = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_S = @as(c_uint, 7);
pub const LRFDRFE_DIV_S1GFRC_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_BUFGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_DIV_BUFGAIN_M = @as(c_uint, 0x00000060);
pub const LRFDRFE_DIV_BUFGAIN_S = @as(c_uint, 5);
pub const LRFDRFE_DIV_BUFGAIN__60_PST = @as(c_uint, 0x00000060);
pub const LRFDRFE_DIV_BUFGAIN_DONT_USE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIV_BUFGAIN__80_PST = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIV_BUFGAIN_MAX = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_BIAS = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_S = @as(c_uint, 4);
pub const LRFDRFE_DIV_BIAS_DEFAULT = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_ALTERNATIVE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_OUT = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_S = @as(c_uint, 3);
pub const LRFDRFE_DIV_OUT_FE_2G4 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_FE_S1G = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_RATIO_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_RATIO_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_DIV_RATIO_S = @as(c_uint, 0);
pub const LRFDRFE_DIV_RATIO_DIV30 = @as(c_uint, 0x00000007);
pub const LRFDRFE_DIV_RATIO_DIV15 = @as(c_uint, 0x00000006);
pub const LRFDRFE_DIV_RATIO_DIV10 = @as(c_uint, 0x00000005);
pub const LRFDRFE_DIV_RATIO_DIV5 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIV_RATIO_DIV12 = @as(c_uint, 0x00000003);
pub const LRFDRFE_DIV_RATIO_DIV6 = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIV_RATIO_DIV4 = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIV_RATIO_DIV2 = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_DIVLDO_SPARE15_ONES = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE_DIVLDO_VOUTTRIM_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DIVLDO_VOUTTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_DIVLDO_VOUTTRIM_ONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DIVLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_ITST = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_S = @as(c_uint, 7);
pub const LRFDRFE_DIVLDO_ITST_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE_DIVLDO_TMUX_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_DIVLDO_TMUX_S = @as(c_uint, 4);
pub const LRFDRFE_DIVLDO_TMUX_VDDR = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVLDO_TMUX_LDO_OUT = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVLDO_TMUX_GND = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_SPARE3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_S = @as(c_uint, 3);
pub const LRFDRFE_DIVLDO_SPARE3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_MODE = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_S = @as(c_uint, 2);
pub const LRFDRFE_DIVLDO_MODE_FAST = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_BYPASS = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_S = @as(c_uint, 1);
pub const LRFDRFE_DIVLDO_BYPASS_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_DIVLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_ITESTCTL = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_S = @as(c_uint, 15);
pub const LRFDRFE_TDCLDO_ITESTCTL_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE_TDCLDO_VOUTTRIM_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_TDCLDO_VOUTTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_TDCLDO_VOUTTRIM_ONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_TDCLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_S = @as(c_uint, 7);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE_TDCLDO_TMUX_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_TDCLDO_TMUX_S = @as(c_uint, 4);
pub const LRFDRFE_TDCLDO_TMUX_VSSA = @as(c_uint, 0x00000040);
pub const LRFDRFE_TDCLDO_TMUX_LDO_OUT = @as(c_uint, 0x00000020);
pub const LRFDRFE_TDCLDO_TMUX_VDDA = @as(c_uint, 0x00000010);
pub const LRFDRFE_TDCLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_PDSEL = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_S = @as(c_uint, 3);
pub const LRFDRFE_TDCLDO_PDSEL_DIODE = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_R = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_MODE = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_S = @as(c_uint, 2);
pub const LRFDRFE_TDCLDO_MODE_FAST = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_BYPASS = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_S = @as(c_uint, 1);
pub const LRFDRFE_TDCLDO_BYPASS_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_TDCLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_ITST_W = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO0_ITST_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_DCOLDO0_ITST_S = @as(c_uint, 14);
pub const LRFDRFE_DCOLDO0_ITST_BOTH = @as(c_uint, 0x0000C000);
pub const LRFDRFE_DCOLDO0_ITST_SECOND = @as(c_uint, 0x00008000);
pub const LRFDRFE_DCOLDO0_ITST_FIRST = @as(c_uint, 0x00004000);
pub const LRFDRFE_DCOLDO0_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_W = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_W = @as(c_uint, 4);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_S = @as(c_uint, 4);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_PDN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_S = @as(c_uint, 3);
pub const LRFDRFE_DCOLDO0_PDN_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_BYPFIRST = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_S = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO0_BYPFIRST_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_BYPBOTH = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_S = @as(c_uint, 1);
pub const LRFDRFE_DCOLDO0_BYPBOTH_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_DCOLDO0_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_REFSRC = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_S = @as(c_uint, 10);
pub const LRFDRFE_DCOLDO1_REFSRC_BAW = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_XTAL = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_DIVATST_W = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO1_DIVATST_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_DCOLDO1_DIVATST_S = @as(c_uint, 8);
pub const LRFDRFE_DCOLDO1_DIVATST_ONES = @as(c_uint, 0x00000300);
pub const LRFDRFE_DCOLDO1_DIVATST_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_PERFM = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_S = @as(c_uint, 7);
pub const LRFDRFE_DCOLDO1_PERFM_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_CHRGFILT = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_S = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO1_CHRGFILT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_ATST_W = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO1_ATST_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_DCOLDO1_ATST_S = @as(c_uint, 0);
pub const LRFDRFE_DCOLDO1_ATST_VSSANA = @as(c_uint, 0x00000020);
pub const LRFDRFE_DCOLDO1_ATST_FIRST_OUT = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO1_ATST_LDO_OUT = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_SPARE14_W = @as(c_uint, 2);
pub const LRFDRFE_PRE0_SPARE14_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE0_SPARE14_S = @as(c_uint, 14);
pub const LRFDRFE_PRE0_SPARE14_ALLONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE0_SPARE14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_PLLDIV1_W = @as(c_uint, 6);
pub const LRFDRFE_PRE0_PLLDIV1_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PRE0_PLLDIV1_S = @as(c_uint, 8);
pub const LRFDRFE_PRE0_PLLDIV1_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PRE0_PLLDIV1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_SPARE6_W = @as(c_uint, 2);
pub const LRFDRFE_PRE0_SPARE6_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_PRE0_SPARE6_S = @as(c_uint, 6);
pub const LRFDRFE_PRE0_SPARE6_ALLONES = @as(c_uint, 0x000000C0);
pub const LRFDRFE_PRE0_SPARE6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_PLLDIV0_W = @as(c_uint, 6);
pub const LRFDRFE_PRE0_PLLDIV0_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE0_PLLDIV0_S = @as(c_uint, 0);
pub const LRFDRFE_PRE0_PLLDIV0_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE0_PLLDIV0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRBW_W = @as(c_uint, 2);
pub const LRFDRFE_PRE1_IIRBW_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE1_IIRBW_S = @as(c_uint, 14);
pub const LRFDRFE_PRE1_IIRBW_K16 = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE1_IIRBW_K8 = @as(c_uint, 0x00008000);
pub const LRFDRFE_PRE1_IIRBW_K4 = @as(c_uint, 0x00004000);
pub const LRFDRFE_PRE1_IIRBW_K2 = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRORD = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_S = @as(c_uint, 13);
pub const LRFDRFE_PRE1_IIRORD_SECOND = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_FIRST = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRDIV_W = @as(c_uint, 5);
pub const LRFDRFE_PRE1_IIRDIV_M = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PRE1_IIRDIV_S = @as(c_uint, 8);
pub const LRFDRFE_PRE1_IIRDIV_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PRE1_IIRDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_CALHSDDC = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_S = @as(c_uint, 6);
pub const LRFDRFE_PRE1_CALHSDDC_GATE = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_NOGATE = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_HSDDC_W = @as(c_uint, 6);
pub const LRFDRFE_PRE1_HSDDC_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE1_HSDDC_S = @as(c_uint, 0);
pub const LRFDRFE_PRE1_HSDDC_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE1_HSDDC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_W = @as(c_uint, 4);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_M = @as(c_uint, 0x0000F000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_S = @as(c_uint, 12);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_CRSCALDIV_W = @as(c_uint, 6);
pub const LRFDRFE_PRE2_CRSCALDIV_M = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_PRE2_CRSCALDIV_S = @as(c_uint, 6);
pub const LRFDRFE_PRE2_CRSCALDIV_ALLONES = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_PRE2_CRSCALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_FSMDIV_W = @as(c_uint, 6);
pub const LRFDRFE_PRE2_FSMDIV_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE2_FSMDIV_S = @as(c_uint, 0);
pub const LRFDRFE_PRE2_FSMDIV_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE2_FSMDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE3_FINECALDIV_W = @as(c_uint, 11);
pub const LRFDRFE_PRE3_FINECALDIV_M = @as(c_uint, 0x0000FFE0);
pub const LRFDRFE_PRE3_FINECALDIV_S = @as(c_uint, 5);
pub const LRFDRFE_PRE3_FINECALDIV_ALLONES = @as(c_uint, 0x0000FFE0);
pub const LRFDRFE_PRE3_FINECALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_W = @as(c_uint, 5);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_CAL0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_FCSTART_W = @as(c_uint, 7);
pub const LRFDRFE_CAL0_FCSTART_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL0_FCSTART_S = @as(c_uint, 8);
pub const LRFDRFE_CAL0_FCSTART_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL0_FCSTART_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_CRS = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_S = @as(c_uint, 7);
pub const LRFDRFE_CAL0_CRS_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_MID = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_S = @as(c_uint, 6);
pub const LRFDRFE_CAL0_MID_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_KTDC = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_S = @as(c_uint, 5);
pub const LRFDRFE_CAL0_KTDC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_KDCO = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_S = @as(c_uint, 4);
pub const LRFDRFE_CAL0_KDCO_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_TDCAVG_W = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDCAVG_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_CAL0_TDCAVG_S = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_8_TIMES = @as(c_uint, 0x0000000C);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_4_TIMES = @as(c_uint, 0x00000008);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_2_TIMES = @as(c_uint, 0x00000004);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_1_TIME = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_TDC_SPARE_W = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDC_SPARE_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_CAL0_TDC_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE_CAL0_TDC_SPARE_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_CAL0_TDC_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_CAL1_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_FCTOP_W = @as(c_uint, 7);
pub const LRFDRFE_CAL1_FCTOP_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL1_FCTOP_S = @as(c_uint, 8);
pub const LRFDRFE_CAL1_FCTOP_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL1_FCTOP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_SPARE7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_S = @as(c_uint, 7);
pub const LRFDRFE_CAL1_SPARE7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_FCBOT_W = @as(c_uint, 7);
pub const LRFDRFE_CAL1_FCBOT_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_CAL1_FCBOT_S = @as(c_uint, 0);
pub const LRFDRFE_CAL1_FCBOT_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_CAL1_FCBOT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL2_KTDCINV_W = @as(c_uint, 16);
pub const LRFDRFE_CAL2_KTDCINV_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL2_KTDCINV_S = @as(c_uint, 0);
pub const LRFDRFE_CAL2_KTDCINV_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL2_KTDCINV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL3_DTXGAIN_W = @as(c_uint, 16);
pub const LRFDRFE_CAL3_DTXGAIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL3_DTXGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_CAL3_DTXGAIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL3_DTXGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_PHCPT = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_S = @as(c_uint, 13);
pub const LRFDRFE_MISC0_PHCPT_ASYNC = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_SYNC = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_TDCCALCORR = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_S = @as(c_uint, 12);
pub const LRFDRFE_MISC0_TDCCALCORR_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_TDCMSBCORR = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_S = @as(c_uint, 11);
pub const LRFDRFE_MISC0_TDCMSBCORR_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_SDMDEM = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_S = @as(c_uint, 10);
pub const LRFDRFE_MISC0_SDMDEM_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYSDM_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYSDM_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_MISC0_DLYSDM_S = @as(c_uint, 8);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYPHVALID = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_S = @as(c_uint, 6);
pub const LRFDRFE_MISC0_DLYPHVALID_CKVD16_1_PER = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYCANCRS_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANCRS_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_MISC0_DLYCANCRS_S = @as(c_uint, 4);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_3_PER = @as(c_uint, 0x00000030);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_2_PER = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_1_PER = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYCANFINE_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANFINE_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MISC0_DLYCANFINE_S = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_4_PER = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_3_PER = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_2_PER = @as(c_uint, 0x00000004);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_1_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYADD_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYADD_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_MISC0_DLYADD_S = @as(c_uint, 0);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_3_PER = @as(c_uint, 0x00000003);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_2_PER = @as(c_uint, 0x00000002);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_1_PER = @as(c_uint, 0x00000001);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_FCDEMCLK = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_S = @as(c_uint, 14);
pub const LRFDRFE_MISC1_FCDEMCLK_CKVD64 = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_CKCD16 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_FCDEMUPD_W = @as(c_uint, 2);
pub const LRFDRFE_MISC1_FCDEMUPD_M = @as(c_uint, 0x00003000);
pub const LRFDRFE_MISC1_FCDEMUPD_S = @as(c_uint, 12);
pub const LRFDRFE_MISC1_FCDEMUPD_SDM_XOR_PH_ERR = @as(c_uint, 0x00003000);
pub const LRFDRFE_MISC1_FCDEMUPD_SDM = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC1_FCDEMUPD_PH_ERR = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC1_FCDEMUPD_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_TDCINL_W = @as(c_uint, 6);
pub const LRFDRFE_MISC1_TDCINL_M = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_MISC1_TDCINL_S = @as(c_uint, 6);
pub const LRFDRFE_MISC1_TDCINL_ONES = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_MISC1_TDCINL_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_TDCINLCTL = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_S = @as(c_uint, 5);
pub const LRFDRFE_MISC1_TDCINLCTL_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_PHINIT = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_S = @as(c_uint, 4);
pub const LRFDRFE_MISC1_PHINIT_UNKNOWN = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_KNOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_SDMOOVRCTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_S = @as(c_uint, 3);
pub const LRFDRFE_MISC1_SDMOOVRCTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_SDMOOVR_W = @as(c_uint, 3);
pub const LRFDRFE_MISC1_SDMOOVR_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_MISC1_SDMOOVR_S = @as(c_uint, 0);
pub const LRFDRFE_MISC1_SDMOOVR_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_MISC1_SDMOOVR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF0_KIPREC = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_S = @as(c_uint, 12);
pub const LRFDRFE_LF0_KIPREC_HIGH = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF0_KI_W = @as(c_uint, 12);
pub const LRFDRFE_LF0_KI_M = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_LF0_KI_S = @as(c_uint, 0);
pub const LRFDRFE_LF0_KI_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_LF0_KI_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF1_KP_W = @as(c_uint, 14);
pub const LRFDRFE_LF1_KP_M = @as(c_uint, 0x00003FFF);
pub const LRFDRFE_LF1_KP_S = @as(c_uint, 0);
pub const LRFDRFE_LF1_KP_ALLONES = @as(c_uint, 0x00003FFF);
pub const LRFDRFE_LF1_KP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHEDISC_CNT_W = @as(c_uint, 4);
pub const LRFDRFE_PHEDISC_CNT_M = @as(c_uint, 0x00003C00);
pub const LRFDRFE_PHEDISC_CNT_S = @as(c_uint, 10);
pub const LRFDRFE_PHEDISC_CNT_ALLONES = @as(c_uint, 0x00003C00);
pub const LRFDRFE_PHEDISC_CNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHEDISC_THR_W = @as(c_uint, 10);
pub const LRFDRFE_PHEDISC_THR_M = @as(c_uint, 0x000003FF);
pub const LRFDRFE_PHEDISC_THR_S = @as(c_uint, 0);
pub const LRFDRFE_PHEDISC_THR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDRFE_PHEDISC_THR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHINIT_OFF_W = @as(c_uint, 8);
pub const LRFDRFE_PHINIT_OFF_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PHINIT_OFF_S = @as(c_uint, 0);
pub const LRFDRFE_PHINIT_OFF_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PHINIT_OFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_W = @as(c_uint, 2);
pub const LRFDRFE_PLLMON0_PHELOLCNT_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_S = @as(c_uint, 14);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_128_PER = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_64_PER = @as(c_uint, 0x00008000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_32_PER = @as(c_uint, 0x00004000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_16_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_PHELOLTHR_W = @as(c_uint, 6);
pub const LRFDRFE_PLLMON0_PHELOLTHR_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PLLMON0_PHELOLTHR_S = @as(c_uint, 8);
pub const LRFDRFE_PLLMON0_PHELOLTHR_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PLLMON0_PHELOLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_FCTHR_W = @as(c_uint, 7);
pub const LRFDRFE_PLLMON0_FCTHR_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_PLLMON0_FCTHR_S = @as(c_uint, 0);
pub const LRFDRFE_PLLMON0_FCTHR_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_PLLMON0_FCTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_W = @as(c_uint, 5);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_M = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_S = @as(c_uint, 8);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_W = @as(c_uint, 8);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_S = @as(c_uint, 0);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SCHEME_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_SCHEME_M = @as(c_uint, 0x00001800);
pub const LRFDRFE_MOD0_SCHEME_S = @as(c_uint, 11);
pub const LRFDRFE_MOD0_SCHEME_TWO_POINT_MOD_FRF = @as(c_uint, 0x00001800);
pub const LRFDRFE_MOD0_SCHEME_INLOOP_MOD_FRF = @as(c_uint, 0x00001000);
pub const LRFDRFE_MOD0_SCHEME_INLOOP_MOD_FREF = @as(c_uint, 0x00000800);
pub const LRFDRFE_MOD0_SCHEME_NC = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SYMSHP_W = @as(c_uint, 3);
pub const LRFDRFE_MOD0_SYMSHP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_MOD0_SYMSHP_S = @as(c_uint, 8);
pub const LRFDRFE_MOD0_SYMSHP_CHIRP = @as(c_uint, 0x00000400);
pub const LRFDRFE_MOD0_SYMSHP_SHAPEDZIGBEE = @as(c_uint, 0x00000300);
pub const LRFDRFE_MOD0_SYMSHP_PCWSPSK = @as(c_uint, 0x00000200);
pub const LRFDRFE_MOD0_SYMSHP_ZIGBEE = @as(c_uint, 0x00000100);
pub const LRFDRFE_MOD0_SYMSHP_SHAPEDFSK = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_CANPTHGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_CANPTHGAIN_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_MOD0_CANPTHGAIN_S = @as(c_uint, 6);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_18 = @as(c_uint, 0x000000C0);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_17 = @as(c_uint, 0x00000080);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_16 = @as(c_uint, 0x00000040);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_15 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SHPGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_SHPGAIN_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_MOD0_SHPGAIN_S = @as(c_uint, 4);
pub const LRFDRFE_MOD0_SHPGAIN_X8 = @as(c_uint, 0x00000030);
pub const LRFDRFE_MOD0_SHPGAIN_X4 = @as(c_uint, 0x00000020);
pub const LRFDRFE_MOD0_SHPGAIN_X2 = @as(c_uint, 0x00000010);
pub const LRFDRFE_MOD0_SHPGAIN_X1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_INTPFACT_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_INTPFACT_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MOD0_INTPFACT_S = @as(c_uint, 2);
pub const LRFDRFE_MOD0_INTPFACT_ILLEGAL1 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MOD0_INTPFACT_INTP_BY_32 = @as(c_uint, 0x00000008);
pub const LRFDRFE_MOD0_INTPFACT_INTP_BY_16 = @as(c_uint, 0x00000004);
pub const LRFDRFE_MOD0_INTPFACT_ILLEGAL0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD1_FOFF_W = @as(c_uint, 12);
pub const LRFDRFE_MOD1_FOFF_M = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_MOD1_FOFF_S = @as(c_uint, 0);
pub const LRFDRFE_MOD1_FOFF_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_MOD1_FOFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX0_SHP1_W = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP1_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX0_SHP1_S = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP1_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX0_SHP1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX0_SHP0_W = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP0_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX0_SHP0_S = @as(c_uint, 0);
pub const LRFDRFE_DTX0_SHP0_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX0_SHP0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX1_SHP3_W = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP3_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX1_SHP3_S = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP3_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX1_SHP3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX1_SHP2_W = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP2_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX1_SHP2_S = @as(c_uint, 0);
pub const LRFDRFE_DTX1_SHP2_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX1_SHP2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX2_SHP5_W = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP5_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX2_SHP5_S = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX2_SHP5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX2_SHP4_W = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP4_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX2_SHP4_S = @as(c_uint, 0);
pub const LRFDRFE_DTX2_SHP4_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX2_SHP4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX3_SHP7_W = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP7_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX3_SHP7_S = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP7_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX3_SHP7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX3_SHP6_W = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP6_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX3_SHP6_S = @as(c_uint, 0);
pub const LRFDRFE_DTX3_SHP6_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX3_SHP6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX4_SHP9_W = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP9_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX4_SHP9_S = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP9_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX4_SHP9_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX4_SHP8_W = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP8_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX4_SHP8_S = @as(c_uint, 0);
pub const LRFDRFE_DTX4_SHP8_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX4_SHP8_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX5_SHP11_W = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP11_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX5_SHP11_S = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP11_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX5_SHP11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX5_SHP10_W = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP10_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX5_SHP10_S = @as(c_uint, 0);
pub const LRFDRFE_DTX5_SHP10_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX5_SHP10_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX6_SHP13_W = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP13_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX6_SHP13_S = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP13_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX6_SHP13_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX6_SHP12_W = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP12_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX6_SHP12_S = @as(c_uint, 0);
pub const LRFDRFE_DTX6_SHP12_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX6_SHP12_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX7_SHP15_W = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP15_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX7_SHP15_S = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP15_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX7_SHP15_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX7_SHP14_W = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP14_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX7_SHP14_S = @as(c_uint, 0);
pub const LRFDRFE_DTX7_SHP14_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX7_SHP14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX8_SHP17_W = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP17_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX8_SHP17_S = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP17_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX8_SHP17_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX8_SHP16_W = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP16_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX8_SHP16_S = @as(c_uint, 0);
pub const LRFDRFE_DTX8_SHP16_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX8_SHP16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX9_SHP19_W = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP19_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX9_SHP19_S = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP19_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX9_SHP19_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX9_SHP18_W = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP18_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX9_SHP18_S = @as(c_uint, 0);
pub const LRFDRFE_DTX9_SHP18_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX9_SHP18_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX10_SHP21_W = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP21_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX10_SHP21_S = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP21_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX10_SHP21_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX10_SHP20_W = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP20_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX10_SHP20_S = @as(c_uint, 0);
pub const LRFDRFE_DTX10_SHP20_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX10_SHP20_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX11_SHP23_W = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP23_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX11_SHP23_S = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP23_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX11_SHP23_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX11_SHP22_W = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP22_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX11_SHP22_S = @as(c_uint, 0);
pub const LRFDRFE_DTX11_SHP22_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX11_SHP22_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0L_VALLSB_W = @as(c_uint, 14);
pub const LRFDRFE_PLLM0L_VALLSB_M = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM0L_VALLSB_S = @as(c_uint, 2);
pub const LRFDRFE_PLLM0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0L_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE_PLLM0L_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM0L_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM0L_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM0L_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PLLM0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1L_VALLSB_W = @as(c_uint, 14);
pub const LRFDRFE_PLLM1L_VALLSB_M = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM1L_VALLSB_S = @as(c_uint, 2);
pub const LRFDRFE_PLLM1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1L_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE_PLLM1L_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM1L_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM1L_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM1L_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PLLM1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALMCRS_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CALMCRS_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMCRS_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CALMCRS_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMCRS_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALMMID_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CALMMID_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMMID_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CALMMID_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMMID_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_REFDIV_LOAD_W = @as(c_uint, 16);
pub const LRFDRFE_REFDIV_LOAD_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_REFDIV_LOAD_S = @as(c_uint, 0);
pub const LRFDRFE_REFDIV_LOAD_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_REFDIV_LOAD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_TDCSTOP_W = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_TDCSTOP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_DLOCTL0_TDCSTOP_S = @as(c_uint, 8);
pub const LRFDRFE_DLOCTL0_TDCSTOP_OPEN = @as(c_uint, 0x00000100);
pub const LRFDRFE_DLOCTL0_TDCSTOP_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_DTSTXTAL = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_S = @as(c_uint, 7);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_LOOPUPD_W = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_LOOPUPD_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_DLOCTL0_LOOPUPD_S = @as(c_uint, 4);
pub const LRFDRFE_DLOCTL0_LOOPUPD_ALT = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL0_LOOPUPD_DEF = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_PH3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_S = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_PH3_START = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_PH2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_S = @as(c_uint, 2);
pub const LRFDRFE_DLOCTL0_PH2_START = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_LOOPMODE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_S = @as(c_uint, 1);
pub const LRFDRFE_DLOCTL0_LOOPMODE_OPEN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_RSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_S = @as(c_uint, 0);
pub const LRFDRFE_DLOCTL0_RSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_DCO = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_S = @as(c_uint, 15);
pub const LRFDRFE_DLOCTL1_DCO_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_FCDEM = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_S = @as(c_uint, 7);
pub const LRFDRFE_DLOCTL1_FCDEM_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_DTSTCKVD = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_S = @as(c_uint, 6);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_PHEDISC = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_S = @as(c_uint, 5);
pub const LRFDRFE_DLOCTL1_PHEDISC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_PLLMON = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_S = @as(c_uint, 4);
pub const LRFDRFE_DLOCTL1_PLLMON_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_IIR = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_S = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL1_IIR_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MOD = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_S = @as(c_uint, 2);
pub const LRFDRFE_DLOCTL1_MOD_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MODINIT = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_S = @as(c_uint, 1);
pub const LRFDRFE_DLOCTL1_MODINIT_ACTIVATE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_DEACTIVATE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MTDCRSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_S = @as(c_uint, 0);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE_DCOOVR0_MIDCODE_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOOVR0_MIDCODE_S = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR0_MIDCODE_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOOVR0_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE_DCOOVR0_CRSCODE_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOOVR0_CRSCODE_S = @as(c_uint, 4);
pub const LRFDRFE_DCOOVR0_CRSCODE_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOOVR0_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_FINECTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_S = @as(c_uint, 3);
pub const LRFDRFE_DCOOVR0_FINECTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_SDMICTL = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_S = @as(c_uint, 2);
pub const LRFDRFE_DCOOVR0_SDMICTL_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_MIDCTL = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_S = @as(c_uint, 1);
pub const LRFDRFE_DCOOVR0_MIDCTL_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_CRSCTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_S = @as(c_uint, 0);
pub const LRFDRFE_DCOOVR0_CRSCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR1_FINECODE_W = @as(c_uint, 7);
pub const LRFDRFE_DCOOVR1_FINECODE_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DCOOVR1_FINECODE_S = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR1_FINECODE_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DCOOVR1_FINECODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR1_SDMICODE_W = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR1_SDMICODE_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DCOOVR1_SDMICODE_S = @as(c_uint, 0);
pub const LRFDRFE_DCOOVR1_SDMICODE_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DCOOVR1_SDMICODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SPARE11_W = @as(c_uint, 4);
pub const LRFDRFE_DTST_SPARE11_M = @as(c_uint, 0x00007800);
pub const LRFDRFE_DTST_SPARE11_S = @as(c_uint, 11);
pub const LRFDRFE_DTST_SPARE11_ALLONES = @as(c_uint, 0x00007800);
pub const LRFDRFE_DTST_SPARE11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_VARTGLDLY_W = @as(c_uint, 3);
pub const LRFDRFE_DTST_VARTGLDLY_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_DTST_VARTGLDLY_S = @as(c_uint, 8);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_7_PER = @as(c_uint, 0x00000700);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_6_PER = @as(c_uint, 0x00000600);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_5_PER = @as(c_uint, 0x00000500);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_4_PER = @as(c_uint, 0x00000400);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_REFTGLDLY = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_S = @as(c_uint, 7);
pub const LRFDRFE_DTST_REFTGLDLY_CLK_1_PER = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_TRNSEQ = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_S = @as(c_uint, 6);
pub const LRFDRFE_DTST_TRNSEQ_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SPARE5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_S = @as(c_uint, 5);
pub const LRFDRFE_DTST_SPARE5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SIG_W = @as(c_uint, 5);
pub const LRFDRFE_DTST_SIG_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_DTST_SIG_S = @as(c_uint, 0);
pub const LRFDRFE_DTST_SIG_VAR_NC_15 = @as(c_uint, 0x0000001F);
pub const LRFDRFE_DTST_SIG_VAR_NC_14 = @as(c_uint, 0x0000001E);
pub const LRFDRFE_DTST_SIG_VAR_NC_13 = @as(c_uint, 0x0000001D);
pub const LRFDRFE_DTST_SIG_VAR_NC_12 = @as(c_uint, 0x0000001C);
pub const LRFDRFE_DTST_SIG_VAR_NC_11 = @as(c_uint, 0x0000001B);
pub const LRFDRFE_DTST_SIG_VAR_LOOP_UPD_FINECODE = @as(c_uint, 0x0000001A);
pub const LRFDRFE_DTST_SIG_VAR_LOCK_FINECODE = @as(c_uint, 0x00000019);
pub const LRFDRFE_DTST_SIG_VAR_MPX_CAN = @as(c_uint, 0x00000018);
pub const LRFDRFE_DTST_SIG_VAR_TDCSTOP_STATUS_TDC = @as(c_uint, 0x00000017);
pub const LRFDRFE_DTST_SIG_VAR_TDCSTOP_PHERR = @as(c_uint, 0x00000016);
pub const LRFDRFE_DTST_SIG_VAR_PH_COMP_PHERR_TDCSTOP = @as(c_uint, 0x00000015);
pub const LRFDRFE_DTST_SIG_VAR_PH_TDCCORR = @as(c_uint, 0x00000014);
pub const LRFDRFE_DTST_SIG_VAR_PH_RAW = @as(c_uint, 0x00000013);
pub const LRFDRFE_DTST_SIG_VAR_PHERR_LOWER = @as(c_uint, 0x00000012);
pub const LRFDRFE_DTST_SIG_VAR_PHERR_UPPER = @as(c_uint, 0x00000011);
pub const LRFDRFE_DTST_SIG_VAR_NC_0 = @as(c_uint, 0x00000010);
pub const LRFDRFE_DTST_SIG_REF_NC_15 = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DTST_SIG_REF_NC_14 = @as(c_uint, 0x0000000E);
pub const LRFDRFE_DTST_SIG_REF_NC_13 = @as(c_uint, 0x0000000D);
pub const LRFDRFE_DTST_SIG_REF_NC_12 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_DTST_SIG_REF_NC_11 = @as(c_uint, 0x0000000B);
pub const LRFDRFE_DTST_SIG_REF_NC_10 = @as(c_uint, 0x0000000A);
pub const LRFDRFE_DTST_SIG_REF_NC_9 = @as(c_uint, 0x00000009);
pub const LRFDRFE_DTST_SIG_REF_NC_8 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DTST_SIG_REF_NC_7 = @as(c_uint, 0x00000007);
pub const LRFDRFE_DTST_SIG_REF_NC_6 = @as(c_uint, 0x00000006);
pub const LRFDRFE_DTST_SIG_REF_NC_5 = @as(c_uint, 0x00000005);
pub const LRFDRFE_DTST_SIG_REF_NC_4 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DTST_SIG_REF_NC_3 = @as(c_uint, 0x00000003);
pub const LRFDRFE_DTST_SIG_REF_FERR_MAG = @as(c_uint, 0x00000002);
pub const LRFDRFE_DTST_SIG_REF_FSMCAL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DTST_SIG_REF_NC_0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_LOCK = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_S = @as(c_uint, 7);
pub const LRFDRFE_DLOEV_LOCK_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_LOL = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_S = @as(c_uint, 6);
pub const LRFDRFE_DLOEV_LOL_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_FCABVTHR = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_S = @as(c_uint, 5);
pub const LRFDRFE_DLOEV_FCABVTHR_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_FCBLWTHR = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_S = @as(c_uint, 4);
pub const LRFDRFE_DLOEV_FCBLWTHR_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_STATE_W = @as(c_uint, 4);
pub const LRFDRFE_DLOEV_STATE_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DLOEV_STATE_S = @as(c_uint, 0);
pub const LRFDRFE_DLOEV_STATE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DLOEV_STATE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTSTRD_DATA_W = @as(c_uint, 16);
pub const LRFDRFE_DTSTRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DTSTRD_DATA_S = @as(c_uint, 0);
pub const LRFDRFE_DTSTRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DTSTRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FDCOSPANLSB_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_FDCOSPANLSB_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_FDCOSPANLSB_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_FDCOSPANLSB_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_FDCOSPANLSB_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FDCOSPANMSB_VAL_W = @as(c_uint, 3);
pub const LRFDRFE_FDCOSPANMSB_VAL_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_FDCOSPANMSB_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_FDCOSPANMSB_VAL_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_FDCOSPANMSB_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCCAL_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TDCCAL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TDCCAL_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TDCCAL_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TDCCAL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALRES_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE_CALRES_MIDCODE_M = @as(c_uint, 0x000003F0);
pub const LRFDRFE_CALRES_MIDCODE_S = @as(c_uint, 4);
pub const LRFDRFE_CALRES_MIDCODE_ALLONES = @as(c_uint, 0x000003F0);
pub const LRFDRFE_CALRES_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALRES_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE_CALRES_CRSCODE_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_CALRES_CRSCODE_S = @as(c_uint, 0);
pub const LRFDRFE_CALRES_CRSCODE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_CALRES_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_GPI_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_GPI_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_GPI_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_GPI_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_GPI_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_GPI_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_GPI_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_GPI_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_MATHACCELIN_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MATHACCELIN_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MATHACCELIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MATHACCELIN_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MATHACCELIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_W = @as(c_uint, 7);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_S = @as(c_uint, 0);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVBY3OUT_DIV3_W = @as(c_uint, 4);
pub const LRFDRFE_DIVBY3OUT_DIV3_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DIVBY3OUT_DIV3_S = @as(c_uint, 0);
pub const LRFDRFE_DIVBY3OUT_DIV3_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DIVBY3OUT_DIV3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CPTSRC_W = @as(c_uint, 6);
pub const LRFDRFE_TIMCTL_CPTSRC_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_TIMCTL_CPTSRC_S = @as(c_uint, 8);
pub const LRFDRFE_TIMCTL_CPTSRC_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_TIMCTL_CPTSRC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CPTCTL = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_S = @as(c_uint, 7);
pub const LRFDRFE_TIMCTL_CPTCTL_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRSRC_W = @as(c_uint, 2);
pub const LRFDRFE_TIMCTL_CNTRSRC_M = @as(c_uint, 0x00000060);
pub const LRFDRFE_TIMCTL_CNTRSRC_S = @as(c_uint, 5);
pub const LRFDRFE_TIMCTL_CNTRSRC_FREF = @as(c_uint, 0x00000060);
pub const LRFDRFE_TIMCTL_CNTRSRC_MAGN1 = @as(c_uint, 0x00000040);
pub const LRFDRFE_TIMCTL_CNTRSRC_MAGN0 = @as(c_uint, 0x00000020);
pub const LRFDRFE_TIMCTL_CNTRSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRCLR = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_S = @as(c_uint, 4);
pub const LRFDRFE_TIMCTL_CNTRCLR_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRCTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_S = @as(c_uint, 3);
pub const LRFDRFE_TIMCTL_CNTRCTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_TIMSRC_W = @as(c_uint, 2);
pub const LRFDRFE_TIMCTL_TIMSRC_M = @as(c_uint, 0x00000006);
pub const LRFDRFE_TIMCTL_TIMSRC_S = @as(c_uint, 1);
pub const LRFDRFE_TIMCTL_TIMSRC_FREF = @as(c_uint, 0x00000006);
pub const LRFDRFE_TIMCTL_TIMSRC_MAGN1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_TIMCTL_TIMSRC_MAGN0 = @as(c_uint, 0x00000002);
pub const LRFDRFE_TIMCTL_TIMSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_TIMCTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCTL_TIMCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMINC_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMINC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMINC_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMINC_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMINC_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMPER_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMPER_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMPER_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMPER_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMPER_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCNT_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMCNT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCNT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCNT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCNT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCAPT_VALUE_W = @as(c_uint, 16);
pub const LRFDRFE_TIMCAPT_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCAPT_VALUE_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCAPT_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCAPT_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCTRL_SEND = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_S = @as(c_uint, 0);
pub const LRFDRFE_TRCCTRL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCSTAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_S = @as(c_uint, 0);
pub const LRFDRFE_TRCSTAT_BUSY_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDRFE_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDRFE_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDRFE_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDRFE_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDRFE_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TRCPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TRCPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL7 = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_S = @as(c_uint, 15);
pub const LRFDRFE_GPOCTL_SEL7_HW = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL6 = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_S = @as(c_uint, 14);
pub const LRFDRFE_GPOCTL_SEL6_HW = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL5 = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_S = @as(c_uint, 13);
pub const LRFDRFE_GPOCTL_SEL5_HW = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL4 = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_S = @as(c_uint, 12);
pub const LRFDRFE_GPOCTL_SEL4_HW = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL3 = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_S = @as(c_uint, 11);
pub const LRFDRFE_GPOCTL_SEL3_HW = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL2 = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_S = @as(c_uint, 10);
pub const LRFDRFE_GPOCTL_SEL2_HW = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL1 = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_S = @as(c_uint, 9);
pub const LRFDRFE_GPOCTL_SEL1_HW = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL0 = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_S = @as(c_uint, 8);
pub const LRFDRFE_GPOCTL_SEL0_HW = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_S = @as(c_uint, 7);
pub const LRFDRFE_GPOCTL_GPO7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_S = @as(c_uint, 6);
pub const LRFDRFE_GPOCTL_GPO6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_S = @as(c_uint, 5);
pub const LRFDRFE_GPOCTL_GPO5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_S = @as(c_uint, 4);
pub const LRFDRFE_GPOCTL_GPO4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_S = @as(c_uint, 3);
pub const LRFDRFE_GPOCTL_GPO3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_S = @as(c_uint, 2);
pub const LRFDRFE_GPOCTL_GPO2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_S = @as(c_uint, 1);
pub const LRFDRFE_GPOCTL_GPO1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_S = @as(c_uint, 0);
pub const LRFDRFE_GPOCTL_GPO0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_S = @as(c_uint, 4);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_ACTIVE = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_S = @as(c_uint, 3);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_ISOLATE = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_S = @as(c_uint, 2);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_ISOLATE = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_S = @as(c_uint, 1);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_ISOLATE = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_S = @as(c_uint, 0);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_ISOLATE = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH180 = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_S = @as(c_uint, 15);
pub const LRFDRFE_DIVCTL_DIV2PH180_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH0 = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_S = @as(c_uint, 14);
pub const LRFDRFE_DIVCTL_DIV2PH0_EN = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH270 = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_S = @as(c_uint, 13);
pub const LRFDRFE_DIVCTL_DIV2PH270_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH90 = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_S = @as(c_uint, 12);
pub const LRFDRFE_DIVCTL_DIV2PH90_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_SPARE11 = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_S = @as(c_uint, 11);
pub const LRFDRFE_DIVCTL_SPARE11_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_S = @as(c_uint, 10);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_DISABLE = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_ENABLEN = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_ADCDIV = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_S = @as(c_uint, 9);
pub const LRFDRFE_DIVCTL_ADCDIV_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_ENSYNTH = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_S = @as(c_uint, 8);
pub const LRFDRFE_DIVCTL_ENSYNTH_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_S = @as(c_uint, 7);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_S = @as(c_uint, 6);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH180DIV = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_S = @as(c_uint, 5);
pub const LRFDRFE_DIVCTL_TXPH180DIV_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH0DIV = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_S = @as(c_uint, 4);
pub const LRFDRFE_DIVCTL_TXPH0DIV_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_RXPH90DIV = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_S = @as(c_uint, 3);
pub const LRFDRFE_DIVCTL_RXPH90DIV_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_RXPH0DIV = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_S = @as(c_uint, 2);
pub const LRFDRFE_DIVCTL_RXPH0DIV_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_SPARE1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_S = @as(c_uint, 1);
pub const LRFDRFE_DIVCTL_SPARE1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_S = @as(c_uint, 0);
pub const LRFDRFE_DIVCTL_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_SPARE = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_S = @as(c_uint, 12);
pub const LRFDRFE_RXCTRL_SPARE_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_ATTN_W = @as(c_uint, 3);
pub const LRFDRFE_RXCTRL_ATTN_M = @as(c_uint, 0x00000E00);
pub const LRFDRFE_RXCTRL_ATTN_S = @as(c_uint, 9);
pub const LRFDRFE_RXCTRL_ATTN__21DB = @as(c_uint, 0x00000E00);
pub const LRFDRFE_RXCTRL_ATTN__18DB = @as(c_uint, 0x00000C00);
pub const LRFDRFE_RXCTRL_ATTN__15DB = @as(c_uint, 0x00000A00);
pub const LRFDRFE_RXCTRL_ATTN__12DB = @as(c_uint, 0x00000800);
pub const LRFDRFE_RXCTRL_ATTN__9DB = @as(c_uint, 0x00000600);
pub const LRFDRFE_RXCTRL_ATTN__6DB = @as(c_uint, 0x00000400);
pub const LRFDRFE_RXCTRL_ATTN__3DB = @as(c_uint, 0x00000200);
pub const LRFDRFE_RXCTRL_ATTN_NOATT = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_IFAMPGC_W = @as(c_uint, 5);
pub const LRFDRFE_RXCTRL_IFAMPGC_M = @as(c_uint, 0x000001F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_S = @as(c_uint, 4);
pub const LRFDRFE_RXCTRL_IFAMPGC_MAX = @as(c_uint, 0x000001F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN3DB = @as(c_uint, 0x000000F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN6DB = @as(c_uint, 0x00000070);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN9DB = @as(c_uint, 0x00000030);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN12DB = @as(c_uint, 0x00000010);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN15DB = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_LNAGAIN_W = @as(c_uint, 4);
pub const LRFDRFE_RXCTRL_LNAGAIN_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RXCTRL_LNAGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_RXCTRL_LNAGAIN_MAX = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN3DB = @as(c_uint, 0x00000007);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN6DB = @as(c_uint, 0x00000003);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN9DB = @as(c_uint, 0x00000001);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN12DB = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNACC0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MAGNACC0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNACC0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNACC1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MAGNACC1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNACC1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSI_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSI_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RFGAIN_DBGAIN_W = @as(c_uint, 8);
pub const LRFDRFE_RFGAIN_DBGAIN_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RFGAIN_DBGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_RFGAIN_DBGAIN_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RFGAIN_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_M = @as(c_uint, 0x0000007C);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_COMP1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_READY = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_NOT_READY = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVSTA_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_DIVSTA_STAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVIDENDL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVIDENDL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVIDENDL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVIDENDH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVIDENDH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVIDENDH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVISORL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVISORL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVISORL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVISORH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVISORH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVISORH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_QUOTIENTL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_QUOTIENTL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_QUOTIENTL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_QUOTIENTH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_QUOTIENTH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_QUOTIENTH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRODUCTL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_PRODUCTL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRODUCTL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRODUCTH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PRODUCTH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRODUCTH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MULTSTA_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_MULTSTA_STAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_MULTCFG_MODE = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_S = @as(c_uint, 0);
pub const LRFDRFE_MULTCFG_MODE_SIGNED = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_UNSIGNED = @as(c_uint, 0x00000000);
pub const __HW_LRFDRFE32_H__ = "";
pub const LRFDRFE32_O_FWSRC_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_O_PDREQ_INIT = @as(c_uint, 0x00000004);
pub const LRFDRFE32_O_EVT1_EVT0 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_O_EVTMSK1_EVTMSK0 = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_O_EVTCLR1_EVTCLR0 = @as(c_uint, 0x00000010);
pub const LRFDRFE32_O_HFXTSTAT = @as(c_uint, 0x00000014);
pub const LRFDRFE32_O_RFSTATE = @as(c_uint, 0x00000018);
pub const LRFDRFE32_O_CMDPAR0_API = @as(c_uint, 0x00000024);
pub const LRFDRFE32_O_MSGBOX_CMDPAR1 = @as(c_uint, 0x00000028);
pub const LRFDRFE32_O_MCEDATIN0_MCEDATOUT0 = @as(c_uint, 0x0000002C);
pub const LRFDRFE32_O_MCECMDIN_MCECMDOUT = @as(c_uint, 0x00000030);
pub const LRFDRFE32_O_PBEDATIN0_PBEDATOUT0 = @as(c_uint, 0x00000034);
pub const LRFDRFE32_O_PBECMDIN_PBECMDOUT = @as(c_uint, 0x00000038);
pub const LRFDRFE32_O_STRB = @as(c_uint, 0x0000003C);
pub const LRFDRFE32_O_MAGNTHR_MAGNTHRCFG = @as(c_uint, 0x00000040);
pub const LRFDRFE32_O_GAINCTL_RSSIOFFSET = @as(c_uint, 0x00000044);
pub const LRFDRFE32_O_MAGNCTL1_MAGNCTL0 = @as(c_uint, 0x00000048);
pub const LRFDRFE32_O_SPARE1_SPARE0 = @as(c_uint, 0x0000004C);
pub const LRFDRFE32_O_SPARE3_SPARE2 = @as(c_uint, 0x00000050);
pub const LRFDRFE32_O_SPARE5_SPARE4 = @as(c_uint, 0x00000054);
pub const LRFDRFE32_O_IFAMPRFLDO_LNA = @as(c_uint, 0x00000058);
pub const LRFDRFE32_O_PA1_PA0 = @as(c_uint, 0x0000005C);
pub const LRFDRFE32_O_IFADC0_ULNA = @as(c_uint, 0x00000060);
pub const LRFDRFE32_O_IFADCLF_IFADC1 = @as(c_uint, 0x00000064);
pub const LRFDRFE32_O_IFADCALDO_IFADCQUANT = @as(c_uint, 0x00000068);
pub const LRFDRFE32_O_IFADCTST_IFADCDLDO = @as(c_uint, 0x0000006C);
pub const LRFDRFE32_O_ATSTREF = @as(c_uint, 0x00000070);
pub const LRFDRFE32_O_DIV_DCO = @as(c_uint, 0x00000074);
pub const LRFDRFE32_O_TDCLDO_DIVLDO = @as(c_uint, 0x00000078);
pub const LRFDRFE32_O_DCOLDO1_DCOLDO0 = @as(c_uint, 0x0000007C);
pub const LRFDRFE32_O_PRE1_PRE0 = @as(c_uint, 0x00000080);
pub const LRFDRFE32_O_PRE3_PRE2 = @as(c_uint, 0x00000084);
pub const LRFDRFE32_O_CAL1_CAL0 = @as(c_uint, 0x00000088);
pub const LRFDRFE32_O_CAL3_CAL2 = @as(c_uint, 0x0000008C);
pub const LRFDRFE32_O_MISC1_MISC0 = @as(c_uint, 0x00000090);
pub const LRFDRFE32_O_LF1_LF0 = @as(c_uint, 0x00000094);
pub const LRFDRFE32_O_PHINIT_PHEDISC = @as(c_uint, 0x00000098);
pub const LRFDRFE32_O_PLLMON1_PLLMON0 = @as(c_uint, 0x0000009C);
pub const LRFDRFE32_O_MOD1_MOD0 = @as(c_uint, 0x000000A0);
pub const LRFDRFE32_O_DTX1_DTX0 = @as(c_uint, 0x000000A4);
pub const LRFDRFE32_O_DTX3_DTX2 = @as(c_uint, 0x000000A8);
pub const LRFDRFE32_O_DTX5_DTX4 = @as(c_uint, 0x000000AC);
pub const LRFDRFE32_O_DTX7_DTX6 = @as(c_uint, 0x000000B0);
pub const LRFDRFE32_O_DTX9_DTX8 = @as(c_uint, 0x000000B4);
pub const LRFDRFE32_O_DTX11_DTX10 = @as(c_uint, 0x000000B8);
pub const LRFDRFE32_O_PLLM0 = @as(c_uint, 0x000000BC);
pub const LRFDRFE32_O_PLLM1 = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_O_CALMMID_CALMCRS = @as(c_uint, 0x000000C4);
pub const LRFDRFE32_O_REFDIV = @as(c_uint, 0x000000C8);
pub const LRFDRFE32_O_DLOCTL0 = @as(c_uint, 0x000000CC);
pub const LRFDRFE32_O_DLOCTL1 = @as(c_uint, 0x000000D0);
pub const LRFDRFE32_O_DCOOVR1_DCOOVR0 = @as(c_uint, 0x000000D4);
pub const LRFDRFE32_O_DLOEV_DTST = @as(c_uint, 0x000000D8);
pub const LRFDRFE32_O_FDCOSPANLSB_DTSTRD = @as(c_uint, 0x000000DC);
pub const LRFDRFE32_O_TDCCAL_FDCOSPANMSB = @as(c_uint, 0x000000E0);
pub const LRFDRFE32_O_GPI_CALRES = @as(c_uint, 0x000000E4);
pub const LRFDRFE32_O_LIN2LOGOUT_MATHACCELIN = @as(c_uint, 0x000000E8);
pub const LRFDRFE32_O_TIMCTL_DIVBY3OUT = @as(c_uint, 0x000000EC);
pub const LRFDRFE32_O_TIMPER_TIMINC = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_O_TIMCAPT_TIMCNT = @as(c_uint, 0x000000F4);
pub const LRFDRFE32_O_TRCSTAT_TRCCTRL = @as(c_uint, 0x000000F8);
pub const LRFDRFE32_O_TRCPAR0_TRCCMD = @as(c_uint, 0x000000FC);
pub const LRFDRFE32_O_GPOCTL_TRCPAR1 = @as(c_uint, 0x00000100);
pub const LRFDRFE32_O_DIVCTL_ANAISOCTL = @as(c_uint, 0x00000104);
pub const LRFDRFE32_O_MAGNACC0_RXCTRL = @as(c_uint, 0x00000108);
pub const LRFDRFE32_O_RSSI_MAGNACC1 = @as(c_uint, 0x0000010C);
pub const LRFDRFE32_O_RFGAIN_RSSIMAX = @as(c_uint, 0x00000110);
pub const LRFDRFE32_O_DIVSTA_IFADCSTAT = @as(c_uint, 0x00000114);
pub const LRFDRFE32_O_DIVIDEND = @as(c_uint, 0x00000118);
pub const LRFDRFE32_O_DIVISOR = @as(c_uint, 0x0000011C);
pub const LRFDRFE32_O_QUOTIENT = @as(c_uint, 0x00000120);
pub const LRFDRFE32_O_PRODUCT = @as(c_uint, 0x00000124);
pub const LRFDRFE32_O_MULTSTA = @as(c_uint, 0x00000128);
pub const LRFDRFE32_O_MULTCFG = @as(c_uint, 0x0000012C);
pub const LRFDRFE32_FWSRC_ENABLE_DATARAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_DATARAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_DATARAM_S = @as(c_uint, 18);
pub const LRFDRFE32_FWSRC_ENABLE_DATARAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_DATARAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_FWRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_FWRAM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_FWRAM_S = @as(c_uint, 17);
pub const LRFDRFE32_FWSRC_ENABLE_FWRAM_S2RRAM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_FWRAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_BANK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_BANK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_BANK_S = @as(c_uint, 16);
pub const LRFDRFE32_FWSRC_ENABLE_BANK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_FWSRC_ENABLE_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_FWSRC_ENABLE_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_FWSRC_ENABLE_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE32_FWSRC_ENABLE_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_FWSRC_ENABLE_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_FWSRC_ENABLE_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_FWSRC_ENABLE_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE32_FWSRC_ENABLE_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_FWSRC_ENABLE_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE32_FWSRC_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_FWSRC_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE32_FWSRC_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_FWSRC_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FWSRC_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE32_FWSRC_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_FWSRC_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE32_FWSRC_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_FWSRC_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PDREQ_INIT_TOPSMPDREQ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PDREQ_INIT_TOPSMPDREQ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PDREQ_INIT_TOPSMPDREQ_S = @as(c_uint, 16);
pub const LRFDRFE32_PDREQ_INIT_TOPSMPDREQ_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PDREQ_INIT_TOPSMPDREQ_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PDREQ_INIT_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_PDREQ_INIT_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_PDREQ_INIT_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE32_PDREQ_INIT_ACC1_RESET = @as(c_uint, 0x00000008);
pub const LRFDRFE32_PDREQ_INIT_ACC1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PDREQ_INIT_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_PDREQ_INIT_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_PDREQ_INIT_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE32_PDREQ_INIT_ACC0_RESET = @as(c_uint, 0x00000004);
pub const LRFDRFE32_PDREQ_INIT_ACC0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PDREQ_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE32_PDREQ_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_PDREQ_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE32_PDREQ_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDRFE32_PDREQ_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PDREQ_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE32_PDREQ_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_PDREQ_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE32_PDREQ_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDRFE32_PDREQ_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_PREREFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_PREREFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_PREREFCLK_S = @as(c_uint, 29);
pub const LRFDRFE32_EVT1_EVT0_PREREFCLK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_REFCLK_S = @as(c_uint, 28);
pub const LRFDRFE32_EVT1_EVT0_REFCLK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_FBLWTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FBLWTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FBLWTHR_S = @as(c_uint, 27);
pub const LRFDRFE32_EVT1_EVT0_FBLWTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_FABVTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FABVTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FABVTHR_S = @as(c_uint, 26);
pub const LRFDRFE32_EVT1_EVT0_FABVTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOCK_S = @as(c_uint, 25);
pub const LRFDRFE32_EVT1_EVT0_LOCK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOL_S = @as(c_uint, 24);
pub const LRFDRFE32_EVT1_EVT0_LOL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVT1_EVT0_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI7_S = @as(c_uint, 23);
pub const LRFDRFE32_EVT1_EVT0_GPI7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI6_S = @as(c_uint, 22);
pub const LRFDRFE32_EVT1_EVT0_GPI6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI5_S = @as(c_uint, 21);
pub const LRFDRFE32_EVT1_EVT0_GPI5_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI4_S = @as(c_uint, 20);
pub const LRFDRFE32_EVT1_EVT0_GPI4_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI3_S = @as(c_uint, 19);
pub const LRFDRFE32_EVT1_EVT0_GPI3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI2_S = @as(c_uint, 18);
pub const LRFDRFE32_EVT1_EVT0_GPI2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI1_S = @as(c_uint, 17);
pub const LRFDRFE32_EVT1_EVT0_GPI1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_GPI0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI0_S = @as(c_uint, 16);
pub const LRFDRFE32_EVT1_EVT0_GPI0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVT1_EVT0_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVT1_EVT0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVT1_EVT0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE32_EVT1_EVT0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVT1_EVT0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVT1_EVT0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVT1_EVT0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE32_EVT1_EVT0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVT1_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVT1_EVT0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVT1_EVT0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVT1_EVT0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE32_EVT1_EVT0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVT1_EVT0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVT1_EVT0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVT1_EVT0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE32_EVT1_EVT0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVT1_EVT0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVT1_EVT0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVT1_EVT0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE32_EVT1_EVT0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVT1_EVT0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVT1_EVT0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVT1_EVT0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE32_EVT1_EVT0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVT1_EVT0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVT1_EVT0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVT1_EVT0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE32_EVT1_EVT0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVT1_EVT0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVT1_EVT0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVT1_EVT0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE32_EVT1_EVT0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVT1_EVT0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVT1_EVT0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVT1_EVT0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE32_EVT1_EVT0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVT1_EVT0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVT1_EVT0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVT1_EVT0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE32_EVT1_EVT0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVT1_EVT0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVT1_EVT0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVT1_EVT0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE32_EVT1_EVT0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVT1_EVT0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVT1_EVT0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVT1_EVT0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVT1_EVT0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE32_EVT1_EVT0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVT1_EVT0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PREREFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PREREFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PREREFCLK_S = @as(c_uint, 29);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PREREFCLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PREREFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_REFCLK_S = @as(c_uint, 28);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_REFCLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_REFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FBLWTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FBLWTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FBLWTHR_S = @as(c_uint, 27);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FBLWTHR_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FBLWTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FABVTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FABVTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FABVTHR_S = @as(c_uint, 26);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FABVTHR_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_FABVTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOCK_S = @as(c_uint, 25);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOL_S = @as(c_uint, 24);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI7_S = @as(c_uint, 23);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI7_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI6_S = @as(c_uint, 22);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI6_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI5_S = @as(c_uint, 21);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI5_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI4_S = @as(c_uint, 20);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI4_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI3_S = @as(c_uint, 19);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI3_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI2_S = @as(c_uint, 18);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI1_S = @as(c_uint, 17);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI0_S = @as(c_uint, 16);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_GPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MAGNTHR_EN = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MAGNTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_S2RSTOP_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP2_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP1_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP0_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBERFEDAT_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBERFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_DLO_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_DLO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBECMD_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_PBECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_COUNTER_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_COUNTER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMCMD_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_TIMER_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_TIMER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_RFEAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTMSK1_EVTMSK0_RFEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PREREFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PREREFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PREREFCLK_S = @as(c_uint, 29);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PREREFCLK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_REFCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_REFCLK_S = @as(c_uint, 28);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_REFCLK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FBLWTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FBLWTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FBLWTHR_S = @as(c_uint, 27);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FBLWTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FABVTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FABVTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FABVTHR_S = @as(c_uint, 26);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FABVTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOCK_S = @as(c_uint, 25);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOCK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOL_S = @as(c_uint, 24);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI7_S = @as(c_uint, 23);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI6_S = @as(c_uint, 22);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI5_S = @as(c_uint, 21);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI5_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI4_S = @as(c_uint, 20);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI4_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI3_S = @as(c_uint, 19);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI2_S = @as(c_uint, 18);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI1_S = @as(c_uint, 17);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI0_S = @as(c_uint, 16);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_EVTCLR1_EVTCLR0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_HFXTSTAT_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE32_HFXTSTAT_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_HFXTSTAT_STAT_S = @as(c_uint, 0);
pub const LRFDRFE32_HFXTSTAT_STAT_QUAL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_HFXTSTAT_STAT_NONQUAL = @as(c_uint, 0x00000000);
pub const LRFDRFE32_RFSTATE_VAL_W = @as(c_uint, 4);
pub const LRFDRFE32_RFSTATE_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_RFSTATE_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_RFSTATE_VAL_RX = @as(c_uint, 0x00000003);
pub const LRFDRFE32_RFSTATE_VAL_TX = @as(c_uint, 0x00000002);
pub const LRFDRFE32_RFSTATE_VAL_SYNTH = @as(c_uint, 0x00000001);
pub const LRFDRFE32_RFSTATE_VAL_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CMDPAR0_API_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_CMDPAR0_API_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CMDPAR0_API_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_CMDPAR0_API_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CMDPAR0_API_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CMDPAR0_API_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDRFE32_CMDPAR0_API_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_CMDPAR0_API_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDRFE32_CMDPAR0_API_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_CMDPAR0_API_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CMDPAR0_API_RFECMD_W = @as(c_uint, 4);
pub const LRFDRFE32_CMDPAR0_API_RFECMD_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_CMDPAR0_API_RFECMD_S = @as(c_uint, 0);
pub const LRFDRFE32_CMDPAR0_API_RFECMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_CMDPAR0_API_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_S2RTRG = @as(c_uint, 0x00000080);
pub const LRFDRFE32_STRB_S2RTRG_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_STRB_S2RTRG_S = @as(c_uint, 7);
pub const LRFDRFE32_STRB_S2RTRG_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE32_STRB_S2RTRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_DMATRG = @as(c_uint, 0x00000040);
pub const LRFDRFE32_STRB_DMATRG_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_STRB_DMATRG_S = @as(c_uint, 6);
pub const LRFDRFE32_STRB_DMATRG_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE32_STRB_DMATRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_SYSTCPT2 = @as(c_uint, 0x00000020);
pub const LRFDRFE32_STRB_SYSTCPT2_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_STRB_SYSTCPT2_S = @as(c_uint, 5);
pub const LRFDRFE32_STRB_SYSTCPT2_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE32_STRB_SYSTCPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_SYSTCPT1 = @as(c_uint, 0x00000010);
pub const LRFDRFE32_STRB_SYSTCPT1_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_STRB_SYSTCPT1_S = @as(c_uint, 4);
pub const LRFDRFE32_STRB_SYSTCPT1_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE32_STRB_SYSTCPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_SYSTCPT0 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_STRB_SYSTCPT0_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_STRB_SYSTCPT0_S = @as(c_uint, 3);
pub const LRFDRFE32_STRB_SYSTCPT0_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE32_STRB_SYSTCPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_EVT1 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_STRB_EVT1_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_STRB_EVT1_S = @as(c_uint, 2);
pub const LRFDRFE32_STRB_EVT1_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE32_STRB_EVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_EVT0 = @as(c_uint, 0x00000002);
pub const LRFDRFE32_STRB_EVT0_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_STRB_EVT0_S = @as(c_uint, 1);
pub const LRFDRFE32_STRB_EVT0_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_STRB_EVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_STRB_CMDDONE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_STRB_CMDDONE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_STRB_CMDDONE_S = @as(c_uint, 0);
pub const LRFDRFE32_STRB_CMDDONE_YES = @as(c_uint, 0x00000001);
pub const LRFDRFE32_STRB_CMDDONE_NO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_VAL_W = @as(c_uint, 8);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_SEL = @as(c_uint, 0x00000002);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_SEL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_SEL_S = @as(c_uint, 1);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_SEL_MAGNACC1 = @as(c_uint, 0x00000002);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_SEL_MAGNACC0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_CTL_S = @as(c_uint, 0);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MAGNTHR_MAGNTHRCFG_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_W = @as(c_uint, 2);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_S = @as(c_uint, 18);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_W = @as(c_uint, 2);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_S = @as(c_uint, 16);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_VAL_W = @as(c_uint, 8);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_GAINCTL_RSSIOFFSET_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_S = @as(c_uint, 28);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_PERIODIC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_W = @as(c_uint, 4);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_S = @as(c_uint, 24);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV256 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV128 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV64 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV32 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_W = @as(c_uint, 8);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_S = @as(c_uint, 16);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_S = @as(c_uint, 12);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_PERIODIC = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_W = @as(c_uint, 4);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_S = @as(c_uint, 8);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV256 = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV128 = @as(c_uint, 0x00000700);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV64 = @as(c_uint, 0x00000600);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV32 = @as(c_uint, 0x00000500);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV16 = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV8 = @as(c_uint, 0x00000300);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV4 = @as(c_uint, 0x00000200);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV2 = @as(c_uint, 0x00000100);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_W = @as(c_uint, 8);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_S = @as(c_uint, 0);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE1_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE1_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE1_SPARE0_SPARE0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE3_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE3_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE3_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE3_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE2_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE2_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE3_SPARE2_SPARE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE5_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE5_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE5_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE5_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE5_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE4_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE4_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE4_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE4_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_SPARE5_SPARE4_SPARE4_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_W = @as(c_uint, 7);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFE000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_S = @as(c_uint, 25);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_BYPASS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFE000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFC000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_S = @as(c_uint, 24);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_W = @as(c_uint, 4);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_S = @as(c_uint, 20);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_W = @as(c_uint, 3);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_S = @as(c_uint, 17);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_S = @as(c_uint, 16);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_SPARE_W = @as(c_uint, 8);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_SPARE_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_SPARE_S = @as(c_uint, 8);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_SPARE_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_SPARE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_TRIM_W = @as(c_uint, 4);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_TRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_TRIM_S = @as(c_uint, 4);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_TRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_BIAS = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_BIAS_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_BIAS_S = @as(c_uint, 3);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_BIAS_INT = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_BIAS_BGAP = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_IB_W = @as(c_uint, 2);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_IB_M = @as(c_uint, 0x00000006);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_IB_S = @as(c_uint, 1);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_IB_MAX = @as(c_uint, 0x00000006);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_EN_S = @as(c_uint, 0);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFAMPRFLDO_LNA_LNA_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_SPARE_W = @as(c_uint, 9);
pub const LRFDRFE32_PA1_PA0_SPARE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF800000, .hex);
pub const LRFDRFE32_PA1_PA0_SPARE_S = @as(c_uint, 23);
pub const LRFDRFE32_PA1_PA0_SPARE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01800000, .hex);
pub const LRFDRFE32_PA1_PA0_SPARE_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_MIXATST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PA1_PA0_MIXATST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PA1_PA0_MIXATST_S = @as(c_uint, 22);
pub const LRFDRFE32_PA1_PA0_MIXATST_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PA1_PA0_MIXATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_LDOITST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOITST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOITST_S = @as(c_uint, 21);
pub const LRFDRFE32_PA1_PA0_LDOITST_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_LDOATST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOATST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOATST_S = @as(c_uint, 20);
pub const LRFDRFE32_PA1_PA0_LDOATST_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_PA1_PA0_LDOATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_RC_W = @as(c_uint, 2);
pub const LRFDRFE32_PA1_PA0_RC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_PA1_PA0_RC_S = @as(c_uint, 18);
pub const LRFDRFE32_PA1_PA0_RC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_PA1_PA0_RC_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_RAMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_PA1_PA0_RAMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_PA1_PA0_RAMP_S = @as(c_uint, 17);
pub const LRFDRFE32_PA1_PA0_RAMP_UP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_PA1_PA0_RAMP_DOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PA1_PA0_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PA1_PA0_EN_S = @as(c_uint, 16);
pub const LRFDRFE32_PA1_PA0_EN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_PA1_PA0_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE32_PA1_PA0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE32_PA1_PA0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE32_PA1_PA0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE32_PA1_PA0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_MODE = @as(c_uint, 0x00004000);
pub const LRFDRFE32_PA1_PA0_MODE_M = @as(c_uint, 0x00004000);
pub const LRFDRFE32_PA1_PA0_MODE_S = @as(c_uint, 14);
pub const LRFDRFE32_PA1_PA0_MODE_HIGH = @as(c_uint, 0x00004000);
pub const LRFDRFE32_PA1_PA0_MODE_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_GAIN_W = @as(c_uint, 3);
pub const LRFDRFE32_PA1_PA0_GAIN_M = @as(c_uint, 0x00003800);
pub const LRFDRFE32_PA1_PA0_GAIN_S = @as(c_uint, 11);
pub const LRFDRFE32_PA1_PA0_GAIN_MAX = @as(c_uint, 0x00003800);
pub const LRFDRFE32_PA1_PA0_GAIN_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_IB_W = @as(c_uint, 6);
pub const LRFDRFE32_PA1_PA0_IB_M = @as(c_uint, 0x000007E0);
pub const LRFDRFE32_PA1_PA0_IB_S = @as(c_uint, 5);
pub const LRFDRFE32_PA1_PA0_IB_MAX = @as(c_uint, 0x000007E0);
pub const LRFDRFE32_PA1_PA0_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PA1_PA0_TRIM_W = @as(c_uint, 5);
pub const LRFDRFE32_PA1_PA0_TRIM_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE32_PA1_PA0_TRIM_S = @as(c_uint, 0);
pub const LRFDRFE32_PA1_PA0_TRIM_MAX = @as(c_uint, 0x0000001F);
pub const LRFDRFE32_PA1_PA0_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_EXTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_EXTCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_EXTCLK_S = @as(c_uint, 31);
pub const LRFDRFE32_IFADC0_ULNA_EXTCLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_EXTCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_DITHERTRIM_W = @as(c_uint, 3);
pub const LRFDRFE32_IFADC0_ULNA_DITHERTRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x70000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHERTRIM_S = @as(c_uint, 28);
pub const LRFDRFE32_IFADC0_ULNA_DITHERTRIM_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x70000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHERTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_W = @as(c_uint, 2);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_S = @as(c_uint, 26);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_ENG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_ENSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_ENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_DITHEREN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_ADCIEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCIEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCIEN_S = @as(c_uint, 25);
pub const LRFDRFE32_IFADC0_ULNA_ADCIEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCIEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_ADCQEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCQEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCQEN_S = @as(c_uint, 24);
pub const LRFDRFE32_IFADC0_ULNA_ADCQEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_ADCQEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_INT2ADJ_W = @as(c_uint, 4);
pub const LRFDRFE32_IFADC0_ULNA_INT2ADJ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_INT2ADJ_S = @as(c_uint, 20);
pub const LRFDRFE32_IFADC0_ULNA_INT2ADJ_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_INT2ADJ_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_W = @as(c_uint, 2);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_S = @as(c_uint, 18);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_ENG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_ENSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_ENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_IFADC0_ULNA_AAFCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADC0_ULNA_SPARE_W = @as(c_uint, 16);
pub const LRFDRFE32_IFADC0_ULNA_SPARE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_IFADC0_ULNA_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE32_IFADC0_ULNA_SPARE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_IFADC0_ULNA_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_FF3_W = @as(c_uint, 4);
pub const LRFDRFE32_IFADCLF_IFADC1_FF3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF3_S = @as(c_uint, 28);
pub const LRFDRFE32_IFADCLF_IFADC1_FF3_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_FF2_W = @as(c_uint, 4);
pub const LRFDRFE32_IFADCLF_IFADC1_FF2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF2_S = @as(c_uint, 24);
pub const LRFDRFE32_IFADCLF_IFADC1_FF2_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF2_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_FF1_W = @as(c_uint, 4);
pub const LRFDRFE32_IFADCLF_IFADC1_FF1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF1_S = @as(c_uint, 20);
pub const LRFDRFE32_IFADCLF_IFADC1_FF1_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_FF1_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_INT3_W = @as(c_uint, 4);
pub const LRFDRFE32_IFADCLF_IFADC1_INT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_INT3_S = @as(c_uint, 16);
pub const LRFDRFE32_IFADCLF_IFADC1_INT3_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_IFADCLF_IFADC1_INT3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_NRZ = @as(c_uint, 0x00008000);
pub const LRFDRFE32_IFADCLF_IFADC1_NRZ_M = @as(c_uint, 0x00008000);
pub const LRFDRFE32_IFADCLF_IFADC1_NRZ_S = @as(c_uint, 15);
pub const LRFDRFE32_IFADCLF_IFADC1_NRZ_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE32_IFADCLF_IFADC1_NRZ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_TRIM_W = @as(c_uint, 6);
pub const LRFDRFE32_IFADCLF_IFADC1_TRIM_M = @as(c_uint, 0x00007E00);
pub const LRFDRFE32_IFADCLF_IFADC1_TRIM_S = @as(c_uint, 9);
pub const LRFDRFE32_IFADCLF_IFADC1_TRIM_ONES = @as(c_uint, 0x00007E00);
pub const LRFDRFE32_IFADCLF_IFADC1_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_RSTN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCLF_IFADC1_RSTN_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCLF_IFADC1_RSTN_S = @as(c_uint, 7);
pub const LRFDRFE32_IFADCLF_IFADC1_RSTN_DIS = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCLF_IFADC1_RSTN_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_CLKGEN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCLF_IFADC1_CLKGEN_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCLF_IFADC1_CLKGEN_S = @as(c_uint, 6);
pub const LRFDRFE32_IFADCLF_IFADC1_CLKGEN_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCLF_IFADC1_CLKGEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCDIGCLK = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCDIGCLK_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCDIGCLK_S = @as(c_uint, 5);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCDIGCLK_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCDIGCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCLFSROUT = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCLFSROUT_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCLFSROUT_S = @as(c_uint, 4);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCLFSROUT_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCLF_IFADC1_ADCLFSROUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_LPFTSTMODE_W = @as(c_uint, 3);
pub const LRFDRFE32_IFADCLF_IFADC1_LPFTSTMODE_M = @as(c_uint, 0x0000000E);
pub const LRFDRFE32_IFADCLF_IFADC1_LPFTSTMODE_S = @as(c_uint, 1);
pub const LRFDRFE32_IFADCLF_IFADC1_LPFTSTMODE_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_IFADCLF_IFADC1_LPFTSTMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCLF_IFADC1_INVCLKOUT = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCLF_IFADC1_INVCLKOUT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCLF_IFADC1_INVCLKOUT_S = @as(c_uint, 0);
pub const LRFDRFE32_IFADCLF_IFADC1_INVCLKOUT_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCLF_IFADC1_INVCLKOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_S = @as(c_uint, 31);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_TRIMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_TRIMOUT_S = @as(c_uint, 24);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_TRIMOUT_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DUMMY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DUMMY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DUMMY_S = @as(c_uint, 23);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DUMMY_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTOUT_S = @as(c_uint, 22);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_S = @as(c_uint, 21);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_S = @as(c_uint, 20);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ITEST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ITEST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ITEST_S = @as(c_uint, 19);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ITEST_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_BYPASS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_BYPASS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_BYPASS_S = @as(c_uint, 18);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_BYPASS_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLAMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLAMP_S = @as(c_uint, 17);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLAMP_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CTL_S = @as(c_uint, 16);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_W = @as(c_uint, 2);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_S = @as(c_uint, 14);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_ONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_W = @as(c_uint, 5);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_M = @as(c_uint, 0x00003E00);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_S = @as(c_uint, 9);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_ONES = @as(c_uint, 0x00003E00);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALLEG = @as(c_uint, 0x00000100);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_M = @as(c_uint, 0x00000100);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_S = @as(c_uint, 8);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_NEG = @as(c_uint, 0x00000100);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_POS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_W = @as(c_uint, 2);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_S = @as(c_uint, 6);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODB = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODP = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_W = @as(c_uint, 2);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_M = @as(c_uint, 0x00000030);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_S = @as(c_uint, 4);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODB = @as(c_uint, 0x00000030);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODP = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_AUTOCAL = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_AUTOCAL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_AUTOCAL_S = @as(c_uint, 3);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_AUTOCAL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_AUTOCAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_QUANTTHR_W = @as(c_uint, 3);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_QUANTTHR_M = @as(c_uint, 0x00000007);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_QUANTTHR_S = @as(c_uint, 0);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_QUANTTHR_ONES = @as(c_uint, 0x00000007);
pub const LRFDRFE32_IFADCALDO_IFADCQUANT_QUANTTHR_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_EXTCURR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_EXTCURR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_EXTCURR_S = @as(c_uint, 23);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_EXTCURR_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_EXTCURR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBIQ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBIQ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBIQ_S = @as(c_uint, 22);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBIQ_COMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBIQ_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBC_S = @as(c_uint, 21);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBC_COMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_QCALDBC_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_SEL_W = @as(c_uint, 5);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_SEL_S = @as(c_uint, 16);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_SEL_EXTCLKN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_SEL_NONE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_TRIMOUT_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_TRIMOUT_S = @as(c_uint, 8);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_TRIMOUT_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_DUMMY = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_DUMMY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_DUMMY_S = @as(c_uint, 7);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_DUMMY_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTOUT = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTOUT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTOUT_S = @as(c_uint, 6);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTOUT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATSTBGP = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATSTBGP_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATSTBGP_S = @as(c_uint, 5);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATSTBGP_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATSTBGP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTERRAMP = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_S = @as(c_uint, 4);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ITEST = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ITEST_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ITEST_S = @as(c_uint, 3);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ITEST_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_BYPASS = @as(c_uint, 0x00000004);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_BYPASS_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_BYPASS_S = @as(c_uint, 2);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_BYPASS_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CLAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CLAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CLAMP_S = @as(c_uint, 1);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CLAMP_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_IFADCTST_IFADCDLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_VREFBPDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_ATSTREF_VREFBPDIS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_ATSTREF_VREFBPDIS_S = @as(c_uint, 31);
pub const LRFDRFE32_ATSTREF_VREFBPDIS_BPDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_ATSTREF_VREFBPDIS_BPEN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_IREFTRIM_W = @as(c_uint, 5);
pub const LRFDRFE32_ATSTREF_IREFTRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7C000000, .hex);
pub const LRFDRFE32_ATSTREF_IREFTRIM_S = @as(c_uint, 26);
pub const LRFDRFE32_ATSTREF_IREFTRIM_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7C000000, .hex);
pub const LRFDRFE32_ATSTREF_IREFTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_ATSTREF_BIAS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_ATSTREF_BIAS_S = @as(c_uint, 25);
pub const LRFDRFE32_ATSTREF_BIAS_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_ATSTREF_BIAS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_OUTPUT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT2_S = @as(c_uint, 24);
pub const LRFDRFE32_ATSTREF_OUTPUT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_OUTPUT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT1_S = @as(c_uint, 23);
pub const LRFDRFE32_ATSTREF_OUTPUT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_ATSTREF_OUTPUT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_ATSTREF_MUX_W = @as(c_uint, 23);
pub const LRFDRFE32_ATSTREF_MUX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007FFFFF, .hex);
pub const LRFDRFE32_ATSTREF_MUX_S = @as(c_uint, 0);
pub const LRFDRFE32_ATSTREF_MUX_IFADC_ATB = @as(c_uint, 0x00008000);
pub const LRFDRFE32_ATSTREF_MUX_LDO_VTEST = @as(c_uint, 0x00004000);
pub const LRFDRFE32_ATSTREF_MUX_LDO_ITEST = @as(c_uint, 0x00002000);
pub const LRFDRFE32_ATSTREF_MUX_PA_PEAK_OUTN = @as(c_uint, 0x00000800);
pub const LRFDRFE32_ATSTREF_MUX_PA_PEAK_OUTP = @as(c_uint, 0x00000400);
pub const LRFDRFE32_ATSTREF_MUX_MIX_OUTQN = @as(c_uint, 0x00000200);
pub const LRFDRFE32_ATSTREF_MUX_MIX_OUTQP = @as(c_uint, 0x00000100);
pub const LRFDRFE32_ATSTREF_MUX_MIX_OUTIN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_ATSTREF_MUX_MIX_OUTIP = @as(c_uint, 0x00000040);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTIN_2 = @as(c_uint, 0x00000020);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTIP_2 = @as(c_uint, 0x00000010);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTQN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTQP = @as(c_uint, 0x00000004);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTIN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_ATSTREF_MUX_FE_OUTIP = @as(c_uint, 0x00000001);
pub const LRFDRFE32_ATSTREF_MUX_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_PDET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIV_DCO_PDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIV_DCO_PDET_S = @as(c_uint, 31);
pub const LRFDRFE32_DIV_DCO_PDET_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIV_DCO_PDET_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_NMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE32_DIV_DCO_NMIREFTRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x70000000, .hex);
pub const LRFDRFE32_DIV_DCO_NMIREFTRIM_S = @as(c_uint, 28);
pub const LRFDRFE32_DIV_DCO_NMIREFTRIM_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x70000000, .hex);
pub const LRFDRFE32_DIV_DCO_NMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_PMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE32_DIV_DCO_PMIREFTRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDRFE32_DIV_DCO_PMIREFTRIM_S = @as(c_uint, 25);
pub const LRFDRFE32_DIV_DCO_PMIREFTRIM_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDRFE32_DIV_DCO_PMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_TXBBOOST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIV_DCO_TXBBOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIV_DCO_TXBBOOST_S = @as(c_uint, 24);
pub const LRFDRFE32_DIV_DCO_TXBBOOST_INCREASED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIV_DCO_TXBBOOST_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_S1GFRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIV_DCO_S1GFRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIV_DCO_S1GFRC_S = @as(c_uint, 23);
pub const LRFDRFE32_DIV_DCO_S1GFRC_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIV_DCO_S1GFRC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_BUFGAIN_W = @as(c_uint, 2);
pub const LRFDRFE32_DIV_DCO_BUFGAIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDRFE32_DIV_DCO_BUFGAIN_S = @as(c_uint, 21);
pub const LRFDRFE32_DIV_DCO_BUFGAIN__60_PST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDRFE32_DIV_DCO_BUFGAIN_DONT_USE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DIV_DCO_BUFGAIN__80_PST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DIV_DCO_BUFGAIN_MAX = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIV_DCO_BIAS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIV_DCO_BIAS_S = @as(c_uint, 20);
pub const LRFDRFE32_DIV_DCO_BIAS_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIV_DCO_BIAS_ALTERNATIVE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIV_DCO_OUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIV_DCO_OUT_S = @as(c_uint, 19);
pub const LRFDRFE32_DIV_DCO_OUT_FE_2G4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIV_DCO_OUT_FE_S1G = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_RATIO_W = @as(c_uint, 3);
pub const LRFDRFE32_DIV_DCO_RATIO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_S = @as(c_uint, 16);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV30 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIV_DCO_RATIO_DIV2 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_MTDCSPARE_W = @as(c_uint, 2);
pub const LRFDRFE32_DIV_DCO_MTDCSPARE_M = @as(c_uint, 0x00000600);
pub const LRFDRFE32_DIV_DCO_MTDCSPARE_S = @as(c_uint, 9);
pub const LRFDRFE32_DIV_DCO_MTDCSPARE_DIS = @as(c_uint, 0x00000200);
pub const LRFDRFE32_DIV_DCO_MTDCSPARE_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_SPARE7_W = @as(c_uint, 2);
pub const LRFDRFE32_DIV_DCO_SPARE7_M = @as(c_uint, 0x00000180);
pub const LRFDRFE32_DIV_DCO_SPARE7_S = @as(c_uint, 7);
pub const LRFDRFE32_DIV_DCO_SPARE7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DIV_DCO_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_TAILRESTRIM_W = @as(c_uint, 4);
pub const LRFDRFE32_DIV_DCO_TAILRESTRIM_M = @as(c_uint, 0x00000078);
pub const LRFDRFE32_DIV_DCO_TAILRESTRIM_S = @as(c_uint, 3);
pub const LRFDRFE32_DIV_DCO_TAILRESTRIM_ALLONES = @as(c_uint, 0x00000078);
pub const LRFDRFE32_DIV_DCO_TAILRESTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_RTRIMCAP = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIV_DCO_RTRIMCAP_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIV_DCO_RTRIMCAP_S = @as(c_uint, 2);
pub const LRFDRFE32_DIV_DCO_RTRIMCAP_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIV_DCO_RTRIMCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_CNRCAP = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIV_DCO_CNRCAP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIV_DCO_CNRCAP_S = @as(c_uint, 1);
pub const LRFDRFE32_DIV_DCO_CNRCAP__50MHZ = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIV_DCO_CNRCAP_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIV_DCO_CRSCAPCM = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIV_DCO_CRSCAPCM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIV_DCO_CRSCAPCM_S = @as(c_uint, 0);
pub const LRFDRFE32_DIV_DCO_CRSCAPCM_REDUCED = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIV_DCO_CRSCAPCM_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_S = @as(c_uint, 31);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_S = @as(c_uint, 24);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_S = @as(c_uint, 23);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00700000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_S = @as(c_uint, 20);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_VSSA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_LDO_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_VDDA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_S = @as(c_uint, 19);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_DIODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_R = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_MODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_MODE_S = @as(c_uint, 18);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_MODE_FAST = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_S = @as(c_uint, 17);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_CTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_CTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_CTL_S = @as(c_uint, 16);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_CTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TDCLDO_DIVLDO_TDCLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_ONES = @as(c_uint, 0x00008000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_S = @as(c_uint, 8);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_ONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_ITST = @as(c_uint, 0x00000080);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_ITST_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_ITST_S = @as(c_uint, 7);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_ITST_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_M = @as(c_uint, 0x00000070);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_S = @as(c_uint, 4);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_VDDR = @as(c_uint, 0x00000040);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_LDO_OUT = @as(c_uint, 0x00000020);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_GND = @as(c_uint, 0x00000010);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_S = @as(c_uint, 3);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_MODE = @as(c_uint, 0x00000004);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_MODE_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_MODE_S = @as(c_uint, 2);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_MODE_FAST = @as(c_uint, 0x00000004);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS = @as(c_uint, 0x00000002);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_S = @as(c_uint, 1);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TDCLDO_DIVLDO_DIVLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_REFSRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_REFSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_REFSRC_S = @as(c_uint, 26);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_REFSRC_BAW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_REFSRC_XTAL = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_DIVATST_W = @as(c_uint, 2);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_DIVATST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_DIVATST_S = @as(c_uint, 24);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_DIVATST_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_DIVATST_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PERFM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PERFM_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PERFM_S = @as(c_uint, 23);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PERFM_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PERFM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CHRGFILT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CHRGFILT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CHRGFILT_S = @as(c_uint, 22);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CHRGFILT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CHRGFILT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_W = @as(c_uint, 6);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_S = @as(c_uint, 16);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_VSSANA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_FIRST_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ATST_LDO_OUT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_W = @as(c_uint, 2);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_S = @as(c_uint, 14);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_BOTH = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_SECOND = @as(c_uint, 0x00008000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_FIRST = @as(c_uint, 0x00004000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_SECONDTRIM_W = @as(c_uint, 6);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_SECONDTRIM_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_SECONDTRIM_S = @as(c_uint, 8);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_SECONDTRIM_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_SECONDTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_W = @as(c_uint, 4);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_S = @as(c_uint, 4);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PDN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PDN_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PDN_S = @as(c_uint, 3);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PDN_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_PDN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPFIRST = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPFIRST_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPFIRST_S = @as(c_uint, 2);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPFIRST_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPFIRST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPBOTH = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPBOTH_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPBOTH_S = @as(c_uint, 1);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPBOTH_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_BYPBOTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CTL_S = @as(c_uint, 0);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOLDO1_DCOLDO0_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_W = @as(c_uint, 2);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_S = @as(c_uint, 30);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_K16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_K8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_K4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRBW_K2 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_IIRORD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRORD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRORD_S = @as(c_uint, 29);
pub const LRFDRFE32_PRE1_PRE0_IIRORD_SECOND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRORD_FIRST = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_IIRDIV_W = @as(c_uint, 5);
pub const LRFDRFE32_PRE1_PRE0_IIRDIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRDIV_S = @as(c_uint, 24);
pub const LRFDRFE32_PRE1_PRE0_IIRDIV_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDRFE32_PRE1_PRE0_IIRDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_CALHSDDC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PRE1_PRE0_CALHSDDC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PRE1_PRE0_CALHSDDC_S = @as(c_uint, 22);
pub const LRFDRFE32_PRE1_PRE0_CALHSDDC_GATE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_PRE1_PRE0_CALHSDDC_NOGATE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_HSDDC_W = @as(c_uint, 6);
pub const LRFDRFE32_PRE1_PRE0_HSDDC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDRFE32_PRE1_PRE0_HSDDC_S = @as(c_uint, 16);
pub const LRFDRFE32_PRE1_PRE0_HSDDC_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003F0000, .hex);
pub const LRFDRFE32_PRE1_PRE0_HSDDC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_SPARE14_W = @as(c_uint, 2);
pub const LRFDRFE32_PRE1_PRE0_SPARE14_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_PRE1_PRE0_SPARE14_S = @as(c_uint, 14);
pub const LRFDRFE32_PRE1_PRE0_SPARE14_ALLONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_PRE1_PRE0_SPARE14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV1_W = @as(c_uint, 6);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV1_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV1_S = @as(c_uint, 8);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV1_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_SPARE6_W = @as(c_uint, 2);
pub const LRFDRFE32_PRE1_PRE0_SPARE6_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_PRE1_PRE0_SPARE6_S = @as(c_uint, 6);
pub const LRFDRFE32_PRE1_PRE0_SPARE6_ALLONES = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_PRE1_PRE0_SPARE6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV0_W = @as(c_uint, 6);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV0_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV0_S = @as(c_uint, 0);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV0_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE32_PRE1_PRE0_PLLDIV0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE3_PRE2_FINECALDIV_W = @as(c_uint, 11);
pub const LRFDRFE32_PRE3_PRE2_FINECALDIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFE00000, .hex);
pub const LRFDRFE32_PRE3_PRE2_FINECALDIV_S = @as(c_uint, 21);
pub const LRFDRFE32_PRE3_PRE2_FINECALDIV_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFE00000, .hex);
pub const LRFDRFE32_PRE3_PRE2_FINECALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVMSB_W = @as(c_uint, 5);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVMSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVMSB_S = @as(c_uint, 16);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVMSB_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVLSB_W = @as(c_uint, 4);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVLSB_M = @as(c_uint, 0x0000F000);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVLSB_S = @as(c_uint, 12);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVLSB_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDRFE32_PRE3_PRE2_MIDCALDIVLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE3_PRE2_CRSCALDIV_W = @as(c_uint, 6);
pub const LRFDRFE32_PRE3_PRE2_CRSCALDIV_M = @as(c_uint, 0x00000FC0);
pub const LRFDRFE32_PRE3_PRE2_CRSCALDIV_S = @as(c_uint, 6);
pub const LRFDRFE32_PRE3_PRE2_CRSCALDIV_ALLONES = @as(c_uint, 0x00000FC0);
pub const LRFDRFE32_PRE3_PRE2_CRSCALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRE3_PRE2_FSMDIV_W = @as(c_uint, 6);
pub const LRFDRFE32_PRE3_PRE2_FSMDIV_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE32_PRE3_PRE2_FSMDIV_S = @as(c_uint, 0);
pub const LRFDRFE32_PRE3_PRE2_FSMDIV_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE32_PRE3_PRE2_FSMDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE15_S = @as(c_uint, 31);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCTOP_W = @as(c_uint, 7);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCTOP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCTOP_S = @as(c_uint, 24);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCTOP_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCTOP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE7_S = @as(c_uint, 23);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCBOT_W = @as(c_uint, 7);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCBOT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCBOT_S = @as(c_uint, 16);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCBOT_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const LRFDRFE32_CAL1_CAL0_CAL1_FCBOT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE32_CAL1_CAL0_CAL0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_FCSTART_W = @as(c_uint, 7);
pub const LRFDRFE32_CAL1_CAL0_CAL0_FCSTART_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE32_CAL1_CAL0_CAL0_FCSTART_S = @as(c_uint, 8);
pub const LRFDRFE32_CAL1_CAL0_CAL0_FCSTART_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE32_CAL1_CAL0_CAL0_FCSTART_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_CRS = @as(c_uint, 0x00000080);
pub const LRFDRFE32_CAL1_CAL0_CAL0_CRS_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_CAL1_CAL0_CAL0_CRS_S = @as(c_uint, 7);
pub const LRFDRFE32_CAL1_CAL0_CAL0_CRS_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_CAL1_CAL0_CAL0_CRS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_MID = @as(c_uint, 0x00000040);
pub const LRFDRFE32_CAL1_CAL0_CAL0_MID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_CAL1_CAL0_CAL0_MID_S = @as(c_uint, 6);
pub const LRFDRFE32_CAL1_CAL0_CAL0_MID_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_CAL1_CAL0_CAL0_MID_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KTDC = @as(c_uint, 0x00000020);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KTDC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KTDC_S = @as(c_uint, 5);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KTDC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KTDC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KDCO = @as(c_uint, 0x00000010);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KDCO_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KDCO_S = @as(c_uint, 4);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KDCO_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_CAL1_CAL0_CAL0_KDCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_W = @as(c_uint, 2);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_S = @as(c_uint, 2);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_8_TIMES = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_4_TIMES = @as(c_uint, 0x00000008);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_2_TIMES = @as(c_uint, 0x00000004);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_1_TIME = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDC_SPARE_W = @as(c_uint, 2);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDC_SPARE_M = @as(c_uint, 0x00000003);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDC_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDC_SPARE_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE32_CAL1_CAL0_CAL0_TDC_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL3_CAL2_DTXGAIN_W = @as(c_uint, 16);
pub const LRFDRFE32_CAL3_CAL2_DTXGAIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CAL3_CAL2_DTXGAIN_S = @as(c_uint, 16);
pub const LRFDRFE32_CAL3_CAL2_DTXGAIN_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CAL3_CAL2_DTXGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CAL3_CAL2_KTDCINV_W = @as(c_uint, 16);
pub const LRFDRFE32_CAL3_CAL2_KTDCINV_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_CAL3_CAL2_KTDCINV_S = @as(c_uint, 0);
pub const LRFDRFE32_CAL3_CAL2_KTDCINV_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_CAL3_CAL2_KTDCINV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_FCDEMCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMCLK_S = @as(c_uint, 30);
pub const LRFDRFE32_MISC1_MISC0_FCDEMCLK_CKVD64 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMCLK_CKCD16 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_W = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_S = @as(c_uint, 28);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_SDM_XOR_PH_ERR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_SDM = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_PH_ERR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_MISC1_MISC0_FCDEMUPD_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_TDCINL_W = @as(c_uint, 6);
pub const LRFDRFE32_MISC1_MISC0_TDCINL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FC00000, .hex);
pub const LRFDRFE32_MISC1_MISC0_TDCINL_S = @as(c_uint, 22);
pub const LRFDRFE32_MISC1_MISC0_TDCINL_ONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FC00000, .hex);
pub const LRFDRFE32_MISC1_MISC0_TDCINL_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_TDCINLCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_MISC1_MISC0_TDCINLCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_MISC1_MISC0_TDCINLCTL_S = @as(c_uint, 21);
pub const LRFDRFE32_MISC1_MISC0_TDCINLCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_MISC1_MISC0_TDCINLCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_PHINIT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_MISC1_MISC0_PHINIT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_MISC1_MISC0_PHINIT_S = @as(c_uint, 20);
pub const LRFDRFE32_MISC1_MISC0_PHINIT_UNKNOWN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_MISC1_MISC0_PHINIT_KNOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVRCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVRCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVRCTL_S = @as(c_uint, 19);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVRCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVR_W = @as(c_uint, 3);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVR_S = @as(c_uint, 16);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVR_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDRFE32_MISC1_MISC0_SDMOOVR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_PHCPT = @as(c_uint, 0x00002000);
pub const LRFDRFE32_MISC1_MISC0_PHCPT_M = @as(c_uint, 0x00002000);
pub const LRFDRFE32_MISC1_MISC0_PHCPT_S = @as(c_uint, 13);
pub const LRFDRFE32_MISC1_MISC0_PHCPT_ASYNC = @as(c_uint, 0x00002000);
pub const LRFDRFE32_MISC1_MISC0_PHCPT_SYNC = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_TDCCALCORR = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MISC1_MISC0_TDCCALCORR_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MISC1_MISC0_TDCCALCORR_S = @as(c_uint, 12);
pub const LRFDRFE32_MISC1_MISC0_TDCCALCORR_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MISC1_MISC0_TDCCALCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_TDCMSBCORR = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MISC1_MISC0_TDCMSBCORR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MISC1_MISC0_TDCMSBCORR_S = @as(c_uint, 11);
pub const LRFDRFE32_MISC1_MISC0_TDCMSBCORR_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MISC1_MISC0_TDCMSBCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_SDMDEM = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MISC1_MISC0_SDMDEM_M = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MISC1_MISC0_SDMDEM_S = @as(c_uint, 10);
pub const LRFDRFE32_MISC1_MISC0_SDMDEM_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MISC1_MISC0_SDMDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_W = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_M = @as(c_uint, 0x00000300);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_S = @as(c_uint, 8);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_CKVD16_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_CKVD16_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_CKVD16_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE32_MISC1_MISC0_DLYSDM_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_DLYPHVALID = @as(c_uint, 0x00000040);
pub const LRFDRFE32_MISC1_MISC0_DLYPHVALID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_MISC1_MISC0_DLYPHVALID_S = @as(c_uint, 6);
pub const LRFDRFE32_MISC1_MISC0_DLYPHVALID_CKVD16_1_PER = @as(c_uint, 0x00000040);
pub const LRFDRFE32_MISC1_MISC0_DLYPHVALID_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_W = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_M = @as(c_uint, 0x00000030);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_S = @as(c_uint, 4);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_CKVD64_3_PER = @as(c_uint, 0x00000030);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_CKVD64_2_PER = @as(c_uint, 0x00000020);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_CKVD64_1_PER = @as(c_uint, 0x00000010);
pub const LRFDRFE32_MISC1_MISC0_DLYCANCRS_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_W = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_S = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_CKVD16_4_PER = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_CKVD16_3_PER = @as(c_uint, 0x00000008);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_CKVD16_2_PER = @as(c_uint, 0x00000004);
pub const LRFDRFE32_MISC1_MISC0_DLYCANFINE_CKVD16_1_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_W = @as(c_uint, 2);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_M = @as(c_uint, 0x00000003);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_S = @as(c_uint, 0);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_CKVD64_3_PER = @as(c_uint, 0x00000003);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_CKVD64_2_PER = @as(c_uint, 0x00000002);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_CKVD64_1_PER = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MISC1_MISC0_DLYADD_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_LF1_LF0_KP_W = @as(c_uint, 14);
pub const LRFDRFE32_LF1_LF0_KP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFF0000, .hex);
pub const LRFDRFE32_LF1_LF0_KP_S = @as(c_uint, 16);
pub const LRFDRFE32_LF1_LF0_KP_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFF0000, .hex);
pub const LRFDRFE32_LF1_LF0_KP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_LF1_LF0_KIPREC = @as(c_uint, 0x00001000);
pub const LRFDRFE32_LF1_LF0_KIPREC_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_LF1_LF0_KIPREC_S = @as(c_uint, 12);
pub const LRFDRFE32_LF1_LF0_KIPREC_HIGH = @as(c_uint, 0x00001000);
pub const LRFDRFE32_LF1_LF0_KIPREC_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_LF1_LF0_KI_W = @as(c_uint, 12);
pub const LRFDRFE32_LF1_LF0_KI_M = @as(c_uint, 0x00000FFF);
pub const LRFDRFE32_LF1_LF0_KI_S = @as(c_uint, 0);
pub const LRFDRFE32_LF1_LF0_KI_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDRFE32_LF1_LF0_KI_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PHINIT_PHEDISC_OFF_W = @as(c_uint, 8);
pub const LRFDRFE32_PHINIT_PHEDISC_OFF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_PHINIT_PHEDISC_OFF_S = @as(c_uint, 16);
pub const LRFDRFE32_PHINIT_PHEDISC_OFF_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_PHINIT_PHEDISC_OFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PHINIT_PHEDISC_CNT_W = @as(c_uint, 4);
pub const LRFDRFE32_PHINIT_PHEDISC_CNT_M = @as(c_uint, 0x00003C00);
pub const LRFDRFE32_PHINIT_PHEDISC_CNT_S = @as(c_uint, 10);
pub const LRFDRFE32_PHINIT_PHEDISC_CNT_ALLONES = @as(c_uint, 0x00003C00);
pub const LRFDRFE32_PHINIT_PHEDISC_CNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PHINIT_PHEDISC_THR_W = @as(c_uint, 10);
pub const LRFDRFE32_PHINIT_PHEDISC_THR_M = @as(c_uint, 0x000003FF);
pub const LRFDRFE32_PHINIT_PHEDISC_THR_S = @as(c_uint, 0);
pub const LRFDRFE32_PHINIT_PHEDISC_THR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDRFE32_PHINIT_PHEDISC_THR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKCNT_W = @as(c_uint, 5);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKCNT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKCNT_S = @as(c_uint, 24);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKCNT_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKTHR_W = @as(c_uint, 8);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKTHR_S = @as(c_uint, 16);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKTHR_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOCKTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_W = @as(c_uint, 2);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_S = @as(c_uint, 14);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_128_PER = @as(c_uint, 0x0000C000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_64_PER = @as(c_uint, 0x00008000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_32_PER = @as(c_uint, 0x00004000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_16_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLTHR_W = @as(c_uint, 6);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLTHR_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLTHR_S = @as(c_uint, 8);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLTHR_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_PLLMON1_PLLMON0_PHELOLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLMON1_PLLMON0_FCTHR_W = @as(c_uint, 7);
pub const LRFDRFE32_PLLMON1_PLLMON0_FCTHR_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE32_PLLMON1_PLLMON0_FCTHR_S = @as(c_uint, 0);
pub const LRFDRFE32_PLLMON1_PLLMON0_FCTHR_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE32_PLLMON1_PLLMON0_FCTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_FOFF_W = @as(c_uint, 12);
pub const LRFDRFE32_MOD1_MOD0_FOFF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDRFE32_MOD1_MOD0_FOFF_S = @as(c_uint, 16);
pub const LRFDRFE32_MOD1_MOD0_FOFF_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFF0000, .hex);
pub const LRFDRFE32_MOD1_MOD0_FOFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_W = @as(c_uint, 2);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_M = @as(c_uint, 0x00001800);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_S = @as(c_uint, 11);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_TWO_POINT_MOD_FRF = @as(c_uint, 0x00001800);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_INLOOP_MOD_FRF = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_INLOOP_MOD_FREF = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MOD1_MOD0_SCHEME_NC = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_W = @as(c_uint, 3);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_S = @as(c_uint, 8);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_CHIRP = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_SHAPEDZIGBEE = @as(c_uint, 0x00000300);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_PCWSPSK = @as(c_uint, 0x00000200);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_ZIGBEE = @as(c_uint, 0x00000100);
pub const LRFDRFE32_MOD1_MOD0_SYMSHP_SHAPEDFSK = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_W = @as(c_uint, 2);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_S = @as(c_uint, 6);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_18 = @as(c_uint, 0x000000C0);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_17 = @as(c_uint, 0x00000080);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_16 = @as(c_uint, 0x00000040);
pub const LRFDRFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_15 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_W = @as(c_uint, 2);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_M = @as(c_uint, 0x00000030);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_S = @as(c_uint, 4);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_X8 = @as(c_uint, 0x00000030);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_X4 = @as(c_uint, 0x00000020);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_X2 = @as(c_uint, 0x00000010);
pub const LRFDRFE32_MOD1_MOD0_SHPGAIN_X1 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_W = @as(c_uint, 2);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_S = @as(c_uint, 2);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_ILLEGAL1 = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_INTP_BY_32 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_INTP_BY_16 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_MOD1_MOD0_INTPFACT_ILLEGAL0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX1_DTX0_SHP3_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX1_DTX0_SHP3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX1_DTX0_SHP3_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX1_DTX0_SHP3_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX1_DTX0_SHP3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX1_DTX0_SHP2_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX1_DTX0_SHP2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX1_DTX0_SHP2_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX1_DTX0_SHP2_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX1_DTX0_SHP2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX1_DTX0_SHP1_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX1_DTX0_SHP1_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX1_DTX0_SHP1_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX1_DTX0_SHP1_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX1_DTX0_SHP1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX1_DTX0_SHP0_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX1_DTX0_SHP0_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX1_DTX0_SHP0_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX1_DTX0_SHP0_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX1_DTX0_SHP0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX3_DTX2_SHP7_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX3_DTX2_SHP7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX3_DTX2_SHP7_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX3_DTX2_SHP7_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX3_DTX2_SHP7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX3_DTX2_SHP6_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX3_DTX2_SHP6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX3_DTX2_SHP6_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX3_DTX2_SHP6_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX3_DTX2_SHP6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX3_DTX2_SHP5_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX3_DTX2_SHP5_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX3_DTX2_SHP5_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX3_DTX2_SHP5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX3_DTX2_SHP5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX3_DTX2_SHP4_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX3_DTX2_SHP4_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX3_DTX2_SHP4_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX3_DTX2_SHP4_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX3_DTX2_SHP4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX5_DTX4_SHP11_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX5_DTX4_SHP11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX5_DTX4_SHP11_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX5_DTX4_SHP11_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX5_DTX4_SHP11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX5_DTX4_SHP10_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX5_DTX4_SHP10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX5_DTX4_SHP10_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX5_DTX4_SHP10_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX5_DTX4_SHP10_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX5_DTX4_SHP9_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX5_DTX4_SHP9_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX5_DTX4_SHP9_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX5_DTX4_SHP9_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX5_DTX4_SHP9_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX5_DTX4_SHP8_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX5_DTX4_SHP8_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX5_DTX4_SHP8_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX5_DTX4_SHP8_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX5_DTX4_SHP8_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX7_DTX6_SHP15_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX7_DTX6_SHP15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX7_DTX6_SHP15_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX7_DTX6_SHP15_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX7_DTX6_SHP15_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX7_DTX6_SHP14_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX7_DTX6_SHP14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX7_DTX6_SHP14_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX7_DTX6_SHP14_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX7_DTX6_SHP14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX7_DTX6_SHP13_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX7_DTX6_SHP13_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX7_DTX6_SHP13_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX7_DTX6_SHP13_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX7_DTX6_SHP13_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX7_DTX6_SHP12_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX7_DTX6_SHP12_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX7_DTX6_SHP12_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX7_DTX6_SHP12_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX7_DTX6_SHP12_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX9_DTX8_SHP19_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX9_DTX8_SHP19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX9_DTX8_SHP19_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX9_DTX8_SHP19_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX9_DTX8_SHP19_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX9_DTX8_SHP18_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX9_DTX8_SHP18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX9_DTX8_SHP18_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX9_DTX8_SHP18_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX9_DTX8_SHP18_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX9_DTX8_SHP17_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX9_DTX8_SHP17_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX9_DTX8_SHP17_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX9_DTX8_SHP17_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX9_DTX8_SHP17_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX9_DTX8_SHP16_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX9_DTX8_SHP16_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX9_DTX8_SHP16_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX9_DTX8_SHP16_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX9_DTX8_SHP16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX11_DTX10_SHP23_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX11_DTX10_SHP23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX11_DTX10_SHP23_S = @as(c_uint, 24);
pub const LRFDRFE32_DTX11_DTX10_SHP23_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const LRFDRFE32_DTX11_DTX10_SHP23_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX11_DTX10_SHP22_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX11_DTX10_SHP22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX11_DTX10_SHP22_S = @as(c_uint, 16);
pub const LRFDRFE32_DTX11_DTX10_SHP22_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DTX11_DTX10_SHP22_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX11_DTX10_SHP21_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX11_DTX10_SHP21_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX11_DTX10_SHP21_S = @as(c_uint, 8);
pub const LRFDRFE32_DTX11_DTX10_SHP21_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE32_DTX11_DTX10_SHP21_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DTX11_DTX10_SHP20_W = @as(c_uint, 8);
pub const LRFDRFE32_DTX11_DTX10_SHP20_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX11_DTX10_SHP20_S = @as(c_uint, 0);
pub const LRFDRFE32_DTX11_DTX10_SHP20_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_DTX11_DTX10_SHP20_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLM0_VAL_W = @as(c_uint, 30);
pub const LRFDRFE32_PLLM0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFC, .hex);
pub const LRFDRFE32_PLLM0_VAL_S = @as(c_uint, 2);
pub const LRFDRFE32_PLLM0_VAL_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE32_PLLM0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLM0_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE32_PLLM0_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE32_PLLM0_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE32_PLLM0_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE32_PLLM0_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLM1_VAL_W = @as(c_uint, 30);
pub const LRFDRFE32_PLLM1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFC, .hex);
pub const LRFDRFE32_PLLM1_VAL_S = @as(c_uint, 2);
pub const LRFDRFE32_PLLM1_VAL_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE32_PLLM1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PLLM1_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE32_PLLM1_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE32_PLLM1_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE32_PLLM1_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE32_PLLM1_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMMID_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMMID_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMMID_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMMID_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMMID_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMCRS_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMCRS_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMCRS_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMCRS_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_CALMMID_CALMCRS_CALMCRS_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_REFDIV_LOAD_W = @as(c_uint, 16);
pub const LRFDRFE32_REFDIV_LOAD_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_REFDIV_LOAD_S = @as(c_uint, 0);
pub const LRFDRFE32_REFDIV_LOAD_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_REFDIV_LOAD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_TDCSTOP_W = @as(c_uint, 3);
pub const LRFDRFE32_DLOCTL0_TDCSTOP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE32_DLOCTL0_TDCSTOP_S = @as(c_uint, 8);
pub const LRFDRFE32_DLOCTL0_TDCSTOP_OPEN = @as(c_uint, 0x00000100);
pub const LRFDRFE32_DLOCTL0_TDCSTOP_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_DTSTXTAL = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL0_DTSTXTAL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL0_DTSTXTAL_S = @as(c_uint, 7);
pub const LRFDRFE32_DLOCTL0_DTSTXTAL_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL0_DTSTXTAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_LOOPUPD_W = @as(c_uint, 3);
pub const LRFDRFE32_DLOCTL0_LOOPUPD_M = @as(c_uint, 0x00000070);
pub const LRFDRFE32_DLOCTL0_LOOPUPD_S = @as(c_uint, 4);
pub const LRFDRFE32_DLOCTL0_LOOPUPD_ALT = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DLOCTL0_LOOPUPD_DEF = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_PH3 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL0_PH3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL0_PH3_S = @as(c_uint, 3);
pub const LRFDRFE32_DLOCTL0_PH3_START = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL0_PH3_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_PH2 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL0_PH2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL0_PH2_S = @as(c_uint, 2);
pub const LRFDRFE32_DLOCTL0_PH2_START = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL0_PH2_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_LOOPMODE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL0_LOOPMODE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL0_LOOPMODE_S = @as(c_uint, 1);
pub const LRFDRFE32_DLOCTL0_LOOPMODE_OPEN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL0_LOOPMODE_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL0_RSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL0_RSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL0_RSTN_S = @as(c_uint, 0);
pub const LRFDRFE32_DLOCTL0_RSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL0_RSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_DCO = @as(c_uint, 0x00008000);
pub const LRFDRFE32_DLOCTL1_DCO_M = @as(c_uint, 0x00008000);
pub const LRFDRFE32_DLOCTL1_DCO_S = @as(c_uint, 15);
pub const LRFDRFE32_DLOCTL1_DCO_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE32_DLOCTL1_DCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_FCDEM = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL1_FCDEM_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL1_FCDEM_S = @as(c_uint, 7);
pub const LRFDRFE32_DLOCTL1_FCDEM_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOCTL1_FCDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_DTSTCKVD = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOCTL1_DTSTCKVD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOCTL1_DTSTCKVD_S = @as(c_uint, 6);
pub const LRFDRFE32_DLOCTL1_DTSTCKVD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOCTL1_DTSTCKVD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_PHEDISC = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOCTL1_PHEDISC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOCTL1_PHEDISC_S = @as(c_uint, 5);
pub const LRFDRFE32_DLOCTL1_PHEDISC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOCTL1_PHEDISC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_PLLMON = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DLOCTL1_PLLMON_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DLOCTL1_PLLMON_S = @as(c_uint, 4);
pub const LRFDRFE32_DLOCTL1_PLLMON_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DLOCTL1_PLLMON_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_IIR = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL1_IIR_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL1_IIR_S = @as(c_uint, 3);
pub const LRFDRFE32_DLOCTL1_IIR_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOCTL1_IIR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_MOD = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL1_MOD_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL1_MOD_S = @as(c_uint, 2);
pub const LRFDRFE32_DLOCTL1_MOD_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOCTL1_MOD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_MODINIT = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL1_MODINIT_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL1_MODINIT_S = @as(c_uint, 1);
pub const LRFDRFE32_DLOCTL1_MODINIT_ACTIVATE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOCTL1_MODINIT_DEACTIVATE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOCTL1_MTDCRSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL1_MTDCRSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL1_MTDCRSTN_S = @as(c_uint, 0);
pub const LRFDRFE32_DLOCTL1_MTDCRSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOCTL1_MTDCRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECODE_W = @as(c_uint, 7);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECODE_S = @as(c_uint, 24);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECODE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7F000000, .hex);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICODE_W = @as(c_uint, 8);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICODE_S = @as(c_uint, 16);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICODE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCODE_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCODE_S = @as(c_uint, 8);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCODE_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCODE_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCODE_S = @as(c_uint, 4);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCODE_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECTL = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECTL_S = @as(c_uint, 3);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_FINECTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICTL = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICTL_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICTL_S = @as(c_uint, 2);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICTL_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_SDMICTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCTL = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCTL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCTL_S = @as(c_uint, 1);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCTL_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_MIDCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCTL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCTL_S = @as(c_uint, 0);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DCOOVR1_DCOOVR0_CRSCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOCK_S = @as(c_uint, 23);
pub const LRFDRFE32_DLOEV_DTST_LOCK_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOL_S = @as(c_uint, 22);
pub const LRFDRFE32_DLOEV_DTST_LOL_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DLOEV_DTST_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_FCABVTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCABVTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCABVTHR_S = @as(c_uint, 21);
pub const LRFDRFE32_DLOEV_DTST_FCABVTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_FCBLWTHR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCBLWTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCBLWTHR_S = @as(c_uint, 20);
pub const LRFDRFE32_DLOEV_DTST_FCBLWTHR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DLOEV_DTST_FCBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_STATE_W = @as(c_uint, 4);
pub const LRFDRFE32_DLOEV_DTST_STATE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_DLOEV_DTST_STATE_S = @as(c_uint, 16);
pub const LRFDRFE32_DLOEV_DTST_STATE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDRFE32_DLOEV_DTST_STATE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_SPARE11_W = @as(c_uint, 4);
pub const LRFDRFE32_DLOEV_DTST_SPARE11_M = @as(c_uint, 0x00007800);
pub const LRFDRFE32_DLOEV_DTST_SPARE11_S = @as(c_uint, 11);
pub const LRFDRFE32_DLOEV_DTST_SPARE11_ALLONES = @as(c_uint, 0x00007800);
pub const LRFDRFE32_DLOEV_DTST_SPARE11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_W = @as(c_uint, 3);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_M = @as(c_uint, 0x00000700);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_S = @as(c_uint, 8);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_7_PER = @as(c_uint, 0x00000700);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_6_PER = @as(c_uint, 0x00000600);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_5_PER = @as(c_uint, 0x00000500);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_4_PER = @as(c_uint, 0x00000400);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE32_DLOEV_DTST_VARTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_REFTGLDLY = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOEV_DTST_REFTGLDLY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOEV_DTST_REFTGLDLY_S = @as(c_uint, 7);
pub const LRFDRFE32_DLOEV_DTST_REFTGLDLY_CLK_1_PER = @as(c_uint, 0x00000080);
pub const LRFDRFE32_DLOEV_DTST_REFTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_TRNSEQ = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOEV_DTST_TRNSEQ_M = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOEV_DTST_TRNSEQ_S = @as(c_uint, 6);
pub const LRFDRFE32_DLOEV_DTST_TRNSEQ_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE32_DLOEV_DTST_TRNSEQ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_SPARE5 = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOEV_DTST_SPARE5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOEV_DTST_SPARE5_S = @as(c_uint, 5);
pub const LRFDRFE32_DLOEV_DTST_SPARE5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE32_DLOEV_DTST_SPARE5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DLOEV_DTST_SIG_W = @as(c_uint, 5);
pub const LRFDRFE32_DLOEV_DTST_SIG_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE32_DLOEV_DTST_SIG_S = @as(c_uint, 0);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_15 = @as(c_uint, 0x0000001F);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_14 = @as(c_uint, 0x0000001E);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_13 = @as(c_uint, 0x0000001D);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_12 = @as(c_uint, 0x0000001C);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_11 = @as(c_uint, 0x0000001B);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_LOOP_UPD_FINECODE = @as(c_uint, 0x0000001A);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_LOCK_FINECODE = @as(c_uint, 0x00000019);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_MPX_CAN = @as(c_uint, 0x00000018);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_TDCSTOP_STATUS_TDC = @as(c_uint, 0x00000017);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_TDCSTOP_PHERR = @as(c_uint, 0x00000016);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_PH_COMP_PHERR_TDCSTOP = @as(c_uint, 0x00000015);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_PH_TDCCORR = @as(c_uint, 0x00000014);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_PH_RAW = @as(c_uint, 0x00000013);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_PHERR_LOWER = @as(c_uint, 0x00000012);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_PHERR_UPPER = @as(c_uint, 0x00000011);
pub const LRFDRFE32_DLOEV_DTST_SIG_VAR_NC_0 = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_15 = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_14 = @as(c_uint, 0x0000000E);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_13 = @as(c_uint, 0x0000000D);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_12 = @as(c_uint, 0x0000000C);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_11 = @as(c_uint, 0x0000000B);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_10 = @as(c_uint, 0x0000000A);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_9 = @as(c_uint, 0x00000009);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_8 = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_7 = @as(c_uint, 0x00000007);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_6 = @as(c_uint, 0x00000006);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_5 = @as(c_uint, 0x00000005);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_4 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_3 = @as(c_uint, 0x00000003);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_FERR_MAG = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_FSMCAL = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DLOEV_DTST_SIG_REF_NC_0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_DATA_W = @as(c_uint, 16);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_DATA_S = @as(c_uint, 0);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_FDCOSPANLSB_DTSTRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_W = @as(c_uint, 3);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_M = @as(c_uint, 0x00000007);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDRFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI7_S = @as(c_uint, 23);
pub const LRFDRFE32_GPI_CALRES_GPI7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI6_S = @as(c_uint, 22);
pub const LRFDRFE32_GPI_CALRES_GPI6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI5_S = @as(c_uint, 21);
pub const LRFDRFE32_GPI_CALRES_GPI5_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI4_S = @as(c_uint, 20);
pub const LRFDRFE32_GPI_CALRES_GPI4_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI3_S = @as(c_uint, 19);
pub const LRFDRFE32_GPI_CALRES_GPI3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI2_S = @as(c_uint, 18);
pub const LRFDRFE32_GPI_CALRES_GPI2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI1_S = @as(c_uint, 17);
pub const LRFDRFE32_GPI_CALRES_GPI1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_GPI0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI0_S = @as(c_uint, 16);
pub const LRFDRFE32_GPI_CALRES_GPI0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPI_CALRES_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE32_GPI_CALRES_MIDCODE_M = @as(c_uint, 0x000003F0);
pub const LRFDRFE32_GPI_CALRES_MIDCODE_S = @as(c_uint, 4);
pub const LRFDRFE32_GPI_CALRES_MIDCODE_ALLONES = @as(c_uint, 0x000003F0);
pub const LRFDRFE32_GPI_CALRES_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPI_CALRES_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE32_GPI_CALRES_CRSCODE_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_GPI_CALRES_CRSCODE_S = @as(c_uint, 0);
pub const LRFDRFE32_GPI_CALRES_CRSCODE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_GPI_CALRES_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_W = @as(c_uint, 7);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_S = @as(c_uint, 16);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_LIN2LOGOUT_MATHACCELIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTSRC_W = @as(c_uint, 6);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTSRC_S = @as(c_uint, 24);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTSRC_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F000000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTSRC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTCTL_S = @as(c_uint, 23);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CPTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_W = @as(c_uint, 2);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_S = @as(c_uint, 21);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_FREF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00600000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_MAGN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_MAGN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCLR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCLR_S = @as(c_uint, 20);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCLR_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCLR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCTL_S = @as(c_uint, 19);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_CNTRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_W = @as(c_uint, 2);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_S = @as(c_uint, 17);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_FREF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_MAGN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_MAGN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMCTL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMCTL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMCTL_S = @as(c_uint, 16);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_TIMCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_DIV3_W = @as(c_uint, 4);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_DIV3_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_DIV3_S = @as(c_uint, 0);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_DIV3_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_TIMCTL_DIVBY3OUT_DIV3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMPER_TIMINC_TIMPER_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_TIMPER_TIMINC_TIMPER_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TIMPER_TIMINC_TIMPER_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_TIMPER_TIMINC_TIMPER_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TIMPER_TIMINC_TIMPER_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMPER_TIMINC_TIMINC_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_TIMPER_TIMINC_TIMINC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_TIMPER_TIMINC_TIMINC_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_TIMPER_TIMINC_TIMINC_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_TIMPER_TIMINC_TIMINC_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VALUE_W = @as(c_uint, 16);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VALUE_S = @as(c_uint, 16);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VALUE_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_TIMCAPT_TIMCNT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_BUSY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_BUSY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_BUSY_S = @as(c_uint, 16);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_BUSY_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_SEND = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_SEND_S = @as(c_uint, 0);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_TRCSTAT_TRCCTRL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TRCPAR0_TRCCMD_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_TRCPAR0_TRCCMD_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TRCPAR0_TRCCMD_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_TRCPAR0_TRCCMD_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_TRCPAR0_TRCCMD_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_TRCPAR0_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL7_S = @as(c_uint, 31);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL7_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL7_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL6_S = @as(c_uint, 30);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL6_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL6_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL5_S = @as(c_uint, 29);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL5_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL5_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL4_S = @as(c_uint, 28);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL4_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL4_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL3_S = @as(c_uint, 27);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL3_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL3_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL2_S = @as(c_uint, 26);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL2_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL2_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL1_S = @as(c_uint, 25);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL1_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL1_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL0_S = @as(c_uint, 24);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL0_HW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_SEL0_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO7_S = @as(c_uint, 23);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO6_S = @as(c_uint, 22);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO5_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO5_S = @as(c_uint, 21);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO5_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO4_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO4_S = @as(c_uint, 20);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO4_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO3_S = @as(c_uint, 19);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO2_S = @as(c_uint, 18);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO1_S = @as(c_uint, 17);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO0_S = @as(c_uint, 16);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO0_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_GPOCTL_TRCPAR1_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_GPOCTL_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_GPOCTL_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_GPOCTL_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_GPOCTL_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_GPOCTL_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH180 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH180_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH180_S = @as(c_uint, 31);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH180_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH180_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH0_S = @as(c_uint, 30);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH270 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH270_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH270_S = @as(c_uint, 29);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH270_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH270_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH90 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH90_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH90_S = @as(c_uint, 28);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH90_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2PH90_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE11_S = @as(c_uint, 27);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE11_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_S = @as(c_uint, 26);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_DISABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_ENABLEN = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIV_S = @as(c_uint, 25);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ENSYNTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ENSYNTH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ENSYNTH_S = @as(c_uint, 24);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ENSYNTH_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ENSYNTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_S = @as(c_uint, 23);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_S = @as(c_uint, 22);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH180DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH180DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH180DIV_S = @as(c_uint, 21);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH180DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH180DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH0DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH0DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH0DIV_S = @as(c_uint, 20);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH0DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_TXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH90DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH90DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH90DIV_S = @as(c_uint, 19);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH90DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH90DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH0DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH0DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH0DIV_S = @as(c_uint, 18);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH0DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_RXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE1_S = @as(c_uint, 17);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE1_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_SPARE1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_EN_S = @as(c_uint, 16);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_EN_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_M = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_S = @as(c_uint, 4);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_ACTIVE = @as(c_uint, 0x00000010);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_M = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_S = @as(c_uint, 3);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_ISOLATE = @as(c_uint, 0x00000008);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_M = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_S = @as(c_uint, 2);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_ISOLATE = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_S = @as(c_uint, 1);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_ISOLATE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_S = @as(c_uint, 0);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_ISOLATE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_MAGNACC0_RXCTRL_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_MAGNACC0_RXCTRL_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_MAGNACC0_RXCTRL_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDRFE32_MAGNACC0_RXCTRL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_SPARE = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_SPARE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_SPARE_S = @as(c_uint, 12);
pub const LRFDRFE32_MAGNACC0_RXCTRL_SPARE_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_SPARE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN_W = @as(c_uint, 3);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN_M = @as(c_uint, 0x00000E00);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN_S = @as(c_uint, 9);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__21DB = @as(c_uint, 0x00000E00);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__18DB = @as(c_uint, 0x00000C00);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__15DB = @as(c_uint, 0x00000A00);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__12DB = @as(c_uint, 0x00000800);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__9DB = @as(c_uint, 0x00000600);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__6DB = @as(c_uint, 0x00000400);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN__3DB = @as(c_uint, 0x00000200);
pub const LRFDRFE32_MAGNACC0_RXCTRL_ATTN_NOATT = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_W = @as(c_uint, 5);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_M = @as(c_uint, 0x000001F0);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_S = @as(c_uint, 4);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MAX = @as(c_uint, 0x000001F0);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN3DB = @as(c_uint, 0x000000F0);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN6DB = @as(c_uint, 0x00000070);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN9DB = @as(c_uint, 0x00000030);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN12DB = @as(c_uint, 0x00000010);
pub const LRFDRFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN15DB = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_W = @as(c_uint, 4);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_S = @as(c_uint, 0);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_MAX = @as(c_uint, 0x0000000F);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN3DB = @as(c_uint, 0x00000007);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN6DB = @as(c_uint, 0x00000003);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN9DB = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN12DB = @as(c_uint, 0x00000000);
pub const LRFDRFE32_RSSI_MAGNACC1_RSSI_VAL_W = @as(c_uint, 8);
pub const LRFDRFE32_RSSI_MAGNACC1_RSSI_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_RSSI_MAGNACC1_RSSI_VAL_S = @as(c_uint, 16);
pub const LRFDRFE32_RSSI_MAGNACC1_RSSI_VAL_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_RSSI_MAGNACC1_RSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_RSSI_MAGNACC1_MAGNACC1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE32_RSSI_MAGNACC1_MAGNACC1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_RSSI_MAGNACC1_MAGNACC1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_RSSI_MAGNACC1_MAGNACC1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_RSSI_MAGNACC1_MAGNACC1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_RFGAIN_RSSIMAX_DBGAIN_W = @as(c_uint, 8);
pub const LRFDRFE32_RFGAIN_RSSIMAX_DBGAIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_RFGAIN_RSSIMAX_DBGAIN_S = @as(c_uint, 16);
pub const LRFDRFE32_RFGAIN_RSSIMAX_DBGAIN_ALLONES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const LRFDRFE32_RFGAIN_RSSIMAX_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_RFGAIN_RSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE32_RFGAIN_RSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_RFGAIN_RSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_RFGAIN_RSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE32_RFGAIN_RSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_STAT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_STAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_STAT_S = @as(c_uint, 16);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_STAT_BUSY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_W = @as(c_uint, 5);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_M = @as(c_uint, 0x0000007C);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_S = @as(c_uint, 2);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_COMP1 = @as(c_uint, 0x00000004);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALDONE = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_S = @as(c_uint, 1);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_READY = @as(c_uint, 0x00000002);
pub const LRFDRFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_NOT_READY = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVIDEND_VAL_W = @as(c_uint, 32);
pub const LRFDRFE32_DIVIDEND_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDRFE32_DIVIDEND_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_DIVIDEND_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_DIVIDEND_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_DIVISOR_VAL_W = @as(c_uint, 32);
pub const LRFDRFE32_DIVISOR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDRFE32_DIVISOR_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_DIVISOR_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_DIVISOR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_QUOTIENT_VAL_W = @as(c_uint, 32);
pub const LRFDRFE32_QUOTIENT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDRFE32_QUOTIENT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_QUOTIENT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_QUOTIENT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_PRODUCT_VAL_W = @as(c_uint, 32);
pub const LRFDRFE32_PRODUCT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const LRFDRFE32_PRODUCT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE32_PRODUCT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE32_PRODUCT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MULTSTA_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTSTA_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTSTA_STAT_S = @as(c_uint, 0);
pub const LRFDRFE32_MULTSTA_STAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTSTA_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE32_MULTCFG_MODE = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTCFG_MODE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTCFG_MODE_S = @as(c_uint, 0);
pub const LRFDRFE32_MULTCFG_MODE_SIGNED = @as(c_uint, 0x00000001);
pub const LRFDRFE32_MULTCFG_MODE_UNSIGNED = @as(c_uint, 0x00000000);
pub const __HW_MEMMAP_H__ = "";
pub const FLASH_MAIN_BASE = @as(c_int, 0x00000000);
pub const FLASH_MAIN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hex);
pub const ROM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0F000000, .hex);
pub const ROM_SIZE = @as(c_int, 0x3000);
pub const SRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const SRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9000, .hex);
pub const PMCTL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const CKMD_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40001000, .hex);
pub const RTC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40002000, .hex);
pub const IOC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40003000, .hex);
pub const SYS0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40004000, .hex);
pub const EVTULL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40005000, .hex);
pub const PMUD_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40006000, .hex);
pub const DBGSS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4000F000, .hex);
pub const CLKCTL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40020000, .hex);
pub const FLASH_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40021000, .hex);
pub const SYSTIM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40022000, .hex);
pub const GPIO_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40023000, .hex);
pub const VIMS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40024000, .hex);
pub const EVTSVT_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40025000, .hex);
pub const DMA_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40026000, .hex);
pub const SPI0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40030000, .hex);
pub const UART0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40034000, .hex);
pub const I2C0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40038000, .hex);
pub const ADC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40050000, .hex);
pub const LGPT0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40060000, .hex);
pub const LGPT1_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40061000, .hex);
pub const LGPT2_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40062000, .hex);
pub const LGPT3_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40063000, .hex);
pub const LRFDDBELL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40080000, .hex);
pub const LRFDPBE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081000, .hex);
pub const LRFDPBE32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081400, .hex);
pub const LRFDTXF_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081800, .hex);
pub const LRFDRXF_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081C00, .hex);
pub const LRFDMDM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40082000, .hex);
pub const LRFDMDM32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40082400, .hex);
pub const LRFDRFE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40083000, .hex);
pub const LRFDRFE32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40083400, .hex);
pub const LRFDTRC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40084000, .hex);
pub const LRFDS2R_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40085000, .hex);
pub const LRFD_PBERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40090000, .hex);
pub const LRFD_PBERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_BUFRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40092000, .hex);
pub const LRFD_BUFRAM_SIZE = @as(c_int, 0x600);
pub const LRFD_MCERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40094000, .hex);
pub const LRFD_MCERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_RFERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40096000, .hex);
pub const LRFD_RFERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_S2RRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40098000, .hex);
pub const LRFD_S2RRAM_SIZE = @as(c_int, 0x1000);
pub const AES_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400C0000, .hex);
pub const FCFG_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4E000000, .hex);
pub const FCFG_SIZE = @as(c_int, 0x400);
pub const CCFG_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4E020000, .hex);
pub const CCFG_SIZE = @as(c_int, 0x800);
pub const BPU_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE0002000, .hex);
pub const SYSTICK_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000E010, .hex);
pub const DCB_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000ED30, .hex);
pub const SCSCS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000EFC0, .hex);
pub const CPU_ROM_TABLE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE00FF000, .hex);
pub const __HW_PMCTL_H__ = "";
pub const PMCTL_O_DESC = @as(c_uint, 0x00000000);
pub const PMCTL_O_DESCEX = @as(c_uint, 0x00000004);
pub const PMCTL_O_SHTDWN = @as(c_uint, 0x00000008);
pub const PMCTL_O_SLPCTL = @as(c_uint, 0x0000000C);
pub const PMCTL_O_WUSTA = @as(c_uint, 0x00000010);
pub const PMCTL_O_VDDRCTL = @as(c_uint, 0x00000014);
pub const PMCTL_O_IOSEGSET = @as(c_uint, 0x00000018);
pub const PMCTL_O_IOSEGCLR = @as(c_uint, 0x0000001C);
pub const PMCTL_O_SYSFSET = @as(c_uint, 0x00000020);
pub const PMCTL_O_SYSFCLR = @as(c_uint, 0x00000024);
pub const PMCTL_O_SYSFSTA = @as(c_uint, 0x00000028);
pub const PMCTL_O_RSTCTL = @as(c_uint, 0x0000002C);
pub const PMCTL_O_RSTSTA = @as(c_uint, 0x00000030);
pub const PMCTL_O_BOOTSTA = @as(c_uint, 0x00000034);
pub const PMCTL_O_AONRSTA1 = @as(c_uint, 0x0000003C);
pub const PMCTL_O_AONRSET1 = @as(c_uint, 0x00000040);
pub const PMCTL_O_AONRCLR1 = @as(c_uint, 0x00000044);
pub const PMCTL_O_DELTA = @as(c_uint, 0x0000004C);
pub const PMCTL_O_WUTIME = @as(c_uint, 0x00000050);
pub const PMCTL_O_PREPUCTL = @as(c_uint, 0x00000054);
pub const PMCTL_O_SWSTMP = @as(c_uint, 0x00000058);
pub const PMCTL_O_ETPP = @as(c_uint, 0x00000064);
pub const PMCTL_O_RETCFG0 = @as(c_uint, 0x0000007C);
pub const PMCTL_O_RETCFG1 = @as(c_uint, 0x00000080);
pub const PMCTL_O_RETCFG2 = @as(c_uint, 0x00000084);
pub const PMCTL_O_RETCFG3 = @as(c_uint, 0x00000088);
pub const PMCTL_O_RETCFG4 = @as(c_uint, 0x0000008C);
pub const PMCTL_O_RETCFG5 = @as(c_uint, 0x00000090);
pub const PMCTL_O_RETCFG6 = @as(c_uint, 0x00000094);
pub const PMCTL_O_RETCFG7 = @as(c_uint, 0x00000098);
pub const PMCTL_DESC_MODID_W = @as(c_uint, 16);
pub const PMCTL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const PMCTL_DESC_MODID_S = @as(c_uint, 16);
pub const PMCTL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const PMCTL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const PMCTL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const PMCTL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const PMCTL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const PMCTL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const PMCTL_DESC_MAJREV_W = @as(c_uint, 4);
pub const PMCTL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const PMCTL_DESC_MAJREV_S = @as(c_uint, 4);
pub const PMCTL_DESC_MINREV_W = @as(c_uint, 4);
pub const PMCTL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const PMCTL_DESC_MINREV_S = @as(c_uint, 0);
pub const PMCTL_DESCEX_FLASHSZ_W = @as(c_uint, 2);
pub const PMCTL_DESCEX_FLASHSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_S = @as(c_uint, 30);
pub const PMCTL_DESCEX_FLASHSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ0 = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_SRAMSZ_W = @as(c_uint, 2);
pub const PMCTL_DESCEX_SRAMSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_S = @as(c_uint, 28);
pub const PMCTL_DESCEX_SRAMSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ0 = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_TSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_S = @as(c_uint, 27);
pub const PMCTL_DESCEX_TSD_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_LPCMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_S = @as(c_uint, 26);
pub const PMCTL_DESCEX_LPCMP_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const PMCTL_SHTDWN_KEY_W = @as(c_uint, 16);
pub const PMCTL_SHTDWN_KEY_M = @as(c_uint, 0x0000FFFF);
pub const PMCTL_SHTDWN_KEY_S = @as(c_uint, 0);
pub const PMCTL_SHTDWN_KEY_VALID = @as(c_uint, 0x0000A5A5);
pub const PMCTL_SLPCTL_SLPN = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_M = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_S = @as(c_uint, 0);
pub const PMCTL_SLPCTL_SLPN_DIS = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_EN = @as(c_uint, 0x00000000);
pub const PMCTL_WUSTA_SRC_W = @as(c_uint, 2);
pub const PMCTL_WUSTA_SRC_M = @as(c_uint, 0x00000003);
pub const PMCTL_WUSTA_SRC_S = @as(c_uint, 0);
pub const PMCTL_WUSTA_SRC_STBY = @as(c_uint, 0x00000002);
pub const PMCTL_WUSTA_SRC_RST_SHTDWN = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_STBY = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_M = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_S = @as(c_uint, 1);
pub const PMCTL_VDDRCTL_STBY_PSUEDO = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_NORMAL = @as(c_uint, 0x00000000);
pub const PMCTL_VDDRCTL_SELECT = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_M = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_S = @as(c_uint, 0);
pub const PMCTL_VDDRCTL_SELECT_DCDC = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_GLDO = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGSET_VDDS3 = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_M = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_S = @as(c_uint, 1);
pub const PMCTL_IOSEGSET_VDDS3_EN = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGSET_VDDS2 = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_M = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_S = @as(c_uint, 0);
pub const PMCTL_IOSEGSET_VDDS2_EN = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGCLR_VDDS3 = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_M = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_S = @as(c_uint, 1);
pub const PMCTL_IOSEGCLR_VDDS3_DIS = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGCLR_VDDS2 = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_M = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_S = @as(c_uint, 0);
pub const PMCTL_IOSEGCLR_VDDS2_DIS = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFSET_FLAG2_SET = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFSET_FLAG1_SET = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFSET_FLAG0_SET = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFCLR_FLAG2_CLR = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFCLR_FLAG1_CLR = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFCLR_FLAG0_CLR = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSTA_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFSTA_FLAG2_VAL1 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_VAL0 = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSTA_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFSTA_FLAG1_VAL1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFSTA_FLAG0_VAL1 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_VAL0 = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_LFLOSS = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_M = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_S = @as(c_uint, 2);
pub const PMCTL_RSTCTL_LFLOSS_ARMED = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_DISARMED = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_TSDEN = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_M = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_S = @as(c_uint, 1);
pub const PMCTL_RSTCTL_TSDEN_EN = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_SYSRST = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_M = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_S = @as(c_uint, 0);
pub const PMCTL_RSTCTL_SYSRST_SET = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_SDDET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_S = @as(c_uint, 17);
pub const PMCTL_RSTSTA_SDDET_TRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_IOWUSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_S = @as(c_uint, 16);
pub const PMCTL_RSTSTA_IOWUSD_TRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_SYSSRC_W = @as(c_uint, 4);
pub const PMCTL_RSTSTA_SYSSRC_M = @as(c_uint, 0x000000F0);
pub const PMCTL_RSTSTA_SYSSRC_S = @as(c_uint, 4);
pub const PMCTL_RSTSTA_SYSSRC_DERREV = @as(c_uint, 0x000000F0);
pub const PMCTL_RSTSTA_SYSSRC_AERREV = @as(c_uint, 0x000000E0);
pub const PMCTL_RSTSTA_SYSSRC_AFSMEV = @as(c_uint, 0x00000060);
pub const PMCTL_RSTSTA_SYSSRC_SWDRSTEV = @as(c_uint, 0x00000050);
pub const PMCTL_RSTSTA_SYSSRC_SYSRSTEV = @as(c_uint, 0x00000040);
pub const PMCTL_RSTSTA_SYSSRC_WDTEV = @as(c_uint, 0x00000030);
pub const PMCTL_RSTSTA_SYSSRC_LOCKUPEV = @as(c_uint, 0x00000020);
pub const PMCTL_RSTSTA_SYSSRC_CPURSTEV = @as(c_uint, 0x00000010);
pub const PMCTL_RSTSTA_SYSSRC_LFLOSSEV = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_TSDEV = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_M = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_S = @as(c_uint, 3);
pub const PMCTL_RSTSTA_TSDEV_TRIG = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_RESETSRC_W = @as(c_uint, 3);
pub const PMCTL_RSTSTA_RESETSRC_M = @as(c_uint, 0x00000007);
pub const PMCTL_RSTSTA_RESETSRC_S = @as(c_uint, 0);
pub const PMCTL_RSTSTA_RESETSRC_SYSRESET = @as(c_uint, 0x00000006);
pub const PMCTL_RSTSTA_RESETSRC_VDDRLOSS = @as(c_uint, 0x00000004);
pub const PMCTL_RSTSTA_RESETSRC_VDDSLOSS = @as(c_uint, 0x00000002);
pub const PMCTL_RSTSTA_RESETSRC_PINRESET = @as(c_uint, 0x00000001);
pub const PMCTL_RSTSTA_RESETSRC_PWRON = @as(c_uint, 0x00000000);
pub const PMCTL_BOOTSTA_FLAG_W = @as(c_uint, 8);
pub const PMCTL_BOOTSTA_FLAG_M = @as(c_uint, 0x000000FF);
pub const PMCTL_BOOTSTA_FLAG_S = @as(c_uint, 0);
pub const PMCTL_BOOTSTA_FLAG_APP_FAULT_HANDLER = @as(c_uint, 0x000000FF);
pub const PMCTL_BOOTSTA_FLAG_APP_FAIL_APPTRANSFER = @as(c_uint, 0x000000FE);
pub const PMCTL_BOOTSTA_FLAG_APP_FAIL_NOAPP = @as(c_uint, 0x000000FD);
pub const PMCTL_BOOTSTA_FLAG_APP_WAITLOOP_DBGPROBE = @as(c_uint, 0x000000C1);
pub const PMCTL_BOOTSTA_FLAG_MODE_APP = @as(c_uint, 0x000000C0);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAULT_HANDLER = @as(c_uint, 0x000000BF);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAIL_APPTRANSFER = @as(c_uint, 0x000000BE);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAIL_EXECUTION_CONTEXT = @as(c_uint, 0x000000BD);
pub const PMCTL_BOOTSTA_FLAG_BLDR_CMD_PROCESSING = @as(c_uint, 0x000000BC);
pub const PMCTL_BOOTSTA_FLAG_BLDR_CMD_IDLE = @as(c_uint, 0x000000BB);
pub const PMCTL_BOOTSTA_FLAG_BLDR_STARTED = @as(c_uint, 0x000000BA);
pub const PMCTL_BOOTSTA_FLAG_BLDR_WAITLOOP_DBGPROBE = @as(c_uint, 0x00000081);
pub const PMCTL_BOOTSTA_FLAG_MODE_BLDR = @as(c_uint, 0x00000080);
pub const PMCTL_BOOTSTA_FLAG_BOOT_FAULT_HANDLER = @as(c_uint, 0x0000003F);
pub const PMCTL_BOOTSTA_FLAG_BOOT_FAIL_SRAM_REPAIR = @as(c_uint, 0x0000003E);
pub const PMCTL_BOOTSTA_FLAG_BOOT_WAITLOOP_DBGPROBE = @as(c_uint, 0x00000038);
pub const PMCTL_BOOTSTA_FLAG_BOOT_EXITED_SACI = @as(c_uint, 0x00000037);
pub const PMCTL_BOOTSTA_FLAG_BOOT_WAIT_SWD_DISCONNECT = @as(c_uint, 0x00000036);
pub const PMCTL_BOOTSTA_FLAG_BOOT_ENTERED_SACI = @as(c_uint, 0x00000020);
pub const PMCTL_BOOTSTA_FLAG_BOOT_GENERAL_TRIMS = @as(c_uint, 0x00000003);
pub const PMCTL_BOOTSTA_FLAG_BOOT_SRAM_REP_DONE = @as(c_uint, 0x00000002);
pub const PMCTL_BOOTSTA_FLAG_BOOT_COLD_BOOT = @as(c_uint, 0x00000001);
pub const PMCTL_BOOTSTA_FLAG_BOOT_RESET = @as(c_uint, 0x00000000);
pub const PMCTL_AONRSTA1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRSTA1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSTA1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRSET1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRSET1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSET1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRSET1_FLAG_ALL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSET1_FLAG_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_AONRCLR1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRCLR1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRCLR1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRCLR1_FLAG_ALL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRCLR1_FLAG_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_DELTA_SLWP_W = @as(c_uint, 2);
pub const PMCTL_DELTA_SLWP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DELTA_SLWP_S = @as(c_uint, 30);
pub const PMCTL_DELTA_SLWP_INVALID3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DELTA_SLWP_HFXT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_DELTA_SLWP_SVT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_DELTA_SLWP_INVALID0 = @as(c_uint, 0x00000000);
pub const PMCTL_DELTA_TIME_W = @as(c_uint, 12);
pub const PMCTL_DELTA_TIME_M = @as(c_uint, 0x00000FFF);
pub const PMCTL_DELTA_TIME_S = @as(c_uint, 0);
pub const PMCTL_WUTIME_DIGWU_W = @as(c_uint, 8);
pub const PMCTL_WUTIME_DIGWU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const PMCTL_WUTIME_DIGWU_S = @as(c_uint, 16);
pub const PMCTL_WUTIME_HFXTWU_W = @as(c_uint, 8);
pub const PMCTL_WUTIME_HFXTWU_M = @as(c_uint, 0x000000FF);
pub const PMCTL_WUTIME_HFXTWU_S = @as(c_uint, 0);
pub const PMCTL_PREPUCTL_PREPUEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_S = @as(c_uint, 31);
pub const PMCTL_PREPUCTL_PREPUEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_DIS = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_WUTIMEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_S = @as(c_uint, 30);
pub const PMCTL_PREPUCTL_WUTIMEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_DIS = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_CONS_W = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_CONS_M = @as(c_uint, 0x0000FF00);
pub const PMCTL_PREPUCTL_CONS_S = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_CONS_MAX = @as(c_uint, 0x0000FE00);
pub const PMCTL_PREPUCTL_CONS_MIN = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_NOM_W = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_NOM_M = @as(c_uint, 0x000000FF);
pub const PMCTL_PREPUCTL_NOM_S = @as(c_uint, 0);
pub const PMCTL_PREPUCTL_NOM_MAX = @as(c_uint, 0x000000FE);
pub const PMCTL_PREPUCTL_NOM_MIN = @as(c_uint, 0x00000000);
pub const PMCTL_SWSTMP_SWRDY = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_M = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_S = @as(c_uint, 0);
pub const PMCTL_SWSTMP_SWRDY_SET = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RETCFG0_VAL = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG0_VAL_M = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG0_VAL_S = @as(c_uint, 0);
pub const PMCTL_RETCFG1_VAL = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG1_VAL_M = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG1_VAL_S = @as(c_uint, 0);
pub const PMCTL_RETCFG2_VAL_W = @as(c_uint, 3);
pub const PMCTL_RETCFG2_VAL_M = @as(c_uint, 0x00000007);
pub const PMCTL_RETCFG2_VAL_S = @as(c_uint, 0);
pub const __HW_PMUD_H__ = "";
pub const PMUD_O_CTL = @as(c_uint, 0x00000000);
pub const PMUD_O_MEASCFG = @as(c_uint, 0x00000004);
pub const PMUD_O_BAT = @as(c_uint, 0x00000028);
pub const PMUD_O_BATUPD = @as(c_uint, 0x0000002C);
pub const PMUD_O_TEMP = @as(c_uint, 0x00000030);
pub const PMUD_O_TEMPUPD = @as(c_uint, 0x00000034);
pub const PMUD_O_EVENTMASK = @as(c_uint, 0x00000048);
pub const PMUD_O_EVENT = @as(c_uint, 0x0000004C);
pub const PMUD_O_BATTUL = @as(c_uint, 0x00000050);
pub const PMUD_O_BATTLL = @as(c_uint, 0x00000054);
pub const PMUD_O_TEMPUL = @as(c_uint, 0x00000058);
pub const PMUD_O_TEMPLL = @as(c_uint, 0x0000005C);
pub const PMUD_O_PREFSYS = @as(c_uint, 0x00000080);
pub const PMUD_O_PREG0 = @as(c_uint, 0x00000090);
pub const PMUD_O_PREG1 = @as(c_uint, 0x00000094);
pub const PMUD_O_PREG2 = @as(c_uint, 0x00000098);
pub const PMUD_O_DCDCCFG = @as(c_uint, 0x0000009C);
pub const PMUD_O_DCDCSTAT = @as(c_uint, 0x000000A0);
pub const PMUD_CTL_HYST_EN = @as(c_uint, 0x00000004);
pub const PMUD_CTL_HYST_EN_M = @as(c_uint, 0x00000004);
pub const PMUD_CTL_HYST_EN_S = @as(c_uint, 2);
pub const PMUD_CTL_HYST_EN_EN = @as(c_uint, 0x00000004);
pub const PMUD_CTL_HYST_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_CTL_CALC_EN = @as(c_uint, 0x00000002);
pub const PMUD_CTL_CALC_EN_M = @as(c_uint, 0x00000002);
pub const PMUD_CTL_CALC_EN_S = @as(c_uint, 1);
pub const PMUD_CTL_CALC_EN_EN = @as(c_uint, 0x00000002);
pub const PMUD_CTL_CALC_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_CTL_MEAS_EN = @as(c_uint, 0x00000001);
pub const PMUD_CTL_MEAS_EN_M = @as(c_uint, 0x00000001);
pub const PMUD_CTL_MEAS_EN_S = @as(c_uint, 0);
pub const PMUD_CTL_MEAS_EN_EN = @as(c_uint, 0x00000001);
pub const PMUD_CTL_MEAS_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_MEASCFG_PER_W = @as(c_uint, 2);
pub const PMUD_MEASCFG_PER_M = @as(c_uint, 0x00000003);
pub const PMUD_MEASCFG_PER_S = @as(c_uint, 0);
pub const PMUD_MEASCFG_PER__32CYC = @as(c_uint, 0x00000003);
pub const PMUD_MEASCFG_PER__16CYC = @as(c_uint, 0x00000002);
pub const PMUD_MEASCFG_PER__8CYC = @as(c_uint, 0x00000001);
pub const PMUD_MEASCFG_PER_CONT = @as(c_uint, 0x00000000);
pub const PMUD_BAT_INT_W = @as(c_uint, 3);
pub const PMUD_BAT_INT_M = @as(c_uint, 0x00000700);
pub const PMUD_BAT_INT_S = @as(c_uint, 8);
pub const PMUD_BAT_FRAC_W = @as(c_uint, 8);
pub const PMUD_BAT_FRAC_M = @as(c_uint, 0x000000FF);
pub const PMUD_BAT_FRAC_S = @as(c_uint, 0);
pub const PMUD_BATUPD_STA = @as(c_uint, 0x00000001);
pub const PMUD_BATUPD_STA_M = @as(c_uint, 0x00000001);
pub const PMUD_BATUPD_STA_S = @as(c_uint, 0);
pub const PMUD_BATUPD_STA_UPD = @as(c_uint, 0x00000001);
pub const PMUD_BATUPD_STA_NOUPD = @as(c_uint, 0x00000000);
pub const PMUD_TEMP_INT_W = @as(c_uint, 9);
pub const PMUD_TEMP_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0001FF00, .hex);
pub const PMUD_TEMP_INT_S = @as(c_uint, 8);
pub const PMUD_TEMP_FRAC_W = @as(c_uint, 2);
pub const PMUD_TEMP_FRAC_M = @as(c_uint, 0x000000C0);
pub const PMUD_TEMP_FRAC_S = @as(c_uint, 6);
pub const PMUD_TEMPUPD_STA = @as(c_uint, 0x00000001);
pub const PMUD_TEMPUPD_STA_M = @as(c_uint, 0x00000001);
pub const PMUD_TEMPUPD_STA_S = @as(c_uint, 0);
pub const PMUD_TEMPUPD_STA_UPD = @as(c_uint, 0x00000001);
pub const PMUD_TEMPUPD_STA_NOUPD = @as(c_uint, 0x00000000);
pub const PMUD_EVENTMASK_TEMP_UPDATE_MASK = @as(c_uint, 0x00000020);
pub const PMUD_EVENTMASK_TEMP_UPDATE_MASK_M = @as(c_uint, 0x00000020);
pub const PMUD_EVENTMASK_TEMP_UPDATE_MASK_S = @as(c_uint, 5);
pub const PMUD_EVENTMASK_BATT_UPDATE_MASK = @as(c_uint, 0x00000010);
pub const PMUD_EVENTMASK_BATT_UPDATE_MASK_M = @as(c_uint, 0x00000010);
pub const PMUD_EVENTMASK_BATT_UPDATE_MASK_S = @as(c_uint, 4);
pub const PMUD_EVENTMASK_TEMP_BELOW_LL_MASK = @as(c_uint, 0x00000008);
pub const PMUD_EVENTMASK_TEMP_BELOW_LL_MASK_M = @as(c_uint, 0x00000008);
pub const PMUD_EVENTMASK_TEMP_BELOW_LL_MASK_S = @as(c_uint, 3);
pub const PMUD_EVENTMASK_TEMP_OVER_UL_MASK = @as(c_uint, 0x00000004);
pub const PMUD_EVENTMASK_TEMP_OVER_UL_MASK_M = @as(c_uint, 0x00000004);
pub const PMUD_EVENTMASK_TEMP_OVER_UL_MASK_S = @as(c_uint, 2);
pub const PMUD_EVENTMASK_BATT_BELOW_LL_MASK = @as(c_uint, 0x00000002);
pub const PMUD_EVENTMASK_BATT_BELOW_LL_MASK_M = @as(c_uint, 0x00000002);
pub const PMUD_EVENTMASK_BATT_BELOW_LL_MASK_S = @as(c_uint, 1);
pub const PMUD_EVENTMASK_BATT_OVER_UL_MASK = @as(c_uint, 0x00000001);
pub const PMUD_EVENTMASK_BATT_OVER_UL_MASK_M = @as(c_uint, 0x00000001);
pub const PMUD_EVENTMASK_BATT_OVER_UL_MASK_S = @as(c_uint, 0);
pub const PMUD_EVENT_TEMP_UPDATE = @as(c_uint, 0x00000020);
pub const PMUD_EVENT_TEMP_UPDATE_M = @as(c_uint, 0x00000020);
pub const PMUD_EVENT_TEMP_UPDATE_S = @as(c_uint, 5);
pub const PMUD_EVENT_BATT_UPDATE = @as(c_uint, 0x00000010);
pub const PMUD_EVENT_BATT_UPDATE_M = @as(c_uint, 0x00000010);
pub const PMUD_EVENT_BATT_UPDATE_S = @as(c_uint, 4);
pub const PMUD_EVENT_TEMP_BELOW_LL = @as(c_uint, 0x00000008);
pub const PMUD_EVENT_TEMP_BELOW_LL_M = @as(c_uint, 0x00000008);
pub const PMUD_EVENT_TEMP_BELOW_LL_S = @as(c_uint, 3);
pub const PMUD_EVENT_TEMP_OVER_UL = @as(c_uint, 0x00000004);
pub const PMUD_EVENT_TEMP_OVER_UL_M = @as(c_uint, 0x00000004);
pub const PMUD_EVENT_TEMP_OVER_UL_S = @as(c_uint, 2);
pub const PMUD_EVENT_BATT_BELOW_LL = @as(c_uint, 0x00000002);
pub const PMUD_EVENT_BATT_BELOW_LL_M = @as(c_uint, 0x00000002);
pub const PMUD_EVENT_BATT_BELOW_LL_S = @as(c_uint, 1);
pub const PMUD_EVENT_BATT_OVER_UL = @as(c_uint, 0x00000001);
pub const PMUD_EVENT_BATT_OVER_UL_M = @as(c_uint, 0x00000001);
pub const PMUD_EVENT_BATT_OVER_UL_S = @as(c_uint, 0);
pub const PMUD_BATTUL_INT_W = @as(c_uint, 3);
pub const PMUD_BATTUL_INT_M = @as(c_uint, 0x00000700);
pub const PMUD_BATTUL_INT_S = @as(c_uint, 8);
pub const PMUD_BATTUL_FRAC_W = @as(c_uint, 8);
pub const PMUD_BATTUL_FRAC_M = @as(c_uint, 0x000000FF);
pub const PMUD_BATTUL_FRAC_S = @as(c_uint, 0);
pub const PMUD_BATTLL_INT_W = @as(c_uint, 3);
pub const PMUD_BATTLL_INT_M = @as(c_uint, 0x00000700);
pub const PMUD_BATTLL_INT_S = @as(c_uint, 8);
pub const PMUD_BATTLL_FRAC_W = @as(c_uint, 8);
pub const PMUD_BATTLL_FRAC_M = @as(c_uint, 0x000000FF);
pub const PMUD_BATTLL_FRAC_S = @as(c_uint, 0);
pub const PMUD_TEMPUL_INT_W = @as(c_uint, 9);
pub const PMUD_TEMPUL_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0001FF00, .hex);
pub const PMUD_TEMPUL_INT_S = @as(c_uint, 8);
pub const PMUD_TEMPUL_FRAC_W = @as(c_uint, 2);
pub const PMUD_TEMPUL_FRAC_M = @as(c_uint, 0x000000C0);
pub const PMUD_TEMPUL_FRAC_S = @as(c_uint, 6);
pub const PMUD_TEMPLL_INT_W = @as(c_uint, 9);
pub const PMUD_TEMPLL_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0001FF00, .hex);
pub const PMUD_TEMPLL_INT_S = @as(c_uint, 8);
pub const PMUD_TEMPLL_FRAC_W = @as(c_uint, 2);
pub const PMUD_TEMPLL_FRAC_M = @as(c_uint, 0x000000C0);
pub const PMUD_TEMPLL_FRAC_S = @as(c_uint, 6);
pub const PMUD_PREFSYS_SPARE_W = @as(c_uint, 5);
pub const PMUD_PREFSYS_SPARE_M = @as(c_uint, 0x0000F800);
pub const PMUD_PREFSYS_SPARE_S = @as(c_uint, 11);
pub const PMUD_PREFSYS_TEST10 = @as(c_uint, 0x00000400);
pub const PMUD_PREFSYS_TEST10_M = @as(c_uint, 0x00000400);
pub const PMUD_PREFSYS_TEST10_S = @as(c_uint, 10);
pub const PMUD_PREFSYS_TEST10_SET = @as(c_uint, 0x00000400);
pub const PMUD_PREFSYS_TEST10_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST9 = @as(c_uint, 0x00000200);
pub const PMUD_PREFSYS_TEST9_M = @as(c_uint, 0x00000200);
pub const PMUD_PREFSYS_TEST9_S = @as(c_uint, 9);
pub const PMUD_PREFSYS_TEST9_SET = @as(c_uint, 0x00000200);
pub const PMUD_PREFSYS_TEST9_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST8 = @as(c_uint, 0x00000100);
pub const PMUD_PREFSYS_TEST8_M = @as(c_uint, 0x00000100);
pub const PMUD_PREFSYS_TEST8_S = @as(c_uint, 8);
pub const PMUD_PREFSYS_TEST8_SET = @as(c_uint, 0x00000100);
pub const PMUD_PREFSYS_TEST8_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST7 = @as(c_uint, 0x00000080);
pub const PMUD_PREFSYS_TEST7_M = @as(c_uint, 0x00000080);
pub const PMUD_PREFSYS_TEST7_S = @as(c_uint, 7);
pub const PMUD_PREFSYS_TEST7_SET = @as(c_uint, 0x00000080);
pub const PMUD_PREFSYS_TEST7_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST6 = @as(c_uint, 0x00000040);
pub const PMUD_PREFSYS_TEST6_M = @as(c_uint, 0x00000040);
pub const PMUD_PREFSYS_TEST6_S = @as(c_uint, 6);
pub const PMUD_PREFSYS_TEST6_SET = @as(c_uint, 0x00000040);
pub const PMUD_PREFSYS_TEST6_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST5 = @as(c_uint, 0x00000020);
pub const PMUD_PREFSYS_TEST5_M = @as(c_uint, 0x00000020);
pub const PMUD_PREFSYS_TEST5_S = @as(c_uint, 5);
pub const PMUD_PREFSYS_TEST5_SET = @as(c_uint, 0x00000020);
pub const PMUD_PREFSYS_TEST5_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST4 = @as(c_uint, 0x00000010);
pub const PMUD_PREFSYS_TEST4_M = @as(c_uint, 0x00000010);
pub const PMUD_PREFSYS_TEST4_S = @as(c_uint, 4);
pub const PMUD_PREFSYS_TEST4_SET = @as(c_uint, 0x00000010);
pub const PMUD_PREFSYS_TEST4_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST3 = @as(c_uint, 0x00000008);
pub const PMUD_PREFSYS_TEST3_M = @as(c_uint, 0x00000008);
pub const PMUD_PREFSYS_TEST3_S = @as(c_uint, 3);
pub const PMUD_PREFSYS_TEST3_SET = @as(c_uint, 0x00000008);
pub const PMUD_PREFSYS_TEST3_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST2 = @as(c_uint, 0x00000004);
pub const PMUD_PREFSYS_TEST2_M = @as(c_uint, 0x00000004);
pub const PMUD_PREFSYS_TEST2_S = @as(c_uint, 2);
pub const PMUD_PREFSYS_TEST2_SET = @as(c_uint, 0x00000004);
pub const PMUD_PREFSYS_TEST2_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST1 = @as(c_uint, 0x00000002);
pub const PMUD_PREFSYS_TEST1_M = @as(c_uint, 0x00000002);
pub const PMUD_PREFSYS_TEST1_S = @as(c_uint, 1);
pub const PMUD_PREFSYS_TEST1_SET = @as(c_uint, 0x00000002);
pub const PMUD_PREFSYS_TEST1_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREFSYS_TEST0 = @as(c_uint, 0x00000001);
pub const PMUD_PREFSYS_TEST0_M = @as(c_uint, 0x00000001);
pub const PMUD_PREFSYS_TEST0_S = @as(c_uint, 0);
pub const PMUD_PREFSYS_TEST0_SET = @as(c_uint, 0x00000001);
pub const PMUD_PREFSYS_TEST0_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_LOW_IPEAK_DIS = @as(c_uint, 0x00000800);
pub const PMUD_PREG0_LOW_IPEAK_DIS_M = @as(c_uint, 0x00000800);
pub const PMUD_PREG0_LOW_IPEAK_DIS_S = @as(c_uint, 11);
pub const PMUD_PREG0_LOW_IPEAK_DIS_SET = @as(c_uint, 0x00000800);
pub const PMUD_PREG0_LOW_IPEAK_DIS_CLR = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_SOCLDO_ITESTEN = @as(c_uint, 0x00000400);
pub const PMUD_PREG0_SOCLDO_ITESTEN_M = @as(c_uint, 0x00000400);
pub const PMUD_PREG0_SOCLDO_ITESTEN_S = @as(c_uint, 10);
pub const PMUD_PREG0_SOCLDO_ITESTEN_EN = @as(c_uint, 0x00000400);
pub const PMUD_PREG0_SOCLDO_ITESTEN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_SOCLDO_ATBSEL_W = @as(c_uint, 3);
pub const PMUD_PREG0_SOCLDO_ATBSEL_M = @as(c_uint, 0x00000380);
pub const PMUD_PREG0_SOCLDO_ATBSEL_S = @as(c_uint, 7);
pub const PMUD_PREG0_SOCLDO_ATBSEL_VDD_AON = @as(c_uint, 0x00000200);
pub const PMUD_PREG0_SOCLDO_ATBSEL_SOCLDO_VREF_AMP_OUT = @as(c_uint, 0x00000100);
pub const PMUD_PREG0_SOCLDO_ATBSEL_SOCLDO_ITEST = @as(c_uint, 0x00000080);
pub const PMUD_PREG0_SOCLDO_ATBSEL_NC = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_W = @as(c_uint, 2);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_M = @as(c_uint, 0x00000060);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_S = @as(c_uint, 5);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_VAL3 = @as(c_uint, 0x00000060);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_VAL2 = @as(c_uint, 0x00000040);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_VAL1 = @as(c_uint, 0x00000020);
pub const PMUD_PREG0_UDIGLDO_ATBSEL_VAL0 = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_DIGLDO_ATBSEL_W = @as(c_uint, 3);
pub const PMUD_PREG0_DIGLDO_ATBSEL_M = @as(c_uint, 0x0000001C);
pub const PMUD_PREG0_DIGLDO_ATBSEL_S = @as(c_uint, 2);
pub const PMUD_PREG0_DIGLDO_ATBSEL_VAL4 = @as(c_uint, 0x00000010);
pub const PMUD_PREG0_DIGLDO_ATBSEL_VAL2 = @as(c_uint, 0x00000008);
pub const PMUD_PREG0_DIGLDO_ATBSEL_VAL1 = @as(c_uint, 0x00000004);
pub const PMUD_PREG0_DIGLDO_ATBSEL_VAL0 = @as(c_uint, 0x00000000);
pub const PMUD_PREG0_SPARE = @as(c_uint, 0x00000002);
pub const PMUD_PREG0_SPARE_M = @as(c_uint, 0x00000002);
pub const PMUD_PREG0_SPARE_S = @as(c_uint, 1);
pub const PMUD_PREG0_UDIGLDO_EN = @as(c_uint, 0x00000001);
pub const PMUD_PREG0_UDIGLDO_EN_M = @as(c_uint, 0x00000001);
pub const PMUD_PREG0_UDIGLDO_EN_S = @as(c_uint, 0);
pub const PMUD_PREG0_UDIGLDO_EN_EN = @as(c_uint, 0x00000001);
pub const PMUD_PREG0_UDIGLDO_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_TEST_DCDC_NMOS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const PMUD_PREG1_TEST_DCDC_NMOS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const PMUD_PREG1_TEST_DCDC_NMOS_S = @as(c_uint, 19);
pub const PMUD_PREG1_TEST_DCDC_NMOS_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const PMUD_PREG1_TEST_DCDC_NMOS_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_TEST_DCDC_PMOS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const PMUD_PREG1_TEST_DCDC_PMOS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const PMUD_PREG1_TEST_DCDC_PMOS_S = @as(c_uint, 18);
pub const PMUD_PREG1_TEST_DCDC_PMOS_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const PMUD_PREG1_TEST_DCDC_PMOS_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_DITHER_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMUD_PREG1_DITHER_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMUD_PREG1_DITHER_EN_S = @as(c_uint, 17);
pub const PMUD_PREG1_DITHER_EN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMUD_PREG1_DITHER_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_GLDO_AON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMUD_PREG1_GLDO_AON_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMUD_PREG1_GLDO_AON_S = @as(c_uint, 16);
pub const PMUD_PREG1_GLDO_AON_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMUD_PREG1_GLDO_AON_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_RCHG_BLK_VTRIG_EN = @as(c_uint, 0x00008000);
pub const PMUD_PREG1_RCHG_BLK_VTRIG_EN_M = @as(c_uint, 0x00008000);
pub const PMUD_PREG1_RCHG_BLK_VTRIG_EN_S = @as(c_uint, 15);
pub const PMUD_PREG1_RCHG_BLK_VTRIG_EN_EN = @as(c_uint, 0x00008000);
pub const PMUD_PREG1_RCHG_BLK_VTRIG_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_RCHG_BLK_ATEST_EN = @as(c_uint, 0x00004000);
pub const PMUD_PREG1_RCHG_BLK_ATEST_EN_M = @as(c_uint, 0x00004000);
pub const PMUD_PREG1_RCHG_BLK_ATEST_EN_S = @as(c_uint, 14);
pub const PMUD_PREG1_RCHG_BLK_ATEST_EN_EN = @as(c_uint, 0x00004000);
pub const PMUD_PREG1_RCHG_BLK_ATEST_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_RCHG_FORCE_SAMP_VREF = @as(c_uint, 0x00002000);
pub const PMUD_PREG1_RCHG_FORCE_SAMP_VREF_M = @as(c_uint, 0x00002000);
pub const PMUD_PREG1_RCHG_FORCE_SAMP_VREF_S = @as(c_uint, 13);
pub const PMUD_PREG1_RCHG_FORCE_SAMP_VREF_EN = @as(c_uint, 0x00002000);
pub const PMUD_PREG1_RCHG_FORCE_SAMP_VREF_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_RCHG_COMP_CLK_DIS = @as(c_uint, 0x00001000);
pub const PMUD_PREG1_RCHG_COMP_CLK_DIS_M = @as(c_uint, 0x00001000);
pub const PMUD_PREG1_RCHG_COMP_CLK_DIS_S = @as(c_uint, 12);
pub const PMUD_PREG1_RCHG_COMP_CLK_DIS_DIS = @as(c_uint, 0x00001000);
pub const PMUD_PREG1_RCHG_COMP_CLK_DIS_EN = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_SPARE = @as(c_uint, 0x00000080);
pub const PMUD_PREG1_SPARE_M = @as(c_uint, 0x00000080);
pub const PMUD_PREG1_SPARE_S = @as(c_uint, 7);
pub const PMUD_PREG1_VDDR_ATBSEL = @as(c_uint, 0x00000040);
pub const PMUD_PREG1_VDDR_ATBSEL_M = @as(c_uint, 0x00000040);
pub const PMUD_PREG1_VDDR_ATBSEL_S = @as(c_uint, 6);
pub const PMUD_PREG1_VDDR_ATBSEL_EN = @as(c_uint, 0x00000040);
pub const PMUD_PREG1_VDDR_ATBSEL_DIS = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_GLDO_EA_BIAS_DIS = @as(c_uint, 0x00000020);
pub const PMUD_PREG1_GLDO_EA_BIAS_DIS_M = @as(c_uint, 0x00000020);
pub const PMUD_PREG1_GLDO_EA_BIAS_DIS_S = @as(c_uint, 5);
pub const PMUD_PREG1_GLDO_EA_BIAS_DIS_OFF = @as(c_uint, 0x00000020);
pub const PMUD_PREG1_GLDO_EA_BIAS_DIS_ON = @as(c_uint, 0x00000000);
pub const PMUD_PREG1_GLDO_ATBSEL_W = @as(c_uint, 4);
pub const PMUD_PREG1_GLDO_ATBSEL_M = @as(c_uint, 0x0000001E);
pub const PMUD_PREG1_GLDO_ATBSEL_S = @as(c_uint, 1);
pub const PMUD_PREG1_GLDO_ATBSEL_VDDROK = @as(c_uint, 0x00000010);
pub const PMUD_PREG1_GLDO_ATBSEL_IB1U = @as(c_uint, 0x00000008);
pub const PMUD_PREG1_GLDO_ATBSEL_PASSGATE = @as(c_uint, 0x00000004);
pub const PMUD_PREG1_GLDO_ATBSEL_ERRAMP_OUT = @as(c_uint, 0x00000002);
pub const PMUD_PREG1_GLDO_ATBSEL_NC = @as(c_uint, 0x00000000);
pub const PMUD_PREG2_RSTNMASK = @as(c_uint, 0x00000020);
pub const PMUD_PREG2_RSTNMASK_M = @as(c_uint, 0x00000020);
pub const PMUD_PREG2_RSTNMASK_S = @as(c_uint, 5);
pub const PMUD_PREG2_RSTNMASK_BM = @as(c_uint, 0x00000020);
pub const PMUD_PREG2_RSTNMASK_BNM = @as(c_uint, 0x00000000);
pub const PMUD_PREG2_DCDC_RCHG_ATBSEL = @as(c_uint, 0x00000010);
pub const PMUD_PREG2_DCDC_RCHG_ATBSEL_M = @as(c_uint, 0x00000010);
pub const PMUD_PREG2_DCDC_RCHG_ATBSEL_S = @as(c_uint, 4);
pub const PMUD_PREG2_DCDC_RCHG_ATBSEL_RCHG_BLK = @as(c_uint, 0x00000010);
pub const PMUD_PREG2_DCDC_RCHG_ATBSEL_DCDC_GLDO = @as(c_uint, 0x00000000);
pub const PMUD_PREG2_PMUREG_ATBSEL_W = @as(c_uint, 4);
pub const PMUD_PREG2_PMUREG_ATBSEL_M = @as(c_uint, 0x0000000F);
pub const PMUD_PREG2_PMUREG_ATBSEL_S = @as(c_uint, 0);
pub const PMUD_PREG2_PMUREG_ATBSEL_DCDC_ATEST0_RCHG_ATEST1 = @as(c_uint, 0x00000008);
pub const PMUD_PREG2_PMUREG_ATBSEL_SOCLDOI_A0 = @as(c_uint, 0x00000004);
pub const PMUD_PREG2_PMUREG_ATBSEL_RESERVED = @as(c_uint, 0x00000002);
pub const PMUD_PREG2_PMUREG_ATBSEL_SOCLDOV_A1 = @as(c_uint, 0x00000001);
pub const PMUD_PREG2_PMUREG_ATBSEL_NC = @as(c_uint, 0x00000000);
pub const PMUD_DCDCCFG_LM_HIGHTH_W = @as(c_uint, 7);
pub const PMUD_DCDCCFG_LM_HIGHTH_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const PMUD_DCDCCFG_LM_HIGHTH_S = @as(c_uint, 16);
pub const PMUD_DCDCCFG_LM_LOWTH_W = @as(c_uint, 7);
pub const PMUD_DCDCCFG_LM_LOWTH_M = @as(c_uint, 0x00007F00);
pub const PMUD_DCDCCFG_LM_LOWTH_S = @as(c_uint, 8);
pub const PMUD_DCDCCFG_ADP_IPEAK_EN = @as(c_uint, 0x00000010);
pub const PMUD_DCDCCFG_ADP_IPEAK_EN_M = @as(c_uint, 0x00000010);
pub const PMUD_DCDCCFG_ADP_IPEAK_EN_S = @as(c_uint, 4);
pub const PMUD_DCDCCFG_ADP_IPEAK_EN_EN = @as(c_uint, 0x00000010);
pub const PMUD_DCDCCFG_ADP_IPEAK_EN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_DCDCCFG_LMEN = @as(c_uint, 0x00000001);
pub const PMUD_DCDCCFG_LMEN_M = @as(c_uint, 0x00000001);
pub const PMUD_DCDCCFG_LMEN_S = @as(c_uint, 0);
pub const PMUD_DCDCCFG_LMEN_EN = @as(c_uint, 0x00000001);
pub const PMUD_DCDCCFG_LMEN_DIS = @as(c_uint, 0x00000000);
pub const PMUD_DCDCSTAT_IPEAK_W = @as(c_uint, 3);
pub const PMUD_DCDCSTAT_IPEAK_M = @as(c_uint, 0x00000700);
pub const PMUD_DCDCSTAT_IPEAK_S = @as(c_uint, 8);
pub const PMUD_DCDCSTAT_LOAD_W = @as(c_uint, 7);
pub const PMUD_DCDCSTAT_LOAD_M = @as(c_uint, 0x0000007F);
pub const PMUD_DCDCSTAT_LOAD_S = @as(c_uint, 0);
pub const __HW_RTC_H__ = "";
pub const RTC_O_DESC = @as(c_uint, 0x00000000);
pub const RTC_O_CTL = @as(c_uint, 0x00000004);
pub const RTC_O_ARMSET = @as(c_uint, 0x00000008);
pub const RTC_O_ARMCLR = @as(c_uint, 0x0000000C);
pub const RTC_O_TIME8U = @as(c_uint, 0x00000018);
pub const RTC_O_TIME524M = @as(c_uint, 0x0000001C);
pub const RTC_O_CH0CC8U = @as(c_uint, 0x00000028);
pub const RTC_O_CH1CC8U = @as(c_uint, 0x00000038);
pub const RTC_O_CH1CFG = @as(c_uint, 0x0000003C);
pub const RTC_O_IMASK = @as(c_uint, 0x00000044);
pub const RTC_O_RIS = @as(c_uint, 0x00000048);
pub const RTC_O_MIS = @as(c_uint, 0x0000004C);
pub const RTC_O_ISET = @as(c_uint, 0x00000050);
pub const RTC_O_ICLR = @as(c_uint, 0x00000054);
pub const RTC_O_IMSET = @as(c_uint, 0x00000058);
pub const RTC_O_IMCLR = @as(c_uint, 0x0000005C);
pub const RTC_O_EMU = @as(c_uint, 0x00000060);
pub const RTC_O_DTB = @as(c_uint, 0x00000064);
pub const RTC_DESC_MODID_W = @as(c_uint, 16);
pub const RTC_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const RTC_DESC_MODID_S = @as(c_uint, 16);
pub const RTC_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const RTC_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const RTC_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const RTC_DESC_INSTIDX_W = @as(c_uint, 4);
pub const RTC_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const RTC_DESC_INSTIDX_S = @as(c_uint, 8);
pub const RTC_DESC_MAJREV_W = @as(c_uint, 4);
pub const RTC_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const RTC_DESC_MAJREV_S = @as(c_uint, 4);
pub const RTC_DESC_MINREV_W = @as(c_uint, 4);
pub const RTC_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const RTC_DESC_MINREV_S = @as(c_uint, 0);
pub const RTC_CTL_RST = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_M = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_S = @as(c_uint, 0);
pub const RTC_CTL_RST_CLR = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMSET_CH1 = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_M = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_S = @as(c_uint, 1);
pub const RTC_ARMSET_CH1_SET = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMSET_CH0 = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_M = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_S = @as(c_uint, 0);
pub const RTC_ARMSET_CH0_SET = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMCLR_CH1 = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_M = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_S = @as(c_uint, 1);
pub const RTC_ARMCLR_CH1_CLR = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMCLR_CH0 = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_M = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_S = @as(c_uint, 0);
pub const RTC_ARMCLR_CH0_CLR = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_TIME8U_VAL_W = @as(c_uint, 32);
pub const RTC_TIME8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_TIME8U_VAL_S = @as(c_uint, 0);
pub const RTC_TIME524M_VAL_W = @as(c_uint, 32);
pub const RTC_TIME524M_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_TIME524M_VAL_S = @as(c_uint, 0);
pub const RTC_CH0CC8U_VAL_W = @as(c_uint, 32);
pub const RTC_CH0CC8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_CH0CC8U_VAL_S = @as(c_uint, 0);
pub const RTC_CH1CC8U_VAL_W = @as(c_uint, 21);
pub const RTC_CH1CC8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001FFFFF, .hex);
pub const RTC_CH1CC8U_VAL_S = @as(c_uint, 0);
pub const RTC_CH1CFG_EDGE = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_M = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_S = @as(c_uint, 0);
pub const RTC_CH1CFG_EDGE_FALL = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_RISE = @as(c_uint, 0x00000000);
pub const RTC_IMASK_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_S = @as(c_uint, 1);
pub const RTC_IMASK_EV1_EN = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_DIS = @as(c_uint, 0x00000000);
pub const RTC_IMASK_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_S = @as(c_uint, 0);
pub const RTC_IMASK_EV0_EN = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_DIS = @as(c_uint, 0x00000000);
pub const RTC_RIS_EV1 = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_S = @as(c_uint, 1);
pub const RTC_RIS_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const RTC_RIS_EV0 = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_S = @as(c_uint, 0);
pub const RTC_RIS_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const RTC_MIS_EV1 = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_S = @as(c_uint, 1);
pub const RTC_MIS_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const RTC_MIS_EV0 = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_S = @as(c_uint, 0);
pub const RTC_MIS_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const RTC_ISET_EV1 = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_S = @as(c_uint, 1);
pub const RTC_ISET_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const RTC_ISET_EV0 = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_S = @as(c_uint, 0);
pub const RTC_ISET_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const RTC_ICLR_EV1 = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_S = @as(c_uint, 1);
pub const RTC_ICLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_ICLR_EV0 = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_S = @as(c_uint, 0);
pub const RTC_ICLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMSET_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_S = @as(c_uint, 1);
pub const RTC_IMSET_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMSET_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_S = @as(c_uint, 0);
pub const RTC_IMSET_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMCLR_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_S = @as(c_uint, 1);
pub const RTC_IMCLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMCLR_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_S = @as(c_uint, 0);
pub const RTC_IMCLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_EMU_HALT = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_M = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_S = @as(c_uint, 0);
pub const RTC_EMU_HALT_STOP = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_RUN = @as(c_uint, 0x00000000);
pub const RTC_DTB_SEL_W = @as(c_uint, 4);
pub const RTC_DTB_SEL_M = @as(c_uint, 0x0000000F);
pub const RTC_DTB_SEL_S = @as(c_uint, 0);
pub const RTC_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const __HW_SYSTICK_H__ = "";
pub const SYSTICK_O_CSR = @as(c_uint, 0x00000000);
pub const SYSTICK_O_RVR = @as(c_uint, 0x00000004);
pub const SYSTICK_O_CVR = @as(c_uint, 0x00000008);
pub const SYSTICK_O_CALIB = @as(c_uint, 0x0000000C);
pub const SYSTICK_CSR_COUNTFLAG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const SYSTICK_CSR_COUNTFLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const SYSTICK_CSR_COUNTFLAG_S = @as(c_uint, 16);
pub const SYSTICK_CSR_CLKSOURCE = @as(c_uint, 0x00000004);
pub const SYSTICK_CSR_CLKSOURCE_M = @as(c_uint, 0x00000004);
pub const SYSTICK_CSR_CLKSOURCE_S = @as(c_uint, 2);
pub const SYSTICK_CSR_TICKINT = @as(c_uint, 0x00000002);
pub const SYSTICK_CSR_TICKINT_M = @as(c_uint, 0x00000002);
pub const SYSTICK_CSR_TICKINT_S = @as(c_uint, 1);
pub const SYSTICK_CSR_ENABLE = @as(c_uint, 0x00000001);
pub const SYSTICK_CSR_ENABLE_M = @as(c_uint, 0x00000001);
pub const SYSTICK_CSR_ENABLE_S = @as(c_uint, 0);
pub const SYSTICK_RVR_RELOAD_W = @as(c_uint, 24);
pub const SYSTICK_RVR_RELOAD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_RVR_RELOAD_S = @as(c_uint, 0);
pub const SYSTICK_CVR_CURRENT_W = @as(c_uint, 24);
pub const SYSTICK_CVR_CURRENT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_CVR_CURRENT_S = @as(c_uint, 0);
pub const SYSTICK_CALIB_NOREF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const SYSTICK_CALIB_NOREF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const SYSTICK_CALIB_NOREF_S = @as(c_uint, 31);
pub const SYSTICK_CALIB_SKEW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const SYSTICK_CALIB_SKEW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const SYSTICK_CALIB_SKEW_S = @as(c_uint, 30);
pub const SYSTICK_CALIB_TENMS_W = @as(c_uint, 24);
pub const SYSTICK_CALIB_TENMS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_CALIB_TENMS_S = @as(c_uint, 0);
pub const __HW_SYSTIM_H__ = "";
pub const SYSTIM_O_DESC = @as(c_uint, 0x00000000);
pub const SYSTIM_O_IMASK = @as(c_uint, 0x00000044);
pub const SYSTIM_O_RIS = @as(c_uint, 0x00000048);
pub const SYSTIM_O_MIS = @as(c_uint, 0x0000004C);
pub const SYSTIM_O_ISET = @as(c_uint, 0x00000050);
pub const SYSTIM_O_ICLR = @as(c_uint, 0x00000054);
pub const SYSTIM_O_IMSET = @as(c_uint, 0x00000058);
pub const SYSTIM_O_IMCLR = @as(c_uint, 0x0000005C);
pub const SYSTIM_O_EMU = @as(c_uint, 0x00000060);
pub const SYSTIM_O_TIME250N = @as(c_uint, 0x00000100);
pub const SYSTIM_O_TIME1U = @as(c_uint, 0x00000104);
pub const SYSTIM_O_OUT = @as(c_uint, 0x00000108);
pub const SYSTIM_O_CH0CFG = @as(c_uint, 0x0000010C);
pub const SYSTIM_O_CH1CFG = @as(c_uint, 0x00000110);
pub const SYSTIM_O_CH2CFG = @as(c_uint, 0x00000114);
pub const SYSTIM_O_CH3CFG = @as(c_uint, 0x00000118);
pub const SYSTIM_O_CH4CFG = @as(c_uint, 0x0000011C);
pub const SYSTIM_O_CH0CC = @as(c_uint, 0x00000120);
pub const SYSTIM_O_CH1CC = @as(c_uint, 0x00000124);
pub const SYSTIM_O_CH2CC = @as(c_uint, 0x00000128);
pub const SYSTIM_O_CH3CC = @as(c_uint, 0x0000012C);
pub const SYSTIM_O_CH4CC = @as(c_uint, 0x00000130);
pub const SYSTIM_O_TIMEBIT = @as(c_uint, 0x00000134);
pub const SYSTIM_O_STATUS = @as(c_uint, 0x00000140);
pub const SYSTIM_O_ARMSET = @as(c_uint, 0x00000144);
pub const SYSTIM_O_ARMCLR = @as(c_uint, 0x00000148);
pub const SYSTIM_O_CH0CCSR = @as(c_uint, 0x0000014C);
pub const SYSTIM_O_CH1CCSR = @as(c_uint, 0x00000150);
pub const SYSTIM_O_CH2CCSR = @as(c_uint, 0x00000154);
pub const SYSTIM_O_CH3CCSR = @as(c_uint, 0x00000158);
pub const SYSTIM_O_CH4CCSR = @as(c_uint, 0x0000015C);
pub const SYSTIM_DESC_MODID_W = @as(c_uint, 16);
pub const SYSTIM_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const SYSTIM_DESC_MODID_S = @as(c_uint, 16);
pub const SYSTIM_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const SYSTIM_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const SYSTIM_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const SYSTIM_DESC_INSTIDX_W = @as(c_uint, 4);
pub const SYSTIM_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const SYSTIM_DESC_INSTIDX_S = @as(c_uint, 8);
pub const SYSTIM_DESC_MAJREV_W = @as(c_uint, 4);
pub const SYSTIM_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const SYSTIM_DESC_MAJREV_S = @as(c_uint, 4);
pub const SYSTIM_DESC_MINREV_W = @as(c_uint, 4);
pub const SYSTIM_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const SYSTIM_DESC_MINREV_S = @as(c_uint, 0);
pub const SYSTIM_IMASK_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_IMASK_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_IMASK_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_IMASK_OVFL_EN = @as(c_uint, 0x00000020);
pub const SYSTIM_IMASK_OVFL_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_IMASK_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_IMASK_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_IMASK_EV4_S = @as(c_uint, 4);
pub const SYSTIM_IMASK_EV4_EN = @as(c_uint, 0x00000010);
pub const SYSTIM_IMASK_EV4_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_IMASK_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_IMASK_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_IMASK_EV3_S = @as(c_uint, 3);
pub const SYSTIM_IMASK_EV3_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_IMASK_EV3_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_IMASK_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_IMASK_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_IMASK_EV2_S = @as(c_uint, 2);
pub const SYSTIM_IMASK_EV2_EN = @as(c_uint, 0x00000004);
pub const SYSTIM_IMASK_EV2_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_IMASK_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_IMASK_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_IMASK_EV1_S = @as(c_uint, 1);
pub const SYSTIM_IMASK_EV1_EN = @as(c_uint, 0x00000002);
pub const SYSTIM_IMASK_EV1_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_IMASK_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_IMASK_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_IMASK_EV0_S = @as(c_uint, 0);
pub const SYSTIM_IMASK_EV0_EN = @as(c_uint, 0x00000001);
pub const SYSTIM_IMASK_EV0_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_RIS_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_RIS_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_RIS_OVFL_SET = @as(c_uint, 0x00000020);
pub const SYSTIM_RIS_OVFL_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_RIS_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_RIS_EV4_S = @as(c_uint, 4);
pub const SYSTIM_RIS_EV4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_RIS_EV4_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_RIS_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_RIS_EV3_S = @as(c_uint, 3);
pub const SYSTIM_RIS_EV3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_RIS_EV3_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_RIS_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_RIS_EV2_S = @as(c_uint, 2);
pub const SYSTIM_RIS_EV2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_RIS_EV2_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_RIS_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_RIS_EV1_S = @as(c_uint, 1);
pub const SYSTIM_RIS_EV1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_RIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_RIS_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_RIS_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_RIS_EV0_S = @as(c_uint, 0);
pub const SYSTIM_RIS_EV0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_RIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_MIS_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_MIS_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_MIS_OVFL_SET = @as(c_uint, 0x00000020);
pub const SYSTIM_MIS_OVFL_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_MIS_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_MIS_EV4_S = @as(c_uint, 4);
pub const SYSTIM_MIS_EV4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_MIS_EV4_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_MIS_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_MIS_EV3_S = @as(c_uint, 3);
pub const SYSTIM_MIS_EV3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_MIS_EV3_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_MIS_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_MIS_EV2_S = @as(c_uint, 2);
pub const SYSTIM_MIS_EV2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_MIS_EV2_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_MIS_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_MIS_EV1_S = @as(c_uint, 1);
pub const SYSTIM_MIS_EV1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_MIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_MIS_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_MIS_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_MIS_EV0_S = @as(c_uint, 0);
pub const SYSTIM_MIS_EV0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_MIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_ISET_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_ISET_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_ISET_OVFL_SET = @as(c_uint, 0x00000020);
pub const SYSTIM_ISET_OVFL_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_ISET_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_ISET_EV4_S = @as(c_uint, 4);
pub const SYSTIM_ISET_EV4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_ISET_EV4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_ISET_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_ISET_EV3_S = @as(c_uint, 3);
pub const SYSTIM_ISET_EV3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_ISET_EV3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_ISET_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_ISET_EV2_S = @as(c_uint, 2);
pub const SYSTIM_ISET_EV2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_ISET_EV2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_ISET_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_ISET_EV1_S = @as(c_uint, 1);
pub const SYSTIM_ISET_EV1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_ISET_EV1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ISET_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_ISET_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_ISET_EV0_S = @as(c_uint, 0);
pub const SYSTIM_ISET_EV0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_ISET_EV0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_ICLR_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_ICLR_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_ICLR_OVFL_CLR = @as(c_uint, 0x00000020);
pub const SYSTIM_ICLR_OVFL_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_ICLR_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_ICLR_EV4_S = @as(c_uint, 4);
pub const SYSTIM_ICLR_EV4_CLR = @as(c_uint, 0x00000010);
pub const SYSTIM_ICLR_EV4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_ICLR_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_ICLR_EV3_S = @as(c_uint, 3);
pub const SYSTIM_ICLR_EV3_CLR = @as(c_uint, 0x00000008);
pub const SYSTIM_ICLR_EV3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_ICLR_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_ICLR_EV2_S = @as(c_uint, 2);
pub const SYSTIM_ICLR_EV2_CLR = @as(c_uint, 0x00000004);
pub const SYSTIM_ICLR_EV2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_ICLR_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_ICLR_EV1_S = @as(c_uint, 1);
pub const SYSTIM_ICLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const SYSTIM_ICLR_EV1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ICLR_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_ICLR_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_ICLR_EV0_S = @as(c_uint, 0);
pub const SYSTIM_ICLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const SYSTIM_ICLR_EV0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_IMSET_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_IMSET_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_IMSET_OVFL_SET = @as(c_uint, 0x00000020);
pub const SYSTIM_IMSET_OVFL_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_IMSET_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_IMSET_EV4_S = @as(c_uint, 4);
pub const SYSTIM_IMSET_EV4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_IMSET_EV4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_IMSET_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_IMSET_EV3_S = @as(c_uint, 3);
pub const SYSTIM_IMSET_EV3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_IMSET_EV3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_IMSET_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_IMSET_EV2_S = @as(c_uint, 2);
pub const SYSTIM_IMSET_EV2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_IMSET_EV2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_IMSET_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_IMSET_EV1_S = @as(c_uint, 1);
pub const SYSTIM_IMSET_EV1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_IMSET_EV1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMSET_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_IMSET_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_IMSET_EV0_S = @as(c_uint, 0);
pub const SYSTIM_IMSET_EV0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_IMSET_EV0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_OVFL = @as(c_uint, 0x00000020);
pub const SYSTIM_IMCLR_OVFL_M = @as(c_uint, 0x00000020);
pub const SYSTIM_IMCLR_OVFL_S = @as(c_uint, 5);
pub const SYSTIM_IMCLR_OVFL_CLR = @as(c_uint, 0x00000020);
pub const SYSTIM_IMCLR_OVFL_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_EV4 = @as(c_uint, 0x00000010);
pub const SYSTIM_IMCLR_EV4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_IMCLR_EV4_S = @as(c_uint, 4);
pub const SYSTIM_IMCLR_EV4_CLR = @as(c_uint, 0x00000010);
pub const SYSTIM_IMCLR_EV4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_EV3 = @as(c_uint, 0x00000008);
pub const SYSTIM_IMCLR_EV3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_IMCLR_EV3_S = @as(c_uint, 3);
pub const SYSTIM_IMCLR_EV3_CLR = @as(c_uint, 0x00000008);
pub const SYSTIM_IMCLR_EV3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_EV2 = @as(c_uint, 0x00000004);
pub const SYSTIM_IMCLR_EV2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_IMCLR_EV2_S = @as(c_uint, 2);
pub const SYSTIM_IMCLR_EV2_CLR = @as(c_uint, 0x00000004);
pub const SYSTIM_IMCLR_EV2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_EV1 = @as(c_uint, 0x00000002);
pub const SYSTIM_IMCLR_EV1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_IMCLR_EV1_S = @as(c_uint, 1);
pub const SYSTIM_IMCLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const SYSTIM_IMCLR_EV1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_IMCLR_EV0 = @as(c_uint, 0x00000001);
pub const SYSTIM_IMCLR_EV0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_IMCLR_EV0_S = @as(c_uint, 0);
pub const SYSTIM_IMCLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const SYSTIM_IMCLR_EV0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_EMU_HALT = @as(c_uint, 0x00000001);
pub const SYSTIM_EMU_HALT_M = @as(c_uint, 0x00000001);
pub const SYSTIM_EMU_HALT_S = @as(c_uint, 0);
pub const SYSTIM_EMU_HALT_STOP = @as(c_uint, 0x00000001);
pub const SYSTIM_EMU_HALT_RUN = @as(c_uint, 0x00000000);
pub const SYSTIM_TIME250N_VAL_W = @as(c_uint, 32);
pub const SYSTIM_TIME250N_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_TIME250N_VAL_S = @as(c_uint, 0);
pub const SYSTIM_TIME1U_VAL_W = @as(c_uint, 32);
pub const SYSTIM_TIME1U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_TIME1U_VAL_S = @as(c_uint, 0);
pub const SYSTIM_OUT_OUT4 = @as(c_uint, 0x00000010);
pub const SYSTIM_OUT_OUT4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_OUT_OUT4_S = @as(c_uint, 4);
pub const SYSTIM_OUT_OUT4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_OUT_OUT4_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_OUT_OUT3 = @as(c_uint, 0x00000008);
pub const SYSTIM_OUT_OUT3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_OUT_OUT3_S = @as(c_uint, 3);
pub const SYSTIM_OUT_OUT3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_OUT_OUT3_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_OUT_OUT2 = @as(c_uint, 0x00000004);
pub const SYSTIM_OUT_OUT2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_OUT_OUT2_S = @as(c_uint, 2);
pub const SYSTIM_OUT_OUT2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_OUT_OUT2_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_OUT_OUT1 = @as(c_uint, 0x00000002);
pub const SYSTIM_OUT_OUT1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_OUT_OUT1_S = @as(c_uint, 1);
pub const SYSTIM_OUT_OUT1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_OUT_OUT1_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_OUT_OUT0 = @as(c_uint, 0x00000001);
pub const SYSTIM_OUT_OUT0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_OUT_OUT0_S = @as(c_uint, 0);
pub const SYSTIM_OUT_OUT0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_OUT_OUT0_CLR = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CFG_RES = @as(c_uint, 0x00000010);
pub const SYSTIM_CH0CFG_RES_M = @as(c_uint, 0x00000010);
pub const SYSTIM_CH0CFG_RES_S = @as(c_uint, 4);
pub const SYSTIM_CH0CFG_RES_NS = @as(c_uint, 0x00000010);
pub const SYSTIM_CH0CFG_RES_US = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CFG_REARM = @as(c_uint, 0x00000008);
pub const SYSTIM_CH0CFG_REARM_M = @as(c_uint, 0x00000008);
pub const SYSTIM_CH0CFG_REARM_S = @as(c_uint, 3);
pub const SYSTIM_CH0CFG_REARM_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_CH0CFG_REARM_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CFG_INP_W = @as(c_uint, 2);
pub const SYSTIM_CH0CFG_INP_M = @as(c_uint, 0x00000006);
pub const SYSTIM_CH0CFG_INP_S = @as(c_uint, 1);
pub const SYSTIM_CH0CFG_INP_BOTH = @as(c_uint, 0x00000004);
pub const SYSTIM_CH0CFG_INP_FALL = @as(c_uint, 0x00000002);
pub const SYSTIM_CH0CFG_INP_RISE = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CFG_MODE = @as(c_uint, 0x00000001);
pub const SYSTIM_CH0CFG_MODE_M = @as(c_uint, 0x00000001);
pub const SYSTIM_CH0CFG_MODE_S = @as(c_uint, 0);
pub const SYSTIM_CH0CFG_MODE_CAPT = @as(c_uint, 0x00000001);
pub const SYSTIM_CH0CFG_MODE_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH1CFG_REARM = @as(c_uint, 0x00000008);
pub const SYSTIM_CH1CFG_REARM_M = @as(c_uint, 0x00000008);
pub const SYSTIM_CH1CFG_REARM_S = @as(c_uint, 3);
pub const SYSTIM_CH1CFG_REARM_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_CH1CFG_REARM_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH1CFG_INP_W = @as(c_uint, 2);
pub const SYSTIM_CH1CFG_INP_M = @as(c_uint, 0x00000006);
pub const SYSTIM_CH1CFG_INP_S = @as(c_uint, 1);
pub const SYSTIM_CH1CFG_INP_BOTH = @as(c_uint, 0x00000004);
pub const SYSTIM_CH1CFG_INP_FALL = @as(c_uint, 0x00000002);
pub const SYSTIM_CH1CFG_INP_RISE = @as(c_uint, 0x00000000);
pub const SYSTIM_CH1CFG_MODE = @as(c_uint, 0x00000001);
pub const SYSTIM_CH1CFG_MODE_M = @as(c_uint, 0x00000001);
pub const SYSTIM_CH1CFG_MODE_S = @as(c_uint, 0);
pub const SYSTIM_CH1CFG_MODE_CAPT = @as(c_uint, 0x00000001);
pub const SYSTIM_CH1CFG_MODE_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH2CFG_REARM = @as(c_uint, 0x00000008);
pub const SYSTIM_CH2CFG_REARM_M = @as(c_uint, 0x00000008);
pub const SYSTIM_CH2CFG_REARM_S = @as(c_uint, 3);
pub const SYSTIM_CH2CFG_REARM_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_CH2CFG_REARM_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH2CFG_INP_W = @as(c_uint, 2);
pub const SYSTIM_CH2CFG_INP_M = @as(c_uint, 0x00000006);
pub const SYSTIM_CH2CFG_INP_S = @as(c_uint, 1);
pub const SYSTIM_CH2CFG_INP_BOTH = @as(c_uint, 0x00000004);
pub const SYSTIM_CH2CFG_INP_FALL = @as(c_uint, 0x00000002);
pub const SYSTIM_CH2CFG_INP_RISE = @as(c_uint, 0x00000000);
pub const SYSTIM_CH2CFG_MODE = @as(c_uint, 0x00000001);
pub const SYSTIM_CH2CFG_MODE_M = @as(c_uint, 0x00000001);
pub const SYSTIM_CH2CFG_MODE_S = @as(c_uint, 0);
pub const SYSTIM_CH2CFG_MODE_CAPT = @as(c_uint, 0x00000001);
pub const SYSTIM_CH2CFG_MODE_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH3CFG_REARM = @as(c_uint, 0x00000008);
pub const SYSTIM_CH3CFG_REARM_M = @as(c_uint, 0x00000008);
pub const SYSTIM_CH3CFG_REARM_S = @as(c_uint, 3);
pub const SYSTIM_CH3CFG_REARM_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_CH3CFG_REARM_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH3CFG_INP_W = @as(c_uint, 2);
pub const SYSTIM_CH3CFG_INP_M = @as(c_uint, 0x00000006);
pub const SYSTIM_CH3CFG_INP_S = @as(c_uint, 1);
pub const SYSTIM_CH3CFG_INP_BOTH = @as(c_uint, 0x00000004);
pub const SYSTIM_CH3CFG_INP_FALL = @as(c_uint, 0x00000002);
pub const SYSTIM_CH3CFG_INP_RISE = @as(c_uint, 0x00000000);
pub const SYSTIM_CH3CFG_MODE = @as(c_uint, 0x00000001);
pub const SYSTIM_CH3CFG_MODE_M = @as(c_uint, 0x00000001);
pub const SYSTIM_CH3CFG_MODE_S = @as(c_uint, 0);
pub const SYSTIM_CH3CFG_MODE_CAPT = @as(c_uint, 0x00000001);
pub const SYSTIM_CH3CFG_MODE_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH4CFG_REARM = @as(c_uint, 0x00000008);
pub const SYSTIM_CH4CFG_REARM_M = @as(c_uint, 0x00000008);
pub const SYSTIM_CH4CFG_REARM_S = @as(c_uint, 3);
pub const SYSTIM_CH4CFG_REARM_EN = @as(c_uint, 0x00000008);
pub const SYSTIM_CH4CFG_REARM_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH4CFG_INP_W = @as(c_uint, 2);
pub const SYSTIM_CH4CFG_INP_M = @as(c_uint, 0x00000006);
pub const SYSTIM_CH4CFG_INP_S = @as(c_uint, 1);
pub const SYSTIM_CH4CFG_INP_BOTH = @as(c_uint, 0x00000004);
pub const SYSTIM_CH4CFG_INP_FALL = @as(c_uint, 0x00000002);
pub const SYSTIM_CH4CFG_INP_RISE = @as(c_uint, 0x00000000);
pub const SYSTIM_CH4CFG_MODE = @as(c_uint, 0x00000001);
pub const SYSTIM_CH4CFG_MODE_M = @as(c_uint, 0x00000001);
pub const SYSTIM_CH4CFG_MODE_S = @as(c_uint, 0);
pub const SYSTIM_CH4CFG_MODE_CAPT = @as(c_uint, 0x00000001);
pub const SYSTIM_CH4CFG_MODE_DIS = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CC_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH0CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH0CC_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH1CC_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH1CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH1CC_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH2CC_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH2CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH2CC_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH3CC_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH3CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH3CC_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH4CC_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH4CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH4CC_VAL_S = @as(c_uint, 0);
pub const SYSTIM_TIMEBIT_VAL_W = @as(c_uint, 16);
pub const SYSTIM_TIMEBIT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const SYSTIM_TIMEBIT_VAL_S = @as(c_uint, 0);
pub const SYSTIM_TIMEBIT_VAL_BIT17 = @as(c_uint, 0x00008000);
pub const SYSTIM_TIMEBIT_VAL_BIT16 = @as(c_uint, 0x00004000);
pub const SYSTIM_TIMEBIT_VAL_BIT15 = @as(c_uint, 0x00002000);
pub const SYSTIM_TIMEBIT_VAL_BIT14 = @as(c_uint, 0x00001000);
pub const SYSTIM_TIMEBIT_VAL_BIT13 = @as(c_uint, 0x00000800);
pub const SYSTIM_TIMEBIT_VAL_BIT12 = @as(c_uint, 0x00000400);
pub const SYSTIM_TIMEBIT_VAL_BIT11 = @as(c_uint, 0x00000200);
pub const SYSTIM_TIMEBIT_VAL_BIT10 = @as(c_uint, 0x00000100);
pub const SYSTIM_TIMEBIT_VAL_BIT9 = @as(c_uint, 0x00000080);
pub const SYSTIM_TIMEBIT_VAL_BIT8 = @as(c_uint, 0x00000040);
pub const SYSTIM_TIMEBIT_VAL_BIT7 = @as(c_uint, 0x00000020);
pub const SYSTIM_TIMEBIT_VAL_BIT6 = @as(c_uint, 0x00000010);
pub const SYSTIM_TIMEBIT_VAL_BIT5 = @as(c_uint, 0x00000008);
pub const SYSTIM_TIMEBIT_VAL_BIT4 = @as(c_uint, 0x00000004);
pub const SYSTIM_TIMEBIT_VAL_BIT3 = @as(c_uint, 0x00000002);
pub const SYSTIM_TIMEBIT_VAL_BIT2 = @as(c_uint, 0x00000001);
pub const SYSTIM_TIMEBIT_VAL_NOBIT = @as(c_uint, 0x00000000);
pub const SYSTIM_STATUS_SYNCUP = @as(c_uint, 0x00000010);
pub const SYSTIM_STATUS_SYNCUP_M = @as(c_uint, 0x00000010);
pub const SYSTIM_STATUS_SYNCUP_S = @as(c_uint, 4);
pub const SYSTIM_STATUS_VAL = @as(c_uint, 0x00000001);
pub const SYSTIM_STATUS_VAL_M = @as(c_uint, 0x00000001);
pub const SYSTIM_STATUS_VAL_S = @as(c_uint, 0);
pub const SYSTIM_STATUS_VAL_RUN = @as(c_uint, 0x00000001);
pub const SYSTIM_STATUS_VAL_STOP = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMSET_CH4 = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMSET_CH4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMSET_CH4_S = @as(c_uint, 4);
pub const SYSTIM_ARMSET_CH4_SET = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMSET_CH4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMSET_CH3 = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMSET_CH3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMSET_CH3_S = @as(c_uint, 3);
pub const SYSTIM_ARMSET_CH3_SET = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMSET_CH3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMSET_CH2 = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMSET_CH2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMSET_CH2_S = @as(c_uint, 2);
pub const SYSTIM_ARMSET_CH2_SET = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMSET_CH2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMSET_CH1 = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMSET_CH1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMSET_CH1_S = @as(c_uint, 1);
pub const SYSTIM_ARMSET_CH1_SET = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMSET_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMSET_CH0 = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMSET_CH0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMSET_CH0_S = @as(c_uint, 0);
pub const SYSTIM_ARMSET_CH0_SET = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMSET_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMCLR_CH4 = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMCLR_CH4_M = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMCLR_CH4_S = @as(c_uint, 4);
pub const SYSTIM_ARMCLR_CH4_CLR = @as(c_uint, 0x00000010);
pub const SYSTIM_ARMCLR_CH4_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMCLR_CH3 = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMCLR_CH3_M = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMCLR_CH3_S = @as(c_uint, 3);
pub const SYSTIM_ARMCLR_CH3_CLR = @as(c_uint, 0x00000008);
pub const SYSTIM_ARMCLR_CH3_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMCLR_CH2 = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMCLR_CH2_M = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMCLR_CH2_S = @as(c_uint, 2);
pub const SYSTIM_ARMCLR_CH2_CLR = @as(c_uint, 0x00000004);
pub const SYSTIM_ARMCLR_CH2_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMCLR_CH1 = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMCLR_CH1_M = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMCLR_CH1_S = @as(c_uint, 1);
pub const SYSTIM_ARMCLR_CH1_CLR = @as(c_uint, 0x00000002);
pub const SYSTIM_ARMCLR_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_ARMCLR_CH0 = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMCLR_CH0_M = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMCLR_CH0_S = @as(c_uint, 0);
pub const SYSTIM_ARMCLR_CH0_CLR = @as(c_uint, 0x00000001);
pub const SYSTIM_ARMCLR_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const SYSTIM_CH0CCSR_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH0CCSR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH0CCSR_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH1CCSR_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH1CCSR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH1CCSR_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH2CCSR_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH2CCSR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH2CCSR_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH3CCSR_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH3CCSR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH3CCSR_VAL_S = @as(c_uint, 0);
pub const SYSTIM_CH4CCSR_VAL_W = @as(c_uint, 32);
pub const SYSTIM_CH4CCSR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const SYSTIM_CH4CCSR_VAL_S = @as(c_uint, 0);
pub const __HW_TYPES_H__ = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const HWREG = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:79:9
pub const HWREGH = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:85:9
pub const HWREGB = @compileError("unable to translate C expr: unexpected token 'volatile'");
// ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:91:9
pub const __HW_UART_H__ = "";
pub const UART_O_DR = @as(c_uint, 0x00000000);
pub const UART_O_RSR_ECR = @as(c_uint, 0x00000004);
pub const UART_O_FR = @as(c_uint, 0x00000018);
pub const UART_O_UARTILPR = @as(c_uint, 0x00000020);
pub const UART_O_IBRD = @as(c_uint, 0x00000024);
pub const UART_O_FBRD = @as(c_uint, 0x00000028);
pub const UART_O_LCRH = @as(c_uint, 0x0000002C);
pub const UART_O_CTL = @as(c_uint, 0x00000030);
pub const UART_O_IFLS = @as(c_uint, 0x00000034);
pub const UART_O_IMSC = @as(c_uint, 0x00000038);
pub const UART_O_RIS = @as(c_uint, 0x0000003C);
pub const UART_O_MIS = @as(c_uint, 0x00000040);
pub const UART_O_ICR = @as(c_uint, 0x00000044);
pub const UART_O_DMACTL = @as(c_uint, 0x00000048);
pub const UART_DR_OE = @as(c_uint, 0x00000800);
pub const UART_DR_OE_M = @as(c_uint, 0x00000800);
pub const UART_DR_OE_S = @as(c_uint, 11);
pub const UART_DR_BE = @as(c_uint, 0x00000400);
pub const UART_DR_BE_M = @as(c_uint, 0x00000400);
pub const UART_DR_BE_S = @as(c_uint, 10);
pub const UART_DR_PE = @as(c_uint, 0x00000200);
pub const UART_DR_PE_M = @as(c_uint, 0x00000200);
pub const UART_DR_PE_S = @as(c_uint, 9);
pub const UART_DR_FE = @as(c_uint, 0x00000100);
pub const UART_DR_FE_M = @as(c_uint, 0x00000100);
pub const UART_DR_FE_S = @as(c_uint, 8);
pub const UART_DR_DATA_W = @as(c_uint, 8);
pub const UART_DR_DATA_M = @as(c_uint, 0x000000FF);
pub const UART_DR_DATA_S = @as(c_uint, 0);
pub const UART_RSR_ECR_OE = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_M = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_S = @as(c_uint, 3);
pub const UART_RSR_ECR_OE_CLEAR_ERROR_1 = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_BE = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_M = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_S = @as(c_uint, 2);
pub const UART_RSR_ECR_BE_CLEAR_ERROR_1 = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_PE = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_M = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_S = @as(c_uint, 1);
pub const UART_RSR_ECR_PE_CLEAR_ERROR_1 = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_FE = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_M = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_S = @as(c_uint, 0);
pub const UART_RSR_ECR_FE_CLEAR_ERROR_1 = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_FR_TXFE = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_M = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_S = @as(c_uint, 7);
pub const UART_FR_RXFF = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_M = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_S = @as(c_uint, 6);
pub const UART_FR_TXFF = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_M = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_S = @as(c_uint, 5);
pub const UART_FR_RXFE = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_M = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_S = @as(c_uint, 4);
pub const UART_FR_BUSY = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_M = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_S = @as(c_uint, 3);
pub const UART_FR_CTS = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_M = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_S = @as(c_uint, 0);
pub const UART_UARTILPR_ILPDVSR_W = @as(c_uint, 8);
pub const UART_UARTILPR_ILPDVSR_M = @as(c_uint, 0x000000FF);
pub const UART_UARTILPR_ILPDVSR_S = @as(c_uint, 0);
pub const UART_IBRD_DIVINT_W = @as(c_uint, 16);
pub const UART_IBRD_DIVINT_M = @as(c_uint, 0x0000FFFF);
pub const UART_IBRD_DIVINT_S = @as(c_uint, 0);
pub const UART_FBRD_DIVFRAC_W = @as(c_uint, 6);
pub const UART_FBRD_DIVFRAC_M = @as(c_uint, 0x0000003F);
pub const UART_FBRD_DIVFRAC_S = @as(c_uint, 0);
pub const UART_LCRH_SPS = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_M = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_S = @as(c_uint, 7);
pub const UART_LCRH_WLEN_W = @as(c_uint, 2);
pub const UART_LCRH_WLEN_M = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_S = @as(c_uint, 5);
pub const UART_LCRH_WLEN_BITL8 = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_BITL7 = @as(c_uint, 0x00000040);
pub const UART_LCRH_WLEN_BITL6 = @as(c_uint, 0x00000020);
pub const UART_LCRH_WLEN_BITL5 = @as(c_uint, 0x00000000);
pub const UART_LCRH_FEN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_M = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_S = @as(c_uint, 4);
pub const UART_LCRH_FEN_EN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_STP2 = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_M = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_S = @as(c_uint, 3);
pub const UART_LCRH_EPS = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_M = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_S = @as(c_uint, 2);
pub const UART_LCRH_EPS_EVEN = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_ODD = @as(c_uint, 0x00000000);
pub const UART_LCRH_PEN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_M = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_S = @as(c_uint, 1);
pub const UART_LCRH_PEN_EN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_BRK = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_M = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_S = @as(c_uint, 0);
pub const UART_CTL_CTSEN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_M = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_S = @as(c_uint, 15);
pub const UART_CTL_CTSEN_EN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTSEN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_M = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_S = @as(c_uint, 14);
pub const UART_CTL_RTSEN_EN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTS = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_M = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_S = @as(c_uint, 11);
pub const UART_CTL_RXE = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_M = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_S = @as(c_uint, 9);
pub const UART_CTL_RXE_EN = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_TXE = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_M = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_S = @as(c_uint, 8);
pub const UART_CTL_TXE_EN = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_LBE = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_M = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_S = @as(c_uint, 7);
pub const UART_CTL_LBE_EN = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_FCEN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_M = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_S = @as(c_uint, 6);
pub const UART_CTL_FCEN_EN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIRLP = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_M = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_S = @as(c_uint, 2);
pub const UART_CTL_SIRLP_EN = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIREN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_M = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_S = @as(c_uint, 1);
pub const UART_CTL_SIREN_EN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_UARTEN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_M = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_S = @as(c_uint, 0);
pub const UART_CTL_UARTEN_EN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_DIS = @as(c_uint, 0x00000000);
pub const UART_IFLS_RXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_M = @as(c_uint, 0x00000038);
pub const UART_IFLS_RXSEL_S = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_THREEQU = @as(c_uint, 0x00000018);
pub const UART_IFLS_RXSEL_HALF = @as(c_uint, 0x00000010);
pub const UART_IFLS_RXSEL_QUARTER = @as(c_uint, 0x00000008);
pub const UART_IFLS_TXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_TXSEL_M = @as(c_uint, 0x00000007);
pub const UART_IFLS_TXSEL_S = @as(c_uint, 0);
pub const UART_IFLS_TXSEL_THREEQU = @as(c_uint, 0x00000003);
pub const UART_IFLS_TXSEL_HALF = @as(c_uint, 0x00000002);
pub const UART_IFLS_TXSEL_QUARTER = @as(c_uint, 0x00000001);
pub const UART_IMSC_RXDMADONEIM = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_M = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_S = @as(c_uint, 13);
pub const UART_IMSC_TXDMADONEIM = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_M = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_S = @as(c_uint, 12);
pub const UART_IMSC_EOTIM = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_M = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_S = @as(c_uint, 11);
pub const UART_IMSC_OEIM = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_M = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_S = @as(c_uint, 10);
pub const UART_IMSC_BEIM = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_M = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_S = @as(c_uint, 9);
pub const UART_IMSC_PEIM = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_M = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_S = @as(c_uint, 8);
pub const UART_IMSC_FEIM = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_M = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_S = @as(c_uint, 7);
pub const UART_IMSC_RTIM = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_M = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_S = @as(c_uint, 6);
pub const UART_IMSC_TXIM = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_M = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_S = @as(c_uint, 5);
pub const UART_IMSC_RXIM = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_M = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_S = @as(c_uint, 4);
pub const UART_IMSC_CTSMIM = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_M = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_S = @as(c_uint, 1);
pub const UART_RIS_RXDMADONERIS = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_M = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_S = @as(c_uint, 13);
pub const UART_RIS_TXDMADONERIS = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_M = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_S = @as(c_uint, 12);
pub const UART_RIS_EOTRIS = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_M = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_S = @as(c_uint, 11);
pub const UART_RIS_OERIS = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_M = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_S = @as(c_uint, 10);
pub const UART_RIS_BERIS = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_M = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_S = @as(c_uint, 9);
pub const UART_RIS_PERIS = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_M = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_S = @as(c_uint, 8);
pub const UART_RIS_FERIS = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_M = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_S = @as(c_uint, 7);
pub const UART_RIS_RTRIS = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_M = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_S = @as(c_uint, 6);
pub const UART_RIS_TXRIS = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_M = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_S = @as(c_uint, 5);
pub const UART_RIS_RXRIS = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_M = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_S = @as(c_uint, 4);
pub const UART_RIS_CTSRMIS = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_M = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_S = @as(c_uint, 1);
pub const UART_MIS_RXDMADONE = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_M = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_S = @as(c_uint, 13);
pub const UART_MIS_TXDMADONEMIS = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_M = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_S = @as(c_uint, 12);
pub const UART_MIS_EOTMIS = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_M = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_S = @as(c_uint, 11);
pub const UART_MIS_OEMIS = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_M = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_S = @as(c_uint, 10);
pub const UART_MIS_BEMIS = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_M = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_S = @as(c_uint, 9);
pub const UART_MIS_PEMIS = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_M = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_S = @as(c_uint, 8);
pub const UART_MIS_FEMIS = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_M = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_S = @as(c_uint, 7);
pub const UART_MIS_RTMIS = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_M = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_S = @as(c_uint, 6);
pub const UART_MIS_TXMIS = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_M = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_S = @as(c_uint, 5);
pub const UART_MIS_RXMIS = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_M = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_S = @as(c_uint, 4);
pub const UART_MIS_CTSMMIS = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_M = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_S = @as(c_uint, 1);
pub const UART_ICR_RXDMADONEIC = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_M = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_S = @as(c_uint, 13);
pub const UART_ICR_TXDMADONEIC = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_M = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_S = @as(c_uint, 12);
pub const UART_ICR_EOTIC = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_M = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_S = @as(c_uint, 11);
pub const UART_ICR_OEIC = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_M = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_S = @as(c_uint, 10);
pub const UART_ICR_BEIC = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_M = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_S = @as(c_uint, 9);
pub const UART_ICR_PEIC = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_M = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_S = @as(c_uint, 8);
pub const UART_ICR_FEIC = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_M = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_S = @as(c_uint, 7);
pub const UART_ICR_RTIC = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_M = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_S = @as(c_uint, 6);
pub const UART_ICR_TXIC = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_M = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_S = @as(c_uint, 5);
pub const UART_ICR_RXIC = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_M = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_S = @as(c_uint, 4);
pub const UART_ICR_CTSMIC = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_M = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_S = @as(c_uint, 1);
pub const UART_DMACTL_DMAONERR = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_M = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_S = @as(c_uint, 2);
pub const UART_DMACTL_TXDMAE = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_M = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_S = @as(c_uint, 1);
pub const UART_DMACTL_RXDMAE = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_M = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_S = @as(c_uint, 0);
pub const __HW_VIMS_H__ = "";
pub const VIMS_O_DESC = @as(c_uint, 0x00000000);
pub const VIMS_O_DESCEX = @as(c_uint, 0x00000004);
pub const VIMS_O_FLWS1T = @as(c_uint, 0x00000008);
pub const VIMS_O_FLWS2T = @as(c_uint, 0x0000000C);
pub const VIMS_O_PTRMC0 = @as(c_uint, 0x00000018);
pub const VIMS_O_B0TRMC1 = @as(c_uint, 0x0000001C);
pub const VIMS_O_B0TRMC0 = @as(c_uint, 0x00000020);
pub const VIMS_O_FLBLCK = @as(c_uint, 0x00000100);
pub const VIMS_O_CFG = @as(c_uint, 0x000003FC);
pub const VIMS_O_RDPRMN = @as(c_uint, 0x00000400);
pub const VIMS_O_RDPRNMN = @as(c_uint, 0x00000404);
pub const VIMS_O_RDPRTRM = @as(c_uint, 0x00000408);
pub const VIMS_O_RDPREGR = @as(c_uint, 0x0000040C);
pub const VIMS_O_WEPRA = @as(c_uint, 0x00000410);
pub const VIMS_O_WEPRB = @as(c_uint, 0x00000414);
pub const VIMS_O_WEPRAUX = @as(c_uint, 0x0000041C);
pub const VIMS_O_FLBSTAT = @as(c_uint, 0x00000420);
pub const VIMS_O_CCHCTRL = @as(c_uint, 0x00000424);
pub const VIMS_O_DTB = @as(c_uint, 0x00000800);
pub const VIMS_DESC_MODID_W = @as(c_uint, 16);
pub const VIMS_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const VIMS_DESC_MODID_S = @as(c_uint, 16);
pub const VIMS_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const VIMS_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const VIMS_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const VIMS_DESC_INSTIDX_W = @as(c_uint, 4);
pub const VIMS_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const VIMS_DESC_INSTIDX_S = @as(c_uint, 8);
pub const VIMS_DESC_MAJREV_W = @as(c_uint, 4);
pub const VIMS_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const VIMS_DESC_MAJREV_S = @as(c_uint, 4);
pub const VIMS_DESC_MINREV_W = @as(c_uint, 4);
pub const VIMS_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const VIMS_DESC_MINREV_S = @as(c_uint, 0);
pub const VIMS_DESCEX_NBANK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const VIMS_DESCEX_NBANK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const VIMS_DESCEX_NBANK_S = @as(c_uint, 27);
pub const VIMS_DESCEX_FLSZ_W = @as(c_uint, 12);
pub const VIMS_DESCEX_FLSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07FF8000, .hex);
pub const VIMS_DESCEX_FLSZ_S = @as(c_uint, 15);
pub const VIMS_DESCEX_ROMSZ_W = @as(c_uint, 15);
pub const VIMS_DESCEX_ROMSZ_M = @as(c_uint, 0x00007FFF);
pub const VIMS_DESCEX_ROMSZ_S = @as(c_uint, 0);
pub const VIMS_FLWS1T_VAL_W = @as(c_uint, 3);
pub const VIMS_FLWS1T_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_FLWS1T_VAL_S = @as(c_uint, 0);
pub const VIMS_FLWS1T_VAL_WS7 = @as(c_uint, 0x00000007);
pub const VIMS_FLWS1T_VAL_WS6 = @as(c_uint, 0x00000006);
pub const VIMS_FLWS1T_VAL_WS5 = @as(c_uint, 0x00000005);
pub const VIMS_FLWS1T_VAL_WS4 = @as(c_uint, 0x00000004);
pub const VIMS_FLWS1T_VAL_WS3 = @as(c_uint, 0x00000003);
pub const VIMS_FLWS1T_VAL_WS2 = @as(c_uint, 0x00000002);
pub const VIMS_FLWS1T_VAL_WS1 = @as(c_uint, 0x00000001);
pub const VIMS_FLWS1T_VAL_WS0 = @as(c_uint, 0x00000000);
pub const VIMS_FLWS2T_VAL_W = @as(c_uint, 3);
pub const VIMS_FLWS2T_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_FLWS2T_VAL_S = @as(c_uint, 0);
pub const VIMS_FLWS2T_VAL_WS7 = @as(c_uint, 0x00000007);
pub const VIMS_FLWS2T_VAL_WS6 = @as(c_uint, 0x00000006);
pub const VIMS_FLWS2T_VAL_WS5 = @as(c_uint, 0x00000005);
pub const VIMS_FLWS2T_VAL_WS4 = @as(c_uint, 0x00000004);
pub const VIMS_FLWS2T_VAL_WS3 = @as(c_uint, 0x00000003);
pub const VIMS_FLWS2T_VAL_WS2 = @as(c_uint, 0x00000002);
pub const VIMS_FLWS2T_VAL_WS1 = @as(c_uint, 0x00000001);
pub const VIMS_FLWS2T_VAL_WS0 = @as(c_uint, 0x00000000);
pub const VIMS_PTRMC0_VAL_W = @as(c_uint, 32);
pub const VIMS_PTRMC0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_PTRMC0_VAL_S = @as(c_uint, 0);
pub const VIMS_B0TRMC1_VAL_W = @as(c_uint, 32);
pub const VIMS_B0TRMC1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_B0TRMC1_VAL_S = @as(c_uint, 0);
pub const VIMS_B0TRMC0_VAL_W = @as(c_uint, 32);
pub const VIMS_B0TRMC0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_B0TRMC0_VAL_S = @as(c_uint, 0);
pub const VIMS_FLBLCK_VAL = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_M = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_S = @as(c_uint, 0);
pub const VIMS_FLBLCK_VAL_BLOCK = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_ALLOW = @as(c_uint, 0x00000000);
pub const VIMS_CFG_TRMVLID = @as(c_uint, 0x00000002);
pub const VIMS_CFG_TRMVLID_M = @as(c_uint, 0x00000002);
pub const VIMS_CFG_TRMVLID_S = @as(c_uint, 1);
pub const VIMS_CFG_WEPRTRM = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_M = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_S = @as(c_uint, 0);
pub const VIMS_CFG_WEPRTRM_ALLOW = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_RESTRICT = @as(c_uint, 0x00000000);
pub const VIMS_RDPRMN_VAL_W = @as(c_uint, 3);
pub const VIMS_RDPRMN_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_RDPRMN_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPRNMN_VAL_W = @as(c_uint, 6);
pub const VIMS_RDPRNMN_VAL_M = @as(c_uint, 0x0000003F);
pub const VIMS_RDPRNMN_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPRTRM_VAL_W = @as(c_uint, 6);
pub const VIMS_RDPRTRM_VAL_M = @as(c_uint, 0x0000003F);
pub const VIMS_RDPRTRM_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPREGR_VAL = @as(c_uint, 0x00000001);
pub const VIMS_RDPREGR_VAL_M = @as(c_uint, 0x00000001);
pub const VIMS_RDPREGR_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRA_VAL_W = @as(c_uint, 32);
pub const VIMS_WEPRA_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_WEPRA_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRB_VAL_W = @as(c_uint, 28);
pub const VIMS_WEPRB_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFFFFFF, .hex);
pub const VIMS_WEPRB_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRAUX_WEPREGR = @as(c_uint, 0x00000004);
pub const VIMS_WEPRAUX_WEPREGR_M = @as(c_uint, 0x00000004);
pub const VIMS_WEPRAUX_WEPREGR_S = @as(c_uint, 2);
pub const VIMS_WEPRAUX_WEPRTRM = @as(c_uint, 0x00000002);
pub const VIMS_WEPRAUX_WEPRTRM_M = @as(c_uint, 0x00000002);
pub const VIMS_WEPRAUX_WEPRTRM_S = @as(c_uint, 1);
pub const VIMS_WEPRAUX_WEPRNMN = @as(c_uint, 0x00000001);
pub const VIMS_WEPRAUX_WEPRNMN_M = @as(c_uint, 0x00000001);
pub const VIMS_WEPRAUX_WEPRNMN_S = @as(c_uint, 0);
pub const VIMS_FLBSTAT_PARERR = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_M = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_S = @as(c_uint, 3);
pub const VIMS_FLBSTAT_PARERR_ERROR = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_NOERROR = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B0BSY = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_M = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_S = @as(c_uint, 2);
pub const VIMS_FLBSTAT_B0BSY_BUSY = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_IDLE = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B2TRDY = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_M = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_S = @as(c_uint, 1);
pub const VIMS_FLBSTAT_B2TRDY_READY = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_NOTREADY = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B1TRDY = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_M = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_S = @as(c_uint, 0);
pub const VIMS_FLBSTAT_B1TRDY_READY = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_NOTREADY = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHMPEN = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_M = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_S = @as(c_uint, 2);
pub const VIMS_CCHCTRL_CCHMPEN_EN = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHPFEN = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_M = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_S = @as(c_uint, 1);
pub const VIMS_CCHCTRL_CCHPFEN_EN = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHEN = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_M = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_S = @as(c_uint, 0);
pub const VIMS_CCHCTRL_CCHEN_EN = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_DTB_SEL_W = @as(c_uint, 4);
pub const VIMS_DTB_SEL_M = @as(c_uint, 0x0000000F);
pub const VIMS_DTB_SEL_S = @as(c_uint, 0);
pub const VIMS_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const __PBE_BLE5_RAM_REGS_H = "";
pub const PBE_BLE5_RAM_O_PHY = @as(c_uint, 0x00000020);
pub const PBE_BLE5_RAM_O_PRETXIFS500K = @as(c_uint, 0x00000022);
pub const PBE_BLE5_RAM_O_PRETXIFS = @as(c_uint, 0x00000024);
pub const PBE_BLE5_RAM_O_PRERXIFS = @as(c_uint, 0x00000026);
pub const PBE_BLE5_RAM_O_RXTIMEOUT = @as(c_uint, 0x00000028);
pub const PBE_BLE5_RAM_O_SYNTHCALTIMEOUT = @as(c_uint, 0x0000002A);
pub const PBE_BLE5_RAM_O_RECALTIMEOUT = @as(c_uint, 0x0000002C);
pub const PBE_BLE5_RAM_O_RPAMODE = @as(c_uint, 0x0000002E);
pub const PBE_BLE5_RAM_O_RPACONNECT = @as(c_uint, 0x00000030);
pub const PBE_BLE5_RAM_O_FIFOCFG = @as(c_uint, 0x00000032);
pub const PBE_BLE5_RAM_O_STATUSBYTE = @as(c_uint, 0x00000034);
pub const PBE_BLE5_RAM_O_NAKHUB = @as(c_uint, 0x00000036);
pub const PBE_BLE5_RAM_O_WHITEINIT = @as(c_uint, 0x00000038);
pub const PBE_BLE5_RAM_O_EXTRABYTES = @as(c_uint, 0x0000003A);
pub const PBE_BLE5_RAM_O_CRCINITL = @as(c_uint, 0x0000003C);
pub const PBE_BLE5_RAM_O_CRCINITH = @as(c_uint, 0x0000003E);
pub const PBE_BLE5_RAM_O_SEQSTAT = @as(c_uint, 0x00000040);
pub const PBE_BLE5_RAM_O_BACKOFFCNT = @as(c_uint, 0x00000042);
pub const PBE_BLE5_RAM_O_SCANCFG = @as(c_uint, 0x00000044);
pub const PBE_BLE5_RAM_O_AECFG = @as(c_uint, 0x00000046);
pub const PBE_BLE5_RAM_O_AETMP = @as(c_uint, 0x00000048);
pub const PBE_BLE5_RAM_O_EXTLENTMP = @as(c_uint, 0x0000004A);
pub const PBE_BLE5_RAM_O_WINOFFSET = @as(c_uint, 0x0000004C);
pub const PBE_BLE5_RAM_O_WINMOD = @as(c_uint, 0x0000004E);
pub const PBE_BLE5_RAM_O_MAXLEN = @as(c_uint, 0x00000050);
pub const PBE_BLE5_RAM_O_FILTPOLICY = @as(c_uint, 0x00000052);
pub const PBE_BLE5_RAM_O_OWNADRTYPE = @as(c_uint, 0x00000054);
pub const PBE_BLE5_RAM_O_PEERADRTYPE = @as(c_uint, 0x00000056);
pub const PBE_BLE5_RAM_O_OWNADRL = @as(c_uint, 0x00000058);
pub const PBE_BLE5_RAM_O_OWNADRM = @as(c_uint, 0x0000005A);
pub const PBE_BLE5_RAM_O_OWNADRH = @as(c_uint, 0x0000005C);
pub const PBE_BLE5_RAM_O_TMPADRL = @as(c_uint, 0x0000005E);
pub const PBE_BLE5_RAM_O_TMPADRM = @as(c_uint, 0x00000060);
pub const PBE_BLE5_RAM_O_TMPADRH = @as(c_uint, 0x00000062);
pub const PBE_BLE5_RAM_O_PEERADRL = @as(c_uint, 0x00000064);
pub const PBE_BLE5_RAM_O_PEERADRM = @as(c_uint, 0x00000066);
pub const PBE_BLE5_RAM_O_PEERADRH = @as(c_uint, 0x00000068);
pub const PBE_BLE5_RAM_O_NTXDONE = @as(c_uint, 0x0000006A);
pub const PBE_BLE5_RAM_O_NTXACK = @as(c_uint, 0x0000006C);
pub const PBE_BLE5_RAM_O_NTXCTLACK = @as(c_uint, 0x0000006E);
pub const PBE_BLE5_RAM_O_NTXCTL = @as(c_uint, 0x00000070);
pub const PBE_BLE5_RAM_O_NTXRETRANS = @as(c_uint, 0x00000072);
pub const PBE_BLE5_RAM_O_NRXNOK = @as(c_uint, 0x00000074);
pub const PBE_BLE5_RAM_O_NRXIGNORED = @as(c_uint, 0x00000076);
pub const PBE_BLE5_RAM_O_NRXEMPTY = @as(c_uint, 0x00000078);
pub const PBE_BLE5_RAM_O_NRXFIFOFULL = @as(c_uint, 0x0000007A);
pub const PBE_BLE5_RAM_O_NRXOK = @as(c_uint, 0x0000007C);
pub const PBE_BLE5_RAM_O_NTX = @as(c_uint, 0x0000007E);
pub const PBE_BLE5_RAM_O_NRXCTL = @as(c_uint, 0x00000080);
pub const PBE_BLE5_RAM_O_NRXCTLACK = @as(c_uint, 0x00000082);
pub const PBE_BLE5_RAM_O_LASTRSSI = @as(c_uint, 0x00000084);
pub const PBE_BLE5_RAM_O_FIRSTRXTIMEOUT = @as(c_uint, 0x00000086);
pub const PBE_BLE5_RAM_O_LASTTIMESTAMPL = @as(c_uint, 0x00000088);
pub const PBE_BLE5_RAM_O_LASTTIMESTAMPH = @as(c_uint, 0x0000008A);
pub const PBE_BLE5_RAM_O_MDCFG = @as(c_uint, 0x0000008C);
pub const PBE_BLE5_RAM_O_ADVCFG = @as(c_uint, 0x0000008E);
pub const PBE_BLE5_RAM_O_TMPRSSI = @as(c_uint, 0x00000090);
pub const PBE_BLE5_RAM_O_FIRSTTIMESTAMPL = @as(c_uint, 0x00000094);
pub const PBE_BLE5_RAM_O_FIRSTTIMESTAMPH = @as(c_uint, 0x00000096);
pub const PBE_BLE5_RAM_O_FL1RESULT = @as(c_uint, 0x00000098);
pub const PBE_BLE5_RAM_O_FL1MASK = @as(c_uint, 0x0000009A);
pub const PBE_BLE5_RAM_O_FL2RESULT = @as(c_uint, 0x0000009C);
pub const PBE_BLE5_RAM_O_FL2MASK = @as(c_uint, 0x0000009E);
pub const PBE_BLE5_RAM_O_FLSTAT = @as(c_uint, 0x000000A0);
pub const PBE_BLE5_RAM_O_TMPATYPE = @as(c_uint, 0x000000A2);
pub const PBE_BLE5_RAM_O_PATTERN = @as(c_uint, 0x000000A4);
pub const PBE_BLE5_RAM_O_RFINTERVAL = @as(c_uint, 0x000000A6);
pub const PBE_BLE5_RAM_O_NTXTARGET = @as(c_uint, 0x000000A8);
pub const PBE_BLE5_RAM_O_OPCFG = @as(c_uint, 0x000000AA);
pub const PBE_BLE5_RAM_O_FL1INFO0 = @as(c_uint, 0x000000AC);
pub const PBE_BLE5_RAM_O_FL1ADRL0 = @as(c_uint, 0x000000AE);
pub const PBE_BLE5_RAM_O_FL1ADRM0 = @as(c_uint, 0x000000B0);
pub const PBE_BLE5_RAM_O_FL1ADRH0 = @as(c_uint, 0x000000B2);
pub const PBE_BLE5_RAM_O_FL1INFO1 = @as(c_uint, 0x000000B4);
pub const PBE_BLE5_RAM_O_FL1ADRL1 = @as(c_uint, 0x000000B6);
pub const PBE_BLE5_RAM_O_FL1ADRM1 = @as(c_uint, 0x000000B8);
pub const PBE_BLE5_RAM_O_FL1ADRH1 = @as(c_uint, 0x000000BA);
pub const PBE_BLE5_RAM_O_FL1INFO2 = @as(c_uint, 0x000000BC);
pub const PBE_BLE5_RAM_O_FL1ADRL2 = @as(c_uint, 0x000000BE);
pub const PBE_BLE5_RAM_O_FL1ADRM2 = @as(c_uint, 0x000000C0);
pub const PBE_BLE5_RAM_O_FL1ADRH2 = @as(c_uint, 0x000000C2);
pub const PBE_BLE5_RAM_O_FL1INFO3 = @as(c_uint, 0x000000C4);
pub const PBE_BLE5_RAM_O_FL1ADRL3 = @as(c_uint, 0x000000C6);
pub const PBE_BLE5_RAM_O_FL1ADRM3 = @as(c_uint, 0x000000C8);
pub const PBE_BLE5_RAM_O_FL1ADRH3 = @as(c_uint, 0x000000CA);
pub const PBE_BLE5_RAM_O_FL1INFO4 = @as(c_uint, 0x000000CC);
pub const PBE_BLE5_RAM_O_FL1ADRL4 = @as(c_uint, 0x000000CE);
pub const PBE_BLE5_RAM_O_FL1ADRM4 = @as(c_uint, 0x000000D0);
pub const PBE_BLE5_RAM_O_FL1ADRH4 = @as(c_uint, 0x000000D2);
pub const PBE_BLE5_RAM_O_FL1INFO5 = @as(c_uint, 0x000000D4);
pub const PBE_BLE5_RAM_O_FL1ADRL5 = @as(c_uint, 0x000000D6);
pub const PBE_BLE5_RAM_O_FL1ADRM5 = @as(c_uint, 0x000000D8);
pub const PBE_BLE5_RAM_O_FL1ADRH5 = @as(c_uint, 0x000000DA);
pub const PBE_BLE5_RAM_O_FL1INFO6 = @as(c_uint, 0x000000DC);
pub const PBE_BLE5_RAM_O_FL1ADRL6 = @as(c_uint, 0x000000DE);
pub const PBE_BLE5_RAM_O_FL1ADRM6 = @as(c_uint, 0x000000E0);
pub const PBE_BLE5_RAM_O_FL1ADRH6 = @as(c_uint, 0x000000E2);
pub const PBE_BLE5_RAM_O_FL1INFO7 = @as(c_uint, 0x000000E4);
pub const PBE_BLE5_RAM_O_FL1ADRL7 = @as(c_uint, 0x000000E6);
pub const PBE_BLE5_RAM_O_FL1ADRM7 = @as(c_uint, 0x000000E8);
pub const PBE_BLE5_RAM_O_FL1ADRH7 = @as(c_uint, 0x000000EA);
pub const PBE_BLE5_RAM_O_FL1INFO8 = @as(c_uint, 0x000000EC);
pub const PBE_BLE5_RAM_O_FL1ADRL8 = @as(c_uint, 0x000000EE);
pub const PBE_BLE5_RAM_O_FL1ADRM8 = @as(c_uint, 0x000000F0);
pub const PBE_BLE5_RAM_O_FL1ADRH8 = @as(c_uint, 0x000000F2);
pub const PBE_BLE5_RAM_O_FL1INFO9 = @as(c_uint, 0x000000F4);
pub const PBE_BLE5_RAM_O_FL1ADRL9 = @as(c_uint, 0x000000F6);
pub const PBE_BLE5_RAM_O_FL1ADRM9 = @as(c_uint, 0x000000F8);
pub const PBE_BLE5_RAM_O_FL1ADRH9 = @as(c_uint, 0x000000FA);
pub const PBE_BLE5_RAM_O_FL1INFO10 = @as(c_uint, 0x000000FC);
pub const PBE_BLE5_RAM_O_FL1ADRL10 = @as(c_uint, 0x000000FE);
pub const PBE_BLE5_RAM_O_FL1ADRM10 = @as(c_uint, 0x00000100);
pub const PBE_BLE5_RAM_O_FL1ADRH10 = @as(c_uint, 0x00000102);
pub const PBE_BLE5_RAM_O_FL1INFO11 = @as(c_uint, 0x00000104);
pub const PBE_BLE5_RAM_O_FL1ADRL11 = @as(c_uint, 0x00000106);
pub const PBE_BLE5_RAM_O_FL1ADRM11 = @as(c_uint, 0x00000108);
pub const PBE_BLE5_RAM_O_FL1ADRH11 = @as(c_uint, 0x0000010A);
pub const PBE_BLE5_RAM_O_FL1INFO12 = @as(c_uint, 0x0000010C);
pub const PBE_BLE5_RAM_O_FL1ADRL12 = @as(c_uint, 0x0000010E);
pub const PBE_BLE5_RAM_O_FL1ADRM12 = @as(c_uint, 0x00000110);
pub const PBE_BLE5_RAM_O_FL1ADRH12 = @as(c_uint, 0x00000112);
pub const PBE_BLE5_RAM_O_FL1INFO13 = @as(c_uint, 0x00000114);
pub const PBE_BLE5_RAM_O_FL1ADRL13 = @as(c_uint, 0x00000116);
pub const PBE_BLE5_RAM_O_FL1ADRM13 = @as(c_uint, 0x00000118);
pub const PBE_BLE5_RAM_O_FL1ADRH13 = @as(c_uint, 0x0000011A);
pub const PBE_BLE5_RAM_O_FL1INFO14 = @as(c_uint, 0x0000011C);
pub const PBE_BLE5_RAM_O_FL1ADRL14 = @as(c_uint, 0x0000011E);
pub const PBE_BLE5_RAM_O_FL1ADRM14 = @as(c_uint, 0x00000120);
pub const PBE_BLE5_RAM_O_FL1ADRH14 = @as(c_uint, 0x00000122);
pub const PBE_BLE5_RAM_O_FL1INFO15 = @as(c_uint, 0x00000124);
pub const PBE_BLE5_RAM_O_FL1ADRL15 = @as(c_uint, 0x00000126);
pub const PBE_BLE5_RAM_O_FL1ADRM15 = @as(c_uint, 0x00000128);
pub const PBE_BLE5_RAM_O_FL1ADRH15 = @as(c_uint, 0x0000012A);
pub const PBE_BLE5_RAM_O_FL2INFO0 = @as(c_uint, 0x0000012C);
pub const PBE_BLE5_RAM_O_FL2ADRL0 = @as(c_uint, 0x0000012E);
pub const PBE_BLE5_RAM_O_FL2ADRM0 = @as(c_uint, 0x00000130);
pub const PBE_BLE5_RAM_O_FL2ADRH0 = @as(c_uint, 0x00000132);
pub const PBE_BLE5_RAM_O_FL2INFO1 = @as(c_uint, 0x00000134);
pub const PBE_BLE5_RAM_O_FL2ADRL1 = @as(c_uint, 0x00000136);
pub const PBE_BLE5_RAM_O_FL2ADRM1 = @as(c_uint, 0x00000138);
pub const PBE_BLE5_RAM_O_FL2ADRH1 = @as(c_uint, 0x0000013A);
pub const PBE_BLE5_RAM_O_FL2INFO2 = @as(c_uint, 0x0000013C);
pub const PBE_BLE5_RAM_O_FL2ADRL2 = @as(c_uint, 0x0000013E);
pub const PBE_BLE5_RAM_O_FL2ADRM2 = @as(c_uint, 0x00000140);
pub const PBE_BLE5_RAM_O_FL2ADRH2 = @as(c_uint, 0x00000142);
pub const PBE_BLE5_RAM_O_FL2INFO3 = @as(c_uint, 0x00000144);
pub const PBE_BLE5_RAM_O_FL2ADRL3 = @as(c_uint, 0x00000146);
pub const PBE_BLE5_RAM_O_FL2ADRM3 = @as(c_uint, 0x00000148);
pub const PBE_BLE5_RAM_O_FL2ADRH3 = @as(c_uint, 0x0000014A);
pub const PBE_BLE5_RAM_O_FL2INFO4 = @as(c_uint, 0x0000014C);
pub const PBE_BLE5_RAM_O_FL2ADRL4 = @as(c_uint, 0x0000014E);
pub const PBE_BLE5_RAM_O_FL2ADRM4 = @as(c_uint, 0x00000150);
pub const PBE_BLE5_RAM_O_FL2ADRH4 = @as(c_uint, 0x00000152);
pub const PBE_BLE5_RAM_O_FL2INFO5 = @as(c_uint, 0x00000154);
pub const PBE_BLE5_RAM_O_FL2ADRL5 = @as(c_uint, 0x00000156);
pub const PBE_BLE5_RAM_O_FL2ADRM5 = @as(c_uint, 0x00000158);
pub const PBE_BLE5_RAM_O_FL2ADRH5 = @as(c_uint, 0x0000015A);
pub const PBE_BLE5_RAM_O_FL2INFO6 = @as(c_uint, 0x0000015C);
pub const PBE_BLE5_RAM_O_FL2ADRL6 = @as(c_uint, 0x0000015E);
pub const PBE_BLE5_RAM_O_FL2ADRM6 = @as(c_uint, 0x00000160);
pub const PBE_BLE5_RAM_O_FL2ADRH6 = @as(c_uint, 0x00000162);
pub const PBE_BLE5_RAM_O_FL2INFO7 = @as(c_uint, 0x00000164);
pub const PBE_BLE5_RAM_O_FL2ADRL7 = @as(c_uint, 0x00000166);
pub const PBE_BLE5_RAM_O_FL2ADRM7 = @as(c_uint, 0x00000168);
pub const PBE_BLE5_RAM_O_FL2ADRH7 = @as(c_uint, 0x0000016A);
pub const PBE_BLE5_RAM_O_FL2INFO8 = @as(c_uint, 0x0000016C);
pub const PBE_BLE5_RAM_O_FL2ADRL8 = @as(c_uint, 0x0000016E);
pub const PBE_BLE5_RAM_O_FL2ADRM8 = @as(c_uint, 0x00000170);
pub const PBE_BLE5_RAM_O_FL2ADRH8 = @as(c_uint, 0x00000172);
pub const PBE_BLE5_RAM_O_FL2INFO9 = @as(c_uint, 0x00000174);
pub const PBE_BLE5_RAM_O_FL2ADRL9 = @as(c_uint, 0x00000176);
pub const PBE_BLE5_RAM_O_FL2ADRM9 = @as(c_uint, 0x00000178);
pub const PBE_BLE5_RAM_O_FL2ADRH9 = @as(c_uint, 0x0000017A);
pub const PBE_BLE5_RAM_O_FL2INFO10 = @as(c_uint, 0x0000017C);
pub const PBE_BLE5_RAM_O_FL2ADRL10 = @as(c_uint, 0x0000017E);
pub const PBE_BLE5_RAM_O_FL2ADRM10 = @as(c_uint, 0x00000180);
pub const PBE_BLE5_RAM_O_FL2ADRH10 = @as(c_uint, 0x00000182);
pub const PBE_BLE5_RAM_O_FL2INFO11 = @as(c_uint, 0x00000184);
pub const PBE_BLE5_RAM_O_FL2ADRL11 = @as(c_uint, 0x00000186);
pub const PBE_BLE5_RAM_O_FL2ADRM11 = @as(c_uint, 0x00000188);
pub const PBE_BLE5_RAM_O_FL2ADRH11 = @as(c_uint, 0x0000018A);
pub const PBE_BLE5_RAM_O_FL2INFO12 = @as(c_uint, 0x0000018C);
pub const PBE_BLE5_RAM_O_FL2ADRL12 = @as(c_uint, 0x0000018E);
pub const PBE_BLE5_RAM_O_FL2ADRM12 = @as(c_uint, 0x00000190);
pub const PBE_BLE5_RAM_O_FL2ADRH12 = @as(c_uint, 0x00000192);
pub const PBE_BLE5_RAM_O_FL2INFO13 = @as(c_uint, 0x00000194);
pub const PBE_BLE5_RAM_O_FL2ADRL13 = @as(c_uint, 0x00000196);
pub const PBE_BLE5_RAM_O_FL2ADRM13 = @as(c_uint, 0x00000198);
pub const PBE_BLE5_RAM_O_FL2ADRH13 = @as(c_uint, 0x0000019A);
pub const PBE_BLE5_RAM_O_FL2INFO14 = @as(c_uint, 0x0000019C);
pub const PBE_BLE5_RAM_O_FL2ADRL14 = @as(c_uint, 0x0000019E);
pub const PBE_BLE5_RAM_O_FL2ADRM14 = @as(c_uint, 0x000001A0);
pub const PBE_BLE5_RAM_O_FL2ADRH14 = @as(c_uint, 0x000001A2);
pub const PBE_BLE5_RAM_O_FL2INFO15 = @as(c_uint, 0x000001A4);
pub const PBE_BLE5_RAM_O_FL2ADRL15 = @as(c_uint, 0x000001A6);
pub const PBE_BLE5_RAM_O_FL2ADRM15 = @as(c_uint, 0x000001A8);
pub const PBE_BLE5_RAM_O_FL2ADRH15 = @as(c_uint, 0x000001AA);
pub const PBE_BLE5_RAM_PHY_SEL_W = @as(c_uint, 2);
pub const PBE_BLE5_RAM_PHY_SEL_M = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_PHY_SEL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PHY_SEL_1M = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_PHY_SEL_2M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_PHY_SEL_CODED_125K = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_PHY_SEL_CODED_500K = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_PRETXIFS500K_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PRETXIFS500K_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PRETXIFS500K_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PRETXIFS_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PRETXIFS_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PRETXIFS_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PRERXIFS_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PRERXIFS_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PRERXIFS_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_RXTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_RXTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_RXTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_SYNTHCALTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_SYNTHCALTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_SYNTHCALTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_RECALTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_RECALTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_RECALTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_RPAMODE_OWNADR = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_RPAMODE_OWNADR_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_RPAMODE_OWNADR_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_RPAMODE_PEERADR = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_RPAMODE_PEERADR_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_RPAMODE_PEERADR_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_RPACONNECT_ENDADV = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_RPACONNECT_ENDADV_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_RPACONNECT_ENDADV_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDTIMESTAMP = @as(c_uint, 0x0100);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDTIMESTAMP_M = @as(c_uint, 0x0100);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDTIMESTAMP_S = @as(c_uint, 8);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDTIMESTAMP_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDTIMESTAMP_ENA = @as(c_uint, 0x0100);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDRSSI = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDRSSI_M = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDRSSI_S = @as(c_uint, 7);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDFREQEST = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDFREQEST_M = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDFREQEST_S = @as(c_uint, 6);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDLQI = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDLQI_M = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDLQI_S = @as(c_uint, 5);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDSTATUS = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDSTATUS_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDSTATUS_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDCRC = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDCRC_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FIFOCFG_APPENDCRC_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHEMPTY = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHEMPTY_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHEMPTY_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHEMPTY_KEEP = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHEMPTY_FLUSH = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHIGN = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHIGN_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHIGN_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHIGN_KEEP = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHIGN_FLUSH = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHCRC = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHCRC_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHCRC_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHCRC_KEEP = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FIFOCFG_AUTOFLUSHCRC_FLUSH = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_STATUSBYTE_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_STATUSBYTE_RESERVED_M = @as(c_uint, 0xFFE0);
pub const PBE_BLE5_RAM_STATUSBYTE_RESERVED_S = @as(c_uint, 5);
pub const PBE_BLE5_RAM_STATUSBYTE_RPAIGNORED = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_STATUSBYTE_RPAIGNORED_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_STATUSBYTE_RPAIGNORED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_STATUSBYTE_IGNORED = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_STATUSBYTE_IGNORED_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_STATUSBYTE_IGNORED_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_STATUSBYTE_CRCERROR = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_STATUSBYTE_CRCERROR_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_STATUSBYTE_CRCERROR_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_W = @as(c_uint, 2);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_M = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_1M = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_2M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_CODED_125K = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_STATUSBYTE_PHY_CODED_500K = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_NAKHUB_NRNAKS_W = @as(c_uint, 3);
pub const PBE_BLE5_RAM_NAKHUB_NRNAKS_M = @as(c_uint, 0x0038);
pub const PBE_BLE5_RAM_NAKHUB_NRNAKS_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_NAKHUB_MAXNAK_W = @as(c_uint, 3);
pub const PBE_BLE5_RAM_NAKHUB_MAXNAK_M = @as(c_uint, 0x0007);
pub const PBE_BLE5_RAM_NAKHUB_MAXNAK_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_WHITEINIT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_WHITEINIT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_WHITEINIT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_EXTRABYTES_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_EXTRABYTES_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_EXTRABYTES_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_CRCINITL_VALLSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_CRCINITL_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_CRCINITL_VALLSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_CRCINITH_VALMSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_CRCINITH_VALMSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_CRCINITH_VALMSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACKPEND = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACKPEND_M = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACKPEND_S = @as(c_uint, 7);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACKPEND_NO = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACKPEND_YES = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACK = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACK_M = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACK_S = @as(c_uint, 6);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACK_NO = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_SEQSTAT_CTLACK_YES = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_SEQSTAT_CTLTX = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_SEQSTAT_CTLTX_M = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_SEQSTAT_CTLTX_S = @as(c_uint, 5);
pub const PBE_BLE5_RAM_SEQSTAT_CTLTX_NO = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_SEQSTAT_CTLTX_YES = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_SEQSTAT_EMPTY = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_SEQSTAT_EMPTY_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_SEQSTAT_EMPTY_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_SEQSTAT_FIRSTPKT = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_SEQSTAT_FIRSTPKT_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_SEQSTAT_FIRSTPKT_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_SEQSTAT_FIRSTPKT_NOT_FIRST = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_SEQSTAT_FIRSTPKT_FIRST = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_SEQSTAT_NEXTTXSN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_SEQSTAT_NEXTTXSN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_SEQSTAT_NEXTTXSN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_SEQSTAT_LASTTXSN = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_SEQSTAT_LASTTXSN_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_SEQSTAT_LASTTXSN_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_SEQSTAT_LASTRXSN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_SEQSTAT_LASTRXSN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_SEQSTAT_LASTRXSN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_BACKOFFCNT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_BACKOFFCNT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_BACKOFFCNT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_SCANCFG_ACTPASS = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_SCANCFG_ACTPASS_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_SCANCFG_ACTPASS_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_SCANCFG_ACTPASS_PASS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_SCANCFG_ACTPASS_ACT = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AECFG_ADVMODE2 = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_AECFG_ADVMODE2_M = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_AECFG_ADVMODE2_S = @as(c_uint, 5);
pub const PBE_BLE5_RAM_AECFG_ADVMODE2_REJECT = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_ADVMODE2_ACCEPT = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_AECFG_ADVMODE1 = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_AECFG_ADVMODE1_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_AECFG_ADVMODE1_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_AECFG_ADVMODE1_REJECT = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_ADVMODE1_ACCEPT = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_AECFG_ADVMODE0 = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_AECFG_ADVMODE0_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_AECFG_ADVMODE0_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_AECFG_ADVMODE0_REJECT = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_ADVMODE0_ACCEPT = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_AECFG_CHNL = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_AECFG_CHNL_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_AECFG_CHNL_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_AECFG_CHNL_PRIMARY = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_CHNL_SECONDARY = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_AECFG_EXTENDED = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_AECFG_EXTENDED_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_AECFG_EXTENDED_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_AECFG_EXTENDED_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_EXTENDED_EN = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_AECFG_LEGACY = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AECFG_LEGACY_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AECFG_LEGACY_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_AECFG_LEGACY_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_AECFG_LEGACY_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AETMP_SCANNABLE = @as(c_uint, 0x0200);
pub const PBE_BLE5_RAM_AETMP_SCANNABLE_M = @as(c_uint, 0x0200);
pub const PBE_BLE5_RAM_AETMP_SCANNABLE_S = @as(c_uint, 9);
pub const PBE_BLE5_RAM_AETMP_CONNECTABLE = @as(c_uint, 0x0100);
pub const PBE_BLE5_RAM_AETMP_CONNECTABLE_M = @as(c_uint, 0x0100);
pub const PBE_BLE5_RAM_AETMP_CONNECTABLE_S = @as(c_uint, 8);
pub const PBE_BLE5_RAM_AETMP_RES = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_AETMP_RES_M = @as(c_uint, 0x0080);
pub const PBE_BLE5_RAM_AETMP_RES_S = @as(c_uint, 7);
pub const PBE_BLE5_RAM_AETMP_TXPOWER = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_AETMP_TXPOWER_M = @as(c_uint, 0x0040);
pub const PBE_BLE5_RAM_AETMP_TXPOWER_S = @as(c_uint, 6);
pub const PBE_BLE5_RAM_AETMP_SYNCINFO = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_AETMP_SYNCINFO_M = @as(c_uint, 0x0020);
pub const PBE_BLE5_RAM_AETMP_SYNCINFO_S = @as(c_uint, 5);
pub const PBE_BLE5_RAM_AETMP_AUXPTR = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_AETMP_AUXPTR_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_AETMP_AUXPTR_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_AETMP_ADI = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_AETMP_ADI_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_AETMP_ADI_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_AETMP_CTEINFO = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_AETMP_CTEINFO_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_AETMP_CTEINFO_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_AETMP_TARGETA = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_AETMP_TARGETA_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_AETMP_TARGETA_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_AETMP_ADVA = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AETMP_ADVA_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_AETMP_ADVA_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_EXTLENTMP_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_EXTLENTMP_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_EXTLENTMP_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_WINOFFSET_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_WINOFFSET_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_WINOFFSET_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_WINMOD_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_WINMOD_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_WINMOD_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_MAXLEN_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_MAXLEN_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_MAXLEN_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FILTPOLICY_INTOR = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_FILTPOLICY_INTOR_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_FILTPOLICY_INTOR_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FILTPOLICY_INTOR_PEERADR = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FILTPOLICY_INTOR_FL2 = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_FILTPOLICY_EXTSCANNER = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FILTPOLICY_EXTSCANNER_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FILTPOLICY_EXTSCANNER_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FILTPOLICY_EXTSCANNER_NORPA = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FILTPOLICY_EXTSCANNER_ANYRPA = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FILTPOLICY_SCANNER = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FILTPOLICY_SCANNER_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FILTPOLICY_SCANNER_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FILTPOLICY_SCANNER_REJFL1 = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FILTPOLICY_SCANNER_FL1 = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_W = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_M = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_REJFL1_REJFL2 = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_FL1_REJFL2 = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_REJFL1_FL2 = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FILTPOLICY_ADV_FL1_FL2 = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_OWNADRTYPE_TYPE = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_OWNADRTYPE_TYPE_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_OWNADRTYPE_TYPE_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_OWNADRTYPE_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_OWNADRTYPE_TYPE_RANDOM = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_PEERADRTYPE_TYPE = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_PEERADRTYPE_TYPE_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_PEERADRTYPE_TYPE_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PEERADRTYPE_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_PEERADRTYPE_TYPE_RANDOM = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_OWNADRL_VALLSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_OWNADRL_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_OWNADRL_VALLSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_OWNADRM_VALLSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_OWNADRM_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_OWNADRM_VALLSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_OWNADRH_VALMSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_OWNADRH_VALMSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_OWNADRH_VALMSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_TMPADRL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_TMPADRL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_TMPADRL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_TMPADRM_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_TMPADRM_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_TMPADRM_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_TMPADRH_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_TMPADRH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_TMPADRH_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PEERADRL_VALLSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PEERADRL_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PEERADRL_VALLSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PEERADRM_VALLSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PEERADRM_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PEERADRM_VALLSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PEERADRH_VALMSB_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PEERADRH_VALMSB_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PEERADRH_VALMSB_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXDONE_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXDONE_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXDONE_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXACK_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXACK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXACK_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXCTLACK_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXCTLACK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXCTLACK_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXCTL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXCTL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXCTL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXRETRANS_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXRETRANS_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXRETRANS_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXNOK_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXNOK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXNOK_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXIGNORED_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXIGNORED_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXIGNORED_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXEMPTY_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXEMPTY_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXEMPTY_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXFIFOFULL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXFIFOFULL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXFIFOFULL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXOK_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXOK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXOK_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTX_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTX_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTX_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXCTL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXCTL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXCTL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NRXCTLACK_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NRXCTLACK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NRXCTLACK_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_LASTRSSI_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_LASTRSSI_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_LASTRSSI_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FIRSTRXTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FIRSTRXTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FIRSTRXTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_LASTTIMESTAMPL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_LASTTIMESTAMPL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_LASTTIMESTAMPL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_LASTTIMESTAMPH_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_LASTTIMESTAMPH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_LASTTIMESTAMPH_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_MDCFG_FORCE_W = @as(c_uint, 2);
pub const PBE_BLE5_RAM_MDCFG_FORCE_M = @as(c_uint, 0x0003);
pub const PBE_BLE5_RAM_MDCFG_FORCE_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_MDCFG_FORCE_MD0 = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_MDCFG_FORCE_MD1 = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_ADVCFG_EXTENDED = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_ADVCFG_EXTENDED_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_ADVCFG_EXTENDED_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_ADVCFG_DIRECTED = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_ADVCFG_DIRECTED_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_ADVCFG_DIRECTED_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_ADVCFG_SCANNABLE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_ADVCFG_SCANNABLE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_ADVCFG_SCANNABLE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_ADVCFG_CONNECTABLE = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_ADVCFG_CONNECTABLE_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_ADVCFG_CONNECTABLE_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_TMPRSSI_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_TMPRSSI_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_TMPRSSI_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPH_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FIRSTTIMESTAMPH_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1RESULT_INDEX_W = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1RESULT_INDEX_M = @as(c_uint, 0x000F);
pub const PBE_BLE5_RAM_FL1RESULT_INDEX_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1MASK_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1MASK_MATCH_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1MASK_MATCH_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1MASK_MATCH_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1MASK_MATCH_EN = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1MASK_RFUIGN_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1MASK_RFUIGN_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1MASK_RFUIGN_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1MASK_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1MASK_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1MASK_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1MASK_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1MASK_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1MASK_DUPLICATEIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1MASK_DUPLICATEIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1MASK_DUPLICATEIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1MASK_DUPLICATEIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1MASK_DUPLICATEIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1MASK_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1MASK_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1MASK_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1MASK_TYPE_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1MASK_TYPE_EN = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1MASK_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1MASK_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1MASK_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1MASK_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1MASK_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2RESULT_INDEX_W = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2RESULT_INDEX_M = @as(c_uint, 0x000F);
pub const PBE_BLE5_RAM_FL2RESULT_INDEX_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2MASK_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2MASK_MATCH_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2MASK_MATCH_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2MASK_MATCH_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2MASK_MATCH_EN = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2MASK_RFUIGN_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2MASK_RFUIGN_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2MASK_RFUIGN_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2MASK_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2MASK_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2MASK_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2MASK_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2MASK_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2MASK_DUPLICATEIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2MASK_DUPLICATEIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2MASK_DUPLICATEIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2MASK_DUPLICATEIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2MASK_DUPLICATEIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2MASK_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2MASK_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2MASK_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2MASK_TYPE_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2MASK_TYPE_EN = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2MASK_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2MASK_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2MASK_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2MASK_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2MASK_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FLSTAT_FL2RUNNING = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FLSTAT_FL2RUNNING_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FLSTAT_FL2RUNNING_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FLSTAT_FL2RUNNING_IDLE = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FLSTAT_FL2RUNNING_RUNNING = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FLSTAT_FL1RUNNING = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FLSTAT_FL1RUNNING_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FLSTAT_FL1RUNNING_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FLSTAT_FL1RUNNING_IDLE = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FLSTAT_FL1RUNNING_RUNNING = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_TMPATYPE_VAL = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_TMPATYPE_VAL_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_TMPATYPE_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_PATTERN_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_PATTERN_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_PATTERN_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_RFINTERVAL_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_RFINTERVAL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_RFINTERVAL_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_NTXTARGET_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_NTXTARGET_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_NTXTARGET_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_OPCFG_REPEAT = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_OPCFG_REPEAT_M = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_OPCFG_REPEAT_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_OPCFG_REPEAT_NO = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_OPCFG_REPEAT_YES = @as(c_uint, 0x0010);
pub const PBE_BLE5_RAM_OPCFG_TXPATTERN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_OPCFG_TXPATTERN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_OPCFG_TXPATTERN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_OPCFG_TXPATTERN_NO = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_OPCFG_TXPATTERN_YES = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_W = @as(c_uint, 2);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_M = @as(c_uint, 0x0006);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_NONE = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_RETRY = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_OPCFG_TXFCMD_DEALLOC = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_OPCFG_RFINTERVAL = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_OPCFG_RFINTERVAL_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_OPCFG_RFINTERVAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_OPCFG_RFINTERVAL_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_OPCFG_RFINTERVAL_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO0_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO0_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO0_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO0_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO0_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO0_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO0_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO0_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO0_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO0_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO0_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO0_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO0_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO0_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO0_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO0_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO0_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO0_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO0_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO0_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO0_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO0_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO0_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO0_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO0_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO0_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO0_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO0_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO1_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO1_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO1_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO1_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO1_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO1_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO1_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO1_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO1_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO1_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO1_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO1_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO1_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO1_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO1_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO1_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO1_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO1_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO1_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO1_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO1_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO1_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO1_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO1_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO1_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO1_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO1_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO1_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO2_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO2_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO2_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO2_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO2_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO2_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO2_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO2_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO2_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO2_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO2_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO2_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO2_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO2_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO2_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO2_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO2_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO2_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO2_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO2_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO2_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO2_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO2_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO2_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO2_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO2_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO2_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO2_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO3_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO3_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO3_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO3_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO3_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO3_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO3_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO3_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO3_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO3_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO3_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO3_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO3_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO3_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO3_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO3_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO3_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO3_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO3_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO3_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO3_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO3_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO3_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO3_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO3_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO3_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO3_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO3_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO4_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO4_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO4_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO4_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO4_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO4_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO4_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO4_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO4_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO4_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO4_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO4_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO4_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO4_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO4_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO4_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO4_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO4_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO4_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO4_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO4_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO4_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO4_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO4_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO4_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO4_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO4_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO4_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO5_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO5_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO5_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO5_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO5_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO5_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO5_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO5_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO5_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO5_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO5_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO5_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO5_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO5_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO5_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO5_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO5_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO5_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO5_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO5_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO5_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO5_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO5_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO5_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO5_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO5_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO5_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO5_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO6_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO6_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO6_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO6_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO6_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO6_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO6_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO6_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO6_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO6_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO6_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO6_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO6_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO6_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO6_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO6_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO6_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO6_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO6_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO6_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO6_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO6_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO6_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO6_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO6_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO6_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO6_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO6_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO7_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO7_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO7_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO7_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO7_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO7_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO7_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO7_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO7_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO7_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO7_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO7_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO7_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO7_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO7_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO7_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO7_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO7_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO7_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO7_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO7_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO7_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO7_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO7_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO7_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO7_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO7_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO7_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO8_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO8_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO8_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO8_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO8_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO8_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO8_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO8_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO8_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO8_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO8_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO8_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO8_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO8_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO8_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO8_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO8_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO8_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO8_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO8_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO8_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO8_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO8_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO8_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO8_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO8_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO8_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO8_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO9_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO9_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO9_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO9_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO9_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO9_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO9_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO9_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO9_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO9_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO9_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO9_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO9_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO9_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO9_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO9_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO9_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO9_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO9_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO9_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO9_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO9_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO9_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO9_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO9_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO9_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO9_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO9_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO10_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO10_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO10_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO10_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO10_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO10_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO10_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO10_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO10_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO10_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO10_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO10_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO10_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO10_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO10_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO10_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO10_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO10_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO10_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO10_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO10_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO10_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO10_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO10_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO10_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO10_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO10_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO10_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO11_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO11_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO11_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO11_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO11_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO11_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO11_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO11_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO11_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO11_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO11_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO11_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO11_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO11_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO11_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO11_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO11_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO11_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO11_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO11_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO11_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO11_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO11_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO11_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO11_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO11_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO11_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO11_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO12_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO12_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO12_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO12_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO12_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO12_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO12_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO12_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO12_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO12_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO12_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO12_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO12_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO12_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO12_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO12_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO12_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO12_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO12_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO12_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO12_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO12_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO12_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO12_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO12_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO12_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO12_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO12_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO13_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO13_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO13_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO13_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO13_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO13_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO13_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO13_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO13_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO13_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO13_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO13_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO13_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO13_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO13_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO13_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO13_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO13_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO13_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO13_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO13_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO13_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO13_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO13_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO13_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO13_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO13_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO13_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO14_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO14_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO14_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO14_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO14_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO14_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO14_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO14_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO14_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO14_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO14_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO14_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO14_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO14_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO14_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO14_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO14_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO14_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO14_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO14_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO14_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO14_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO14_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO14_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO14_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO14_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO14_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO14_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO15_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO15_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO15_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL1INFO15_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO15_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL1INFO15_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL1INFO15_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL1INFO15_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL1INFO15_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO15_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO15_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL1INFO15_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO15_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL1INFO15_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO15_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO15_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL1INFO15_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO15_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL1INFO15_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO15_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO15_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL1INFO15_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO15_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL1INFO15_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO15_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1INFO15_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1INFO15_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL1INFO15_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL1ADRL15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRL15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRL15_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRM15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRM15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRM15_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL1ADRH15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL1ADRH15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL1ADRH15_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO0_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO0_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO0_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO0_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO0_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO0_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO0_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO0_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO0_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO0_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO0_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO0_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO0_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO0_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO0_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO0_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO0_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO0_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO0_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO0_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO0_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO0_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO0_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO0_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO0_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO0_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO0_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO0_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH0_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH0_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO1_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO1_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO1_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO1_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO1_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO1_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO1_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO1_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO1_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO1_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO1_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO1_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO1_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO1_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO1_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO1_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO1_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO1_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO1_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO1_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO1_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO1_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO1_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO1_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO1_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO1_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO1_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO1_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH1_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH1_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO2_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO2_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO2_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO2_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO2_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO2_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO2_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO2_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO2_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO2_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO2_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO2_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO2_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO2_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO2_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO2_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO2_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO2_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO2_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO2_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO2_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO2_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO2_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO2_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO2_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO2_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO2_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO2_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH2_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH2_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO3_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO3_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO3_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO3_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO3_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO3_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO3_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO3_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO3_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO3_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO3_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO3_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO3_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO3_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO3_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO3_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO3_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO3_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO3_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO3_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO3_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO3_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO3_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO3_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO3_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO3_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO3_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO3_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH3_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH3_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO4_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO4_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO4_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO4_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO4_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO4_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO4_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO4_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO4_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO4_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO4_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO4_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO4_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO4_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO4_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO4_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO4_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO4_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO4_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO4_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO4_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO4_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO4_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO4_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO4_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO4_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO4_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO4_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH4_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH4_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO5_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO5_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO5_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO5_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO5_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO5_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO5_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO5_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO5_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO5_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO5_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO5_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO5_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO5_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO5_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO5_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO5_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO5_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO5_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO5_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO5_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO5_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO5_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO5_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO5_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO5_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO5_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO5_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH5_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH5_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO6_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO6_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO6_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO6_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO6_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO6_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO6_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO6_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO6_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO6_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO6_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO6_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO6_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO6_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO6_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO6_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO6_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO6_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO6_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO6_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO6_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO6_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO6_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO6_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO6_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO6_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO6_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO6_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH6_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH6_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO7_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO7_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO7_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO7_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO7_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO7_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO7_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO7_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO7_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO7_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO7_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO7_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO7_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO7_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO7_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO7_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO7_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO7_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO7_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO7_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO7_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO7_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO7_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO7_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO7_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO7_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO7_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO7_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH7_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH7_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO8_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO8_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO8_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO8_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO8_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO8_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO8_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO8_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO8_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO8_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO8_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO8_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO8_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO8_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO8_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO8_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO8_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO8_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO8_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO8_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO8_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO8_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO8_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO8_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO8_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO8_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO8_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO8_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH8_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH8_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO9_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO9_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO9_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO9_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO9_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO9_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO9_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO9_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO9_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO9_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO9_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO9_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO9_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO9_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO9_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO9_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO9_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO9_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO9_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO9_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO9_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO9_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO9_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO9_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO9_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO9_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO9_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO9_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH9_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH9_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO10_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO10_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO10_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO10_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO10_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO10_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO10_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO10_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO10_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO10_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO10_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO10_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO10_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO10_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO10_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO10_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO10_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO10_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO10_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO10_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO10_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO10_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO10_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO10_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO10_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO10_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO10_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO10_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH10_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH10_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO11_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO11_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO11_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO11_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO11_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO11_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO11_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO11_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO11_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO11_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO11_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO11_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO11_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO11_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO11_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO11_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO11_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO11_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO11_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO11_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO11_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO11_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO11_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO11_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO11_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO11_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO11_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO11_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH11_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH11_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO12_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO12_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO12_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO12_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO12_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO12_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO12_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO12_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO12_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO12_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO12_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO12_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO12_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO12_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO12_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO12_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO12_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO12_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO12_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO12_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO12_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO12_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO12_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO12_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO12_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO12_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO12_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO12_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH12_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH12_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO13_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO13_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO13_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO13_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO13_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO13_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO13_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO13_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO13_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO13_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO13_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO13_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO13_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO13_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO13_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO13_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO13_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO13_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO13_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO13_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO13_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO13_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO13_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO13_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO13_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO13_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO13_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO13_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH13_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH13_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO14_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO14_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO14_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO14_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO14_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO14_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO14_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO14_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO14_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO14_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO14_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO14_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO14_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO14_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO14_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO14_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO14_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO14_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO14_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO14_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO14_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO14_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO14_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO14_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO14_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO14_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO14_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO14_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH14_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH14_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH14_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO15_MATCHTMP = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO15_MATCHTMP_M = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO15_MATCHTMP_S = @as(c_uint, 15);
pub const PBE_BLE5_RAM_FL2INFO15_MATCHTMP_NOMATCH = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO15_MATCHTMP_MATCH = @as(c_uint, 0x8000);
pub const PBE_BLE5_RAM_FL2INFO15_RESERVED_W = @as(c_uint, 11);
pub const PBE_BLE5_RAM_FL2INFO15_RESERVED_M = @as(c_uint, 0x7FF0);
pub const PBE_BLE5_RAM_FL2INFO15_RESERVED_S = @as(c_uint, 4);
pub const PBE_BLE5_RAM_FL2INFO15_PRIVIGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO15_PRIVIGN_M = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO15_PRIVIGN_S = @as(c_uint, 3);
pub const PBE_BLE5_RAM_FL2INFO15_PRIVIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO15_PRIVIGN_IGN = @as(c_uint, 0x0008);
pub const PBE_BLE5_RAM_FL2INFO15_FALIGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO15_FALIGN_M = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO15_FALIGN_S = @as(c_uint, 2);
pub const PBE_BLE5_RAM_FL2INFO15_FALIGN_NIGN = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO15_FALIGN_IGN = @as(c_uint, 0x0004);
pub const PBE_BLE5_RAM_FL2INFO15_TYPE = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO15_TYPE_M = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO15_TYPE_S = @as(c_uint, 1);
pub const PBE_BLE5_RAM_FL2INFO15_TYPE_PUBLIC = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO15_TYPE_RANDOM = @as(c_uint, 0x0002);
pub const PBE_BLE5_RAM_FL2INFO15_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO15_EN_M = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2INFO15_EN_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2INFO15_EN_DIS = @as(c_uint, 0x0000);
pub const PBE_BLE5_RAM_FL2INFO15_EN_EN = @as(c_uint, 0x0001);
pub const PBE_BLE5_RAM_FL2ADRL15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRL15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRL15_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRM15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRM15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRM15_VAL_S = @as(c_uint, 0);
pub const PBE_BLE5_RAM_FL2ADRH15_VAL_W = @as(c_uint, 16);
pub const PBE_BLE5_RAM_FL2ADRH15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_BLE5_RAM_FL2ADRH15_VAL_S = @as(c_uint, 0);
pub const __PBE_BLE5_REGDEF_REGS_H = "";
pub const PBE_BLE5_REGDEF_O_IRQ = @as(c_uint, 0x00000010);
pub const PBE_BLE5_REGDEF_O_API = @as(c_uint, 0x00000030);
pub const PBE_BLE5_REGDEF_IRQ_OPERROR = @as(c_uint, 0x00008000);
pub const PBE_BLE5_REGDEF_IRQ_OPERROR_M = @as(c_uint, 0x00008000);
pub const PBE_BLE5_REGDEF_IRQ_OPERROR_S = @as(c_uint, 15);
pub const PBE_BLE5_REGDEF_IRQ_OPERROR_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_OPERROR_ACTIVE = @as(c_uint, 0x00008000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED14 = @as(c_uint, 0x00004000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED14_M = @as(c_uint, 0x00004000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED14_S = @as(c_uint, 14);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED14_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED14_ACTIVE = @as(c_uint, 0x00004000);
pub const PBE_BLE5_REGDEF_IRQ_TXDONE = @as(c_uint, 0x00002000);
pub const PBE_BLE5_REGDEF_IRQ_TXDONE_M = @as(c_uint, 0x00002000);
pub const PBE_BLE5_REGDEF_IRQ_TXDONE_S = @as(c_uint, 13);
pub const PBE_BLE5_REGDEF_IRQ_TXDONE_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_TXDONE_ACTIVE = @as(c_uint, 0x00002000);
pub const PBE_BLE5_REGDEF_IRQ_TXACK = @as(c_uint, 0x00001000);
pub const PBE_BLE5_REGDEF_IRQ_TXACK_M = @as(c_uint, 0x00001000);
pub const PBE_BLE5_REGDEF_IRQ_TXACK_S = @as(c_uint, 12);
pub const PBE_BLE5_REGDEF_IRQ_TXACK_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_TXACK_ACTIVE = @as(c_uint, 0x00001000);
pub const PBE_BLE5_REGDEF_IRQ_TXRETRANS = @as(c_uint, 0x00000800);
pub const PBE_BLE5_REGDEF_IRQ_TXRETRANS_M = @as(c_uint, 0x00000800);
pub const PBE_BLE5_REGDEF_IRQ_TXRETRANS_S = @as(c_uint, 11);
pub const PBE_BLE5_REGDEF_IRQ_TXRETRANS_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_TXRETRANS_ACTIVE = @as(c_uint, 0x00000800);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED10 = @as(c_uint, 0x00000400);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED10_M = @as(c_uint, 0x00000400);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED10_S = @as(c_uint, 10);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED10_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED10_ACTIVE = @as(c_uint, 0x00000400);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED9 = @as(c_uint, 0x00000200);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED9_M = @as(c_uint, 0x00000200);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED9_S = @as(c_uint, 9);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED9_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED9_ACTIVE = @as(c_uint, 0x00000200);
pub const PBE_BLE5_REGDEF_IRQ_RXOK = @as(c_uint, 0x00000100);
pub const PBE_BLE5_REGDEF_IRQ_RXOK_M = @as(c_uint, 0x00000100);
pub const PBE_BLE5_REGDEF_IRQ_RXOK_S = @as(c_uint, 8);
pub const PBE_BLE5_REGDEF_IRQ_RXOK_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_RXOK_ACTIVE = @as(c_uint, 0x00000100);
pub const PBE_BLE5_REGDEF_IRQ_RXFOVFL = @as(c_uint, 0x00000080);
pub const PBE_BLE5_REGDEF_IRQ_RXFOVFL_M = @as(c_uint, 0x00000080);
pub const PBE_BLE5_REGDEF_IRQ_RXFOVFL_S = @as(c_uint, 7);
pub const PBE_BLE5_REGDEF_IRQ_RXFOVFL_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_RXFOVFL_ACTIVE = @as(c_uint, 0x00000080);
pub const PBE_BLE5_REGDEF_IRQ_RXEMPTY = @as(c_uint, 0x00000040);
pub const PBE_BLE5_REGDEF_IRQ_RXEMPTY_M = @as(c_uint, 0x00000040);
pub const PBE_BLE5_REGDEF_IRQ_RXEMPTY_S = @as(c_uint, 6);
pub const PBE_BLE5_REGDEF_IRQ_RXEMPTY_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_RXEMPTY_ACTIVE = @as(c_uint, 0x00000040);
pub const PBE_BLE5_REGDEF_IRQ_RXIGN = @as(c_uint, 0x00000020);
pub const PBE_BLE5_REGDEF_IRQ_RXIGN_M = @as(c_uint, 0x00000020);
pub const PBE_BLE5_REGDEF_IRQ_RXIGN_S = @as(c_uint, 5);
pub const PBE_BLE5_REGDEF_IRQ_RXIGN_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_RXIGN_ACTIVE = @as(c_uint, 0x00000020);
pub const PBE_BLE5_REGDEF_IRQ_RXNOK = @as(c_uint, 0x00000010);
pub const PBE_BLE5_REGDEF_IRQ_RXNOK_M = @as(c_uint, 0x00000010);
pub const PBE_BLE5_REGDEF_IRQ_RXNOK_S = @as(c_uint, 4);
pub const PBE_BLE5_REGDEF_IRQ_RXNOK_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_RXNOK_ACTIVE = @as(c_uint, 0x00000010);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED3 = @as(c_uint, 0x00000008);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED3_M = @as(c_uint, 0x00000008);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED3_S = @as(c_uint, 3);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED3_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED3_ACTIVE = @as(c_uint, 0x00000008);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED2 = @as(c_uint, 0x00000004);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED2_M = @as(c_uint, 0x00000004);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED2_S = @as(c_uint, 2);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED2_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_UNUSED2_ACTIVE = @as(c_uint, 0x00000004);
pub const PBE_BLE5_REGDEF_IRQ_PINGRSP = @as(c_uint, 0x00000002);
pub const PBE_BLE5_REGDEF_IRQ_PINGRSP_M = @as(c_uint, 0x00000002);
pub const PBE_BLE5_REGDEF_IRQ_PINGRSP_S = @as(c_uint, 1);
pub const PBE_BLE5_REGDEF_IRQ_PINGRSP_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_PINGRSP_ACTIVE = @as(c_uint, 0x00000002);
pub const PBE_BLE5_REGDEF_IRQ_OPDONE = @as(c_uint, 0x00000001);
pub const PBE_BLE5_REGDEF_IRQ_OPDONE_M = @as(c_uint, 0x00000001);
pub const PBE_BLE5_REGDEF_IRQ_OPDONE_S = @as(c_uint, 0);
pub const PBE_BLE5_REGDEF_IRQ_OPDONE_OFF = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_IRQ_OPDONE_ACTIVE = @as(c_uint, 0x00000001);
pub const PBE_BLE5_REGDEF_API_OP_W = @as(c_uint, 5);
pub const PBE_BLE5_REGDEF_API_OP_M = @as(c_uint, 0x0000001F);
pub const PBE_BLE5_REGDEF_API_OP_S = @as(c_uint, 0);
pub const PBE_BLE5_REGDEF_API_OP_PING = @as(c_uint, 0x00000000);
pub const PBE_BLE5_REGDEF_API_OP_STOP = @as(c_uint, 0x00000001);
pub const PBE_BLE5_REGDEF_API_OP_EOPSTOP = @as(c_uint, 0x00000002);
pub const PBE_BLE5_REGDEF_API_OP_PERIPHERAL = @as(c_uint, 0x00000003);
pub const PBE_BLE5_REGDEF_API_OP_CENTRAL = @as(c_uint, 0x00000004);
pub const PBE_BLE5_REGDEF_API_OP_ADV = @as(c_uint, 0x00000005);
pub const PBE_BLE5_REGDEF_API_OP_SCAN = @as(c_uint, 0x00000006);
pub const PBE_BLE5_REGDEF_API_OP_INITIATOR = @as(c_uint, 0x00000007);
pub const PBE_BLE5_REGDEF_API_OP_RXRAW = @as(c_uint, 0x00000008);
pub const PBE_BLE5_REGDEF_API_OP_TXRAW = @as(c_uint, 0x00000009);
pub const __PBE_COMMON_RAM_REGS_H = "";
pub const PBE_COMMON_RAM_O_CMDPAR0 = @as(c_uint, 0x00000000);
pub const PBE_COMMON_RAM_O_CMDPAR1 = @as(c_uint, 0x00000002);
pub const PBE_COMMON_RAM_O_MSGBOX = @as(c_uint, 0x00000004);
pub const PBE_COMMON_RAM_O_ENDCAUSE = @as(c_uint, 0x00000006);
pub const PBE_COMMON_RAM_O_FIFOCMDADD = @as(c_uint, 0x00000008);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_MSGBOX_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_MSGBOX_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_MSGBOX_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_W = @as(c_uint, 8);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_M = @as(c_uint, 0x00FF);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ENDOK = @as(c_uint, 0x0000);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_RXTIMEOUT = @as(c_uint, 0x0001);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_NOSYNC = @as(c_uint, 0x0002);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_RXERR = @as(c_uint, 0x0003);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_CONNECT = @as(c_uint, 0x0004);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_SCANRSP = @as(c_uint, 0x0006);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_MAXNAK = @as(c_uint, 0x0006);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_EOPSTOP = @as(c_uint, 0x0007);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_RXF = @as(c_uint, 0x00F9);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_TXF = @as(c_uint, 0x00FA);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_SYNTH = @as(c_uint, 0x00FB);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_STOP = @as(c_uint, 0x00FC);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_PAR = @as(c_uint, 0x00FD);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_BADOP = @as(c_uint, 0x00FE);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_INTERNAL = @as(c_uint, 0x00FF);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_S = @as(c_uint, 0);
pub const __PBE_GENERIC_RAM_REGS_H = "";
pub const PBE_GENERIC_RAM_O_PHY = @as(c_uint, 0x00000020);
pub const PBE_GENERIC_RAM_O_SYNTHCALTIMEOUT = @as(c_uint, 0x00000022);
pub const PBE_GENERIC_RAM_O_PKTCFG = @as(c_uint, 0x00000024);
pub const PBE_GENERIC_RAM_O_NUMCRCBITS = @as(c_uint, 0x00000026);
pub const PBE_GENERIC_RAM_O_FIFOCFG = @as(c_uint, 0x00000028);
pub const PBE_GENERIC_RAM_O_EXTRABYTES = @as(c_uint, 0x0000002A);
pub const PBE_GENERIC_RAM_O_WHITEINIT = @as(c_uint, 0x0000002C);
pub const PBE_GENERIC_RAM_O_CRCINITL = @as(c_uint, 0x00000030);
pub const PBE_GENERIC_RAM_O_CRCINITH = @as(c_uint, 0x00000032);
pub const PBE_GENERIC_RAM_O_LENCFG = @as(c_uint, 0x00000034);
pub const PBE_GENERIC_RAM_O_LENOFFSET = @as(c_uint, 0x00000036);
pub const PBE_GENERIC_RAM_O_FIRSTRXTIMEOUT = @as(c_uint, 0x00000038);
pub const PBE_GENERIC_RAM_O_RXTIMEOUT = @as(c_uint, 0x0000003A);
pub const PBE_GENERIC_RAM_O_RFINTERVAL = @as(c_uint, 0x0000003C);
pub const PBE_GENERIC_RAM_O_PRETXIFS = @as(c_uint, 0x0000003E);
pub const PBE_GENERIC_RAM_O_PRERXIFS = @as(c_uint, 0x00000040);
pub const PBE_GENERIC_RAM_O_OPCFG = @as(c_uint, 0x00000042);
pub const PBE_GENERIC_RAM_O_MAXLEN = @as(c_uint, 0x00000044);
pub const PBE_GENERIC_RAM_O_PATTERN = @as(c_uint, 0x00000046);
pub const PBE_GENERIC_RAM_O_ADDRCFG = @as(c_uint, 0x00000048);
pub const PBE_GENERIC_RAM_O_ADDRSW = @as(c_uint, 0x0000004A);
pub const PBE_GENERIC_RAM_O_TESTCFG = @as(c_uint, 0x0000004C);
pub const PBE_GENERIC_RAM_O_TESTAPI = @as(c_uint, 0x0000004E);
pub const PBE_GENERIC_RAM_O_TESTTIMEOUT = @as(c_uint, 0x00000050);
pub const PBE_GENERIC_RAM_O_ADD0 = @as(c_uint, 0x00000054);
pub const PBE_GENERIC_RAM_O_ADD1 = @as(c_uint, 0x00000056);
pub const PBE_GENERIC_RAM_O_ADD2 = @as(c_uint, 0x00000058);
pub const PBE_GENERIC_RAM_O_ADD3 = @as(c_uint, 0x0000005A);
pub const PBE_GENERIC_RAM_O_ADD4 = @as(c_uint, 0x0000005C);
pub const PBE_GENERIC_RAM_O_ADD5 = @as(c_uint, 0x0000005E);
pub const PBE_GENERIC_RAM_O_ADD6 = @as(c_uint, 0x00000060);
pub const PBE_GENERIC_RAM_O_ADD7 = @as(c_uint, 0x00000062);
pub const PBE_GENERIC_RAM_O_ADD8 = @as(c_uint, 0x00000064);
pub const PBE_GENERIC_RAM_O_ADD9 = @as(c_uint, 0x00000066);
pub const PBE_GENERIC_RAM_O_ADD10 = @as(c_uint, 0x00000068);
pub const PBE_GENERIC_RAM_O_ADD11 = @as(c_uint, 0x0000006A);
pub const PBE_GENERIC_RAM_O_ADD12 = @as(c_uint, 0x0000006C);
pub const PBE_GENERIC_RAM_O_ADD13 = @as(c_uint, 0x0000006E);
pub const PBE_GENERIC_RAM_O_ADD15 = @as(c_uint, 0x00000070);
pub const PBE_GENERIC_RAM_O_NRXNOK = @as(c_uint, 0x00000072);
pub const PBE_GENERIC_RAM_O_NRXIGNORED = @as(c_uint, 0x00000074);
pub const PBE_GENERIC_RAM_O_NRXEMPTY = @as(c_uint, 0x00000076);
pub const PBE_GENERIC_RAM_O_NRXFIFOFULL = @as(c_uint, 0x00000078);
pub const PBE_GENERIC_RAM_O_NRXOK = @as(c_uint, 0x0000007A);
pub const PBE_GENERIC_RAM_O_NTX = @as(c_uint, 0x0000007C);
pub const PBE_GENERIC_RAM_O_NRXTIMEOUT = @as(c_uint, 0x0000007E);
pub const PBE_GENERIC_RAM_O_LASTRSSI = @as(c_uint, 0x00000080);
pub const PBE_GENERIC_RAM_O_LASTFREQOFF = @as(c_uint, 0x00000082);
pub const PBE_GENERIC_RAM_O_LASTLQI = @as(c_uint, 0x00000084);
pub const PBE_GENERIC_RAM_O_LASTTIMESTAMPL = @as(c_uint, 0x00000088);
pub const PBE_GENERIC_RAM_O_LASTTIMESTAMPH = @as(c_uint, 0x0000008A);
pub const PBE_GENERIC_RAM_O_PEERADRINFO = @as(c_uint, 0x0000008C);
pub const PBE_GENERIC_RAM_O_PEERADR1AL = @as(c_uint, 0x0000008E);
pub const PBE_GENERIC_RAM_O_PEERADR1AH = @as(c_uint, 0x00000090);
pub const PBE_GENERIC_RAM_O_PEERADR0AL = @as(c_uint, 0x00000092);
pub const PBE_GENERIC_RAM_O_PEERADR0AH = @as(c_uint, 0x00000094);
pub const PBE_GENERIC_RAM_O_PEERADR1BL = @as(c_uint, 0x00000096);
pub const PBE_GENERIC_RAM_O_PEERADR1BH = @as(c_uint, 0x00000098);
pub const PBE_GENERIC_RAM_O_PEERADR0BL = @as(c_uint, 0x0000009A);
pub const PBE_GENERIC_RAM_O_PEERADR0BH = @as(c_uint, 0x0000009C);
pub const PBE_GENERIC_RAM_O_NESB = @as(c_uint, 0x0000009E);
pub const PBE_GENERIC_RAM_O_CRCVAL0 = @as(c_uint, 0x000000A0);
pub const PBE_GENERIC_RAM_O_SEQSTAT0 = @as(c_uint, 0x000000A2);
pub const PBE_GENERIC_RAM_O_CRCVAL1 = @as(c_uint, 0x000000A4);
pub const PBE_GENERIC_RAM_O_SEQSTAT1 = @as(c_uint, 0x000000A6);
pub const PBE_GENERIC_RAM_O_STATUSBYTE = @as(c_uint, 0x000000A8);
pub const PBE_GENERIC_RAM_O_TMPBYTE1 = @as(c_uint, 0x000000AA);
pub const PBE_GENERIC_RAM_O_TMPBYTE2 = @as(c_uint, 0x000000AC);
pub const PBE_GENERIC_RAM_O_TMPBYTE3 = @as(c_uint, 0x000000AE);
pub const PBE_GENERIC_RAM_O_TMPBYTE4 = @as(c_uint, 0x000000B0);
pub const PBE_GENERIC_RAM_O_TMPRSSI = @as(c_uint, 0x000000B2);
pub const PBE_GENERIC_RAM_O_TMPADR1 = @as(c_uint, 0x000000B4);
pub const PBE_GENERIC_RAM_O_TMPADR2 = @as(c_uint, 0x000000B6);
pub const PBE_GENERIC_RAM_O_TMPADR3 = @as(c_uint, 0x000000B8);
pub const PBE_GENERIC_RAM_O_TMPADR4 = @as(c_uint, 0x000000BA);
pub const PBE_GENERIC_RAM_PHY_RFESEL_W = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_PHY_RFESEL_M = @as(c_uint, 0x0038);
pub const PBE_GENERIC_RAM_PHY_RFESEL_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_PHY_RFESEL_1M = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_PHY_RFESEL_2M = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_PHY_RFESEL_CODED_125K = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_PHY_RFESEL_CODED_500K = @as(c_uint, 0x0018);
pub const PBE_GENERIC_RAM_PHY_MCESEL_W = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_PHY_MCESEL_M = @as(c_uint, 0x0007);
pub const PBE_GENERIC_RAM_PHY_MCESEL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PHY_MCESEL_1M = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_PHY_MCESEL_2M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_PHY_MCESEL_CODED_125K = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_PHY_MCESEL_CODED_500K = @as(c_uint, 0x0003);
pub const PBE_GENERIC_RAM_SYNTHCALTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_SYNTHCALTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_SYNTHCALTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PKTCFG_WHITEORDER = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_PKTCFG_WHITEORDER_M = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_PKTCFG_WHITEORDER_S = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_PKTCFG_CRCORDER = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_PKTCFG_CRCORDER_M = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_PKTCFG_CRCORDER_S = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_PKTCFG_BITORDER = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_PKTCFG_BITORDER_M = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_PKTCFG_BITORDER_S = @as(c_uint, 9);
pub const PBE_GENERIC_RAM_PKTCFG_HDRORDER = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_PKTCFG_HDRORDER_M = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_PKTCFG_HDRORDER_S = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCHDR = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCHDR_M = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCHDR_S = @as(c_uint, 7);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCSW = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCSW_M = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_PKTCFG_CRCINCSW_S = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_PKTCFG_NUMHDRBITS_W = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_PKTCFG_NUMHDRBITS_M = @as(c_uint, 0x003F);
pub const PBE_GENERIC_RAM_PKTCFG_NUMHDRBITS_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NUMCRCBITS_VAL_W = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_NUMCRCBITS_VAL_M = @as(c_uint, 0x003F);
pub const PBE_GENERIC_RAM_NUMCRCBITS_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDTIMESTAMP = @as(c_uint, 0x8000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDTIMESTAMP_M = @as(c_uint, 0x8000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDTIMESTAMP_S = @as(c_uint, 15);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDRSSI = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDRSSI_M = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDRSSI_S = @as(c_uint, 14);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDFREQEST = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDFREQEST_M = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDFREQEST_S = @as(c_uint, 13);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDLQI = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDLQI_M = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDLQI_S = @as(c_uint, 12);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDSTATUS = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDSTATUS_M = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDSTATUS_S = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDCRC = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDCRC_M = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_FIFOCFG_APPENDCRC_S = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHEMPTY = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHEMPTY_M = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHEMPTY_S = @as(c_uint, 9);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHEMPTY_KEEP = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHEMPTY_FLUSH = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHIGN = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHIGN_M = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHIGN_S = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHIGN_KEEP = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHIGN_FLUSH = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHCRC = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHCRC_M = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHCRC_S = @as(c_uint, 7);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHCRC_KEEP = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_FIFOCFG_AUTOFLUSHCRC_FLUSH = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_FIFOCFG_LENOPTPAD_W = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_FIFOCFG_LENOPTPAD_M = @as(c_uint, 0x0070);
pub const PBE_GENERIC_RAM_FIFOCFG_LENOPTPAD_S = @as(c_uint, 4);
pub const PBE_GENERIC_RAM_EXTRABYTES_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_EXTRABYTES_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_EXTRABYTES_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_WHITEINIT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_WHITEINIT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_WHITEINIT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_CRCINITL_VALLSB_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_CRCINITL_VALLSB_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_CRCINITL_VALLSB_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_CRCINITH_VALMSB_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_CRCINITH_VALMSB_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_CRCINITH_VALMSB_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LENCFG_RESERVED_W = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_LENCFG_RESERVED_M = @as(c_uint, 0xFC00);
pub const PBE_GENERIC_RAM_LENCFG_RESERVED_S = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_LENCFG_NUMLENBITS_W = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_LENCFG_NUMLENBITS_M = @as(c_uint, 0x03E0);
pub const PBE_GENERIC_RAM_LENCFG_NUMLENBITS_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_LENCFG_NUMLENBITS_FIXED = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_LENCFG_LENPOS_W = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_LENCFG_LENPOS_M = @as(c_uint, 0x001F);
pub const PBE_GENERIC_RAM_LENCFG_LENPOS_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LENOFFSET_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LENOFFSET_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LENOFFSET_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_FIRSTRXTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_FIRSTRXTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_FIRSTRXTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_RXTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_RXTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_RXTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_RFINTERVAL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_RFINTERVAL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_RFINTERVAL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PRETXIFS_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PRETXIFS_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PRETXIFS_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PRERXIFS_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PRERXIFS_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PRERXIFS_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_OPCFG_RXFILTEROP = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_OPCFG_RXFILTEROP_M = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_OPCFG_RXFILTEROP_S = @as(c_uint, 14);
pub const PBE_GENERIC_RAM_OPCFG_RXINCLUDEHDR = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_OPCFG_RXINCLUDEHDR_M = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_OPCFG_RXINCLUDEHDR_S = @as(c_uint, 13);
pub const PBE_GENERIC_RAM_OPCFG_RXINCLUDEHDR_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_RXINCLUDEHDR_YES = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATOK = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATOK_M = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATOK_S = @as(c_uint, 12);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATOK_YES = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATOK_NO = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATNOK = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATNOK_M = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATNOK_S = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATNOK_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_RXREPEATNOK_YES = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_OPCFG_TXINFINITE = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_OPCFG_TXINFINITE_M = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_OPCFG_TXINFINITE_S = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_OPCFG_TXINFINITE_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_TXINFINITE_YES = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_OPCFG_TXPATTERN = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_OPCFG_TXPATTERN_M = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_OPCFG_TXPATTERN_S = @as(c_uint, 9);
pub const PBE_GENERIC_RAM_OPCFG_TXPATTERN_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_TXPATTERN_YES = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_M = @as(c_uint, 0x0180);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_S = @as(c_uint, 7);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_NONE = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_RETRY = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_OPCFG_TXFCMD_DEALLOC = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_OPCFG_START = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_OPCFG_START_M = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_OPCFG_START_S = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_OPCFG_FS_NOCAL = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_OPCFG_FS_NOCAL_M = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_OPCFG_FS_NOCAL_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_OPCFG_FS_NOCAL_CAL = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_FS_NOCAL_NOCAL = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_OPCFG_FS_KEEPON = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_OPCFG_FS_KEEPON_M = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_OPCFG_FS_KEEPON_S = @as(c_uint, 4);
pub const PBE_GENERIC_RAM_OPCFG_FS_KEEPON_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_FS_KEEPON_YES = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_OPCFG_NEXTOP = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_OPCFG_NEXTOP_M = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_OPCFG_NEXTOP_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_OPCFG_NEXTOP_SWITCH = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_NEXTOP_SAME = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_OPCFG_SINGLE = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_OPCFG_SINGLE_M = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_OPCFG_SINGLE_S = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_OPCFG_SINGLE_DIS = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_SINGLE_EN = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_OPCFG_IFSPERIOD = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_OPCFG_IFSPERIOD_M = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_OPCFG_IFSPERIOD_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_OPCFG_IFSPERIOD_DIS = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_IFSPERIOD_EN = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_OPCFG_RFINTERVAL = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_OPCFG_RFINTERVAL_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_OPCFG_RFINTERVAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_OPCFG_RFINTERVAL_DIS = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_OPCFG_RFINTERVAL_EN = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_MAXLEN_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_MAXLEN_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_MAXLEN_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PATTERN_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PATTERN_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PATTERN_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADDRCFG_NUMADDR_W = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_ADDRCFG_NUMADDR_M = @as(c_uint, 0xF800);
pub const PBE_GENERIC_RAM_ADDRCFG_NUMADDR_S = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRPOS_W = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRPOS_M = @as(c_uint, 0x07C0);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRPOS_S = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRSZ_W = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRSZ_M = @as(c_uint, 0x003E);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRSZ_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRTYPE = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRTYPE_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_ADDRCFG_ADDRTYPE_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADDRSW_ADD15SW = @as(c_uint, 0x8000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD15SW_M = @as(c_uint, 0x8000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD15SW_S = @as(c_uint, 15);
pub const PBE_GENERIC_RAM_ADDRSW_ADD15SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD15SW_B = @as(c_uint, 0x8000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD14SW = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD14SW_M = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD14SW_S = @as(c_uint, 14);
pub const PBE_GENERIC_RAM_ADDRSW_ADD14SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD14SW_B = @as(c_uint, 0x4000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD13SW = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD13SW_M = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD13SW_S = @as(c_uint, 13);
pub const PBE_GENERIC_RAM_ADDRSW_ADD13SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD13SW_B = @as(c_uint, 0x2000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD12SW = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD12SW_M = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD12SW_S = @as(c_uint, 12);
pub const PBE_GENERIC_RAM_ADDRSW_ADD12SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD12SW_B = @as(c_uint, 0x1000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD11SW = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_ADDRSW_ADD11SW_M = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_ADDRSW_ADD11SW_S = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_ADDRSW_ADD11SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD11SW_B = @as(c_uint, 0x0800);
pub const PBE_GENERIC_RAM_ADDRSW_ADD10SW = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_ADDRSW_ADD10SW_M = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_ADDRSW_ADD10SW_S = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_ADDRSW_ADD10SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD10SW_B = @as(c_uint, 0x0400);
pub const PBE_GENERIC_RAM_ADDRSW_ADD9SW = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_ADDRSW_ADD9SW_M = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_ADDRSW_ADD9SW_S = @as(c_uint, 9);
pub const PBE_GENERIC_RAM_ADDRSW_ADD9SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD9SW_B = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_ADDRSW_ADD8SW = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_ADDRSW_ADD8SW_M = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_ADDRSW_ADD8SW_S = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_ADDRSW_ADD8SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD8SW_B = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_ADDRSW_ADD7SW = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_ADDRSW_ADD7SW_M = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_ADDRSW_ADD7SW_S = @as(c_uint, 7);
pub const PBE_GENERIC_RAM_ADDRSW_ADD7SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD7SW_B = @as(c_uint, 0x0080);
pub const PBE_GENERIC_RAM_ADDRSW_ADD6SW = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_ADDRSW_ADD6SW_M = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_ADDRSW_ADD6SW_S = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_ADDRSW_ADD6SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD6SW_B = @as(c_uint, 0x0040);
pub const PBE_GENERIC_RAM_ADDRSW_ADD5SW = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_ADDRSW_ADD5SW_M = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_ADDRSW_ADD5SW_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_ADDRSW_ADD5SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD5SW_B = @as(c_uint, 0x0020);
pub const PBE_GENERIC_RAM_ADDRSW_ADD4SW = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_ADDRSW_ADD4SW_M = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_ADDRSW_ADD4SW_S = @as(c_uint, 4);
pub const PBE_GENERIC_RAM_ADDRSW_ADD4SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD4SW_B = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_ADDRSW_ADD3SW = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_ADDRSW_ADD3SW_M = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_ADDRSW_ADD3SW_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_ADDRSW_ADD3SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD3SW_B = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_ADDRSW_ADD2SW = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_ADDRSW_ADD2SW_M = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_ADDRSW_ADD2SW_S = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_ADDRSW_ADD2SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD2SW_B = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_ADDRSW_ADD1SW = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_ADDRSW_ADD1SW_M = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_ADDRSW_ADD1SW_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_ADDRSW_ADD1SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD1SW_B = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_ADDRSW_ADD0SW = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_ADDRSW_ADD0SW_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_ADDRSW_ADD0SW_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADDRSW_ADD0SW_A = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_ADDRSW_ADD0SW_B = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_M = @as(c_uint, 0x0300);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_S = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_NEVER = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_MDMRFE = @as(c_uint, 0x0100);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_TIMEOUT = @as(c_uint, 0x0200);
pub const PBE_GENERIC_RAM_TESTCFG_ENDCOND_TIMEOUT_DONE = @as(c_uint, 0x0300);
pub const PBE_GENERIC_RAM_TESTCFG_RESERVED1_W = @as(c_uint, 7);
pub const PBE_GENERIC_RAM_TESTCFG_RESERVED1_M = @as(c_uint, 0x00FE);
pub const PBE_GENERIC_RAM_TESTCFG_RESERVED1_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_TESTCFG_START = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_TESTCFG_START_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_TESTCFG_START_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TESTCFG_START_SYNC = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_TESTCFG_START_ASYNC = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_TESTAPI_MDMAPI_W = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_TESTAPI_MDMAPI_M = @as(c_uint, 0xFF00);
pub const PBE_GENERIC_RAM_TESTAPI_MDMAPI_S = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_TESTAPI_RFEAPI_W = @as(c_uint, 8);
pub const PBE_GENERIC_RAM_TESTAPI_RFEAPI_M = @as(c_uint, 0x00FF);
pub const PBE_GENERIC_RAM_TESTAPI_RFEAPI_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TESTTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TESTTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TESTTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD0_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD0_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD1_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD1_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD2_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD2_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD3_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD3_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD4_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD4_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD5_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD5_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD5_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD6_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD6_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD6_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD7_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD7_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD7_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD8_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD8_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD8_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD9_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD9_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD9_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD10_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD10_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD10_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD11_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD11_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD11_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD12_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD12_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD12_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD13_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD13_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD13_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_ADD15_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_ADD15_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_ADD15_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXNOK_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXNOK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXNOK_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXIGNORED_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXIGNORED_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXIGNORED_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXEMPTY_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXEMPTY_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXEMPTY_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXFIFOFULL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXFIFOFULL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXFIFOFULL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXOK_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXOK_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXOK_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NTX_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NTX_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NTX_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NRXTIMEOUT_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_NRXTIMEOUT_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_NRXTIMEOUT_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LASTRSSI_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LASTRSSI_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LASTRSSI_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LASTFREQOFF_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LASTFREQOFF_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LASTFREQOFF_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LASTLQI_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LASTLQI_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LASTLQI_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPH_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_LASTTIMESTAMPH_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADRINFO_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADRINFO_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADRINFO_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR1AL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR1AL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR1AL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR1AH_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR1AH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR1AH_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR0AL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR0AL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR0AL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR0AH_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR0AH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR0AH_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR1BL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR1BL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR1BL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR1BH_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR1BH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR1BH_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR0BL_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR0BL_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR0BL_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_PEERADR0BH_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_PEERADR0BH_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_PEERADR0BH_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_NESB_RESERVED_W = @as(c_uint, 10);
pub const PBE_GENERIC_RAM_NESB_RESERVED_M = @as(c_uint, 0xFFC0);
pub const PBE_GENERIC_RAM_NESB_RESERVED_S = @as(c_uint, 6);
pub const PBE_GENERIC_RAM_NESB_PEERADRLEN_W = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_NESB_PEERADRLEN_M = @as(c_uint, 0x0038);
pub const PBE_GENERIC_RAM_NESB_PEERADRLEN_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_NESB_NESBMODE = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_NESB_NESBMODE_M = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_NESB_NESBMODE_S = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_NESB_NESBMODE_OFF = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_NESB_NESBMODE_ON = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_CRCVAL0_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_CRCVAL0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_CRCVAL0_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_SEQSTAT0_RESERVED_W = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_SEQSTAT0_RESERVED_M = @as(c_uint, 0xFFE0);
pub const PBE_GENERIC_RAM_SEQSTAT0_RESERVED_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_M = @as(c_uint, 0x0018);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_ALWAYS = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_POSNOA = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_NEGNOA = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_SEQSTAT0_STOPAUTO_NEVER = @as(c_uint, 0x0018);
pub const PBE_GENERIC_RAM_SEQSTAT0_PID_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_SEQSTAT0_PID_M = @as(c_uint, 0x0006);
pub const PBE_GENERIC_RAM_SEQSTAT0_PID_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_SEQSTAT0_VALID = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_SEQSTAT0_VALID_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_SEQSTAT0_VALID_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_SEQSTAT0_VALID_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_SEQSTAT0_VALID_YES = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_CRCVAL1_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_CRCVAL1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_CRCVAL1_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_SEQSTAT1_RESERVED_W = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_SEQSTAT1_RESERVED_M = @as(c_uint, 0xFFE0);
pub const PBE_GENERIC_RAM_SEQSTAT1_RESERVED_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_M = @as(c_uint, 0x0018);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_ALWAYS = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_POSNOA = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_NEGNOA = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_SEQSTAT1_STOPAUTO_NEVER = @as(c_uint, 0x0018);
pub const PBE_GENERIC_RAM_SEQSTAT1_PID_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_SEQSTAT1_PID_M = @as(c_uint, 0x0006);
pub const PBE_GENERIC_RAM_SEQSTAT1_PID_S = @as(c_uint, 1);
pub const PBE_GENERIC_RAM_SEQSTAT1_VALID = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_SEQSTAT1_VALID_M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_SEQSTAT1_VALID_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_SEQSTAT1_VALID_NO = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_SEQSTAT1_VALID_YES = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_STATUSBYTE_RESERVED_W = @as(c_uint, 11);
pub const PBE_GENERIC_RAM_STATUSBYTE_RESERVED_M = @as(c_uint, 0xFFE0);
pub const PBE_GENERIC_RAM_STATUSBYTE_RESERVED_S = @as(c_uint, 5);
pub const PBE_GENERIC_RAM_STATUSBYTE_SWSEL = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_STATUSBYTE_SWSEL_M = @as(c_uint, 0x0010);
pub const PBE_GENERIC_RAM_STATUSBYTE_SWSEL_S = @as(c_uint, 4);
pub const PBE_GENERIC_RAM_STATUSBYTE_IGNORED = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_STATUSBYTE_IGNORED_M = @as(c_uint, 0x0008);
pub const PBE_GENERIC_RAM_STATUSBYTE_IGNORED_S = @as(c_uint, 3);
pub const PBE_GENERIC_RAM_STATUSBYTE_CRCERROR = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_STATUSBYTE_CRCERROR_M = @as(c_uint, 0x0004);
pub const PBE_GENERIC_RAM_STATUSBYTE_CRCERROR_S = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_W = @as(c_uint, 2);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_M = @as(c_uint, 0x0003);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_1M = @as(c_uint, 0x0000);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_2M = @as(c_uint, 0x0001);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_CODED_125K = @as(c_uint, 0x0002);
pub const PBE_GENERIC_RAM_STATUSBYTE_PHY_CODED_500K = @as(c_uint, 0x0003);
pub const PBE_GENERIC_RAM_TMPBYTE1_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPBYTE1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPBYTE1_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPBYTE2_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPBYTE2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPBYTE2_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPBYTE3_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPBYTE3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPBYTE3_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPBYTE4_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPBYTE4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPBYTE4_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPRSSI_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPRSSI_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPRSSI_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPADR1_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPADR1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPADR1_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPADR2_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPADR2_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPADR2_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPADR3_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPADR3_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPADR3_VAL_S = @as(c_uint, 0);
pub const PBE_GENERIC_RAM_TMPADR4_VAL_W = @as(c_uint, 16);
pub const PBE_GENERIC_RAM_TMPADR4_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_GENERIC_RAM_TMPADR4_VAL_S = @as(c_uint, 0);
pub const __PBE_GENERIC_REGDEF_REGS_H = "";
pub const PBE_GENERIC_REGDEF_O_IRQ = @as(c_uint, 0x00000010);
pub const PBE_GENERIC_REGDEF_O_API = @as(c_uint, 0x00000030);
pub const PBE_GENERIC_REGDEF_IRQ_OPERROR = @as(c_uint, 0x00008000);
pub const PBE_GENERIC_REGDEF_IRQ_OPERROR_M = @as(c_uint, 0x00008000);
pub const PBE_GENERIC_REGDEF_IRQ_OPERROR_S = @as(c_uint, 15);
pub const PBE_GENERIC_REGDEF_IRQ_OPERROR_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_OPERROR_ACTIVE = @as(c_uint, 0x00008000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED14 = @as(c_uint, 0x00004000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED14_M = @as(c_uint, 0x00004000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED14_S = @as(c_uint, 14);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED14_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED14_ACTIVE = @as(c_uint, 0x00004000);
pub const PBE_GENERIC_REGDEF_IRQ_TXDONE = @as(c_uint, 0x00002000);
pub const PBE_GENERIC_REGDEF_IRQ_TXDONE_M = @as(c_uint, 0x00002000);
pub const PBE_GENERIC_REGDEF_IRQ_TXDONE_S = @as(c_uint, 13);
pub const PBE_GENERIC_REGDEF_IRQ_TXDONE_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_TXDONE_ACTIVE = @as(c_uint, 0x00002000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED12 = @as(c_uint, 0x00001000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED12_M = @as(c_uint, 0x00001000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED12_S = @as(c_uint, 12);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED12_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED12_ACTIVE = @as(c_uint, 0x00001000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED11 = @as(c_uint, 0x00000800);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED11_M = @as(c_uint, 0x00000800);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED11_S = @as(c_uint, 11);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED11_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED11_ACTIVE = @as(c_uint, 0x00000800);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED10 = @as(c_uint, 0x00000400);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED10_M = @as(c_uint, 0x00000400);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED10_S = @as(c_uint, 10);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED10_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED10_ACTIVE = @as(c_uint, 0x00000400);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED9 = @as(c_uint, 0x00000200);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED9_M = @as(c_uint, 0x00000200);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED9_S = @as(c_uint, 9);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED9_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED9_ACTIVE = @as(c_uint, 0x00000200);
pub const PBE_GENERIC_REGDEF_IRQ_RXOK = @as(c_uint, 0x00000100);
pub const PBE_GENERIC_REGDEF_IRQ_RXOK_M = @as(c_uint, 0x00000100);
pub const PBE_GENERIC_REGDEF_IRQ_RXOK_S = @as(c_uint, 8);
pub const PBE_GENERIC_REGDEF_IRQ_RXOK_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_RXOK_ACTIVE = @as(c_uint, 0x00000100);
pub const PBE_GENERIC_REGDEF_IRQ_RXFOVFL = @as(c_uint, 0x00000080);
pub const PBE_GENERIC_REGDEF_IRQ_RXFOVFL_M = @as(c_uint, 0x00000080);
pub const PBE_GENERIC_REGDEF_IRQ_RXFOVFL_S = @as(c_uint, 7);
pub const PBE_GENERIC_REGDEF_IRQ_RXFOVFL_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_RXFOVFL_ACTIVE = @as(c_uint, 0x00000080);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED6 = @as(c_uint, 0x00000040);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED6_M = @as(c_uint, 0x00000040);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED6_S = @as(c_uint, 6);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED6_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED6_ACTIVE = @as(c_uint, 0x00000040);
pub const PBE_GENERIC_REGDEF_IRQ_RXIGN = @as(c_uint, 0x00000020);
pub const PBE_GENERIC_REGDEF_IRQ_RXIGN_M = @as(c_uint, 0x00000020);
pub const PBE_GENERIC_REGDEF_IRQ_RXIGN_S = @as(c_uint, 5);
pub const PBE_GENERIC_REGDEF_IRQ_RXIGN_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_RXIGN_ACTIVE = @as(c_uint, 0x00000020);
pub const PBE_GENERIC_REGDEF_IRQ_RXNOK = @as(c_uint, 0x00000010);
pub const PBE_GENERIC_REGDEF_IRQ_RXNOK_M = @as(c_uint, 0x00000010);
pub const PBE_GENERIC_REGDEF_IRQ_RXNOK_S = @as(c_uint, 4);
pub const PBE_GENERIC_REGDEF_IRQ_RXNOK_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_RXNOK_ACTIVE = @as(c_uint, 0x00000010);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED3 = @as(c_uint, 0x00000008);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED3_M = @as(c_uint, 0x00000008);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED3_S = @as(c_uint, 3);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED3_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED3_ACTIVE = @as(c_uint, 0x00000008);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED2 = @as(c_uint, 0x00000004);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED2_M = @as(c_uint, 0x00000004);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED2_S = @as(c_uint, 2);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED2_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_UNUSED2_ACTIVE = @as(c_uint, 0x00000004);
pub const PBE_GENERIC_REGDEF_IRQ_PINGRSP = @as(c_uint, 0x00000002);
pub const PBE_GENERIC_REGDEF_IRQ_PINGRSP_M = @as(c_uint, 0x00000002);
pub const PBE_GENERIC_REGDEF_IRQ_PINGRSP_S = @as(c_uint, 1);
pub const PBE_GENERIC_REGDEF_IRQ_PINGRSP_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_PINGRSP_ACTIVE = @as(c_uint, 0x00000002);
pub const PBE_GENERIC_REGDEF_IRQ_OPDONE = @as(c_uint, 0x00000001);
pub const PBE_GENERIC_REGDEF_IRQ_OPDONE_M = @as(c_uint, 0x00000001);
pub const PBE_GENERIC_REGDEF_IRQ_OPDONE_S = @as(c_uint, 0);
pub const PBE_GENERIC_REGDEF_IRQ_OPDONE_OFF = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_IRQ_OPDONE_ACTIVE = @as(c_uint, 0x00000001);
pub const PBE_GENERIC_REGDEF_API_OP_W = @as(c_uint, 5);
pub const PBE_GENERIC_REGDEF_API_OP_M = @as(c_uint, 0x0000001F);
pub const PBE_GENERIC_REGDEF_API_OP_S = @as(c_uint, 0);
pub const PBE_GENERIC_REGDEF_API_OP_PING = @as(c_uint, 0x00000000);
pub const PBE_GENERIC_REGDEF_API_OP_STOP = @as(c_uint, 0x00000001);
pub const PBE_GENERIC_REGDEF_API_OP_EOPSTOP = @as(c_uint, 0x00000002);
pub const PBE_GENERIC_REGDEF_API_OP_TX = @as(c_uint, 0x00000010);
pub const PBE_GENERIC_REGDEF_API_OP_RX = @as(c_uint, 0x00000011);
pub const PBE_GENERIC_REGDEF_API_OP_FS = @as(c_uint, 0x00000012);
pub const PBE_GENERIC_REGDEF_API_OP_STOPFS = @as(c_uint, 0x00000013);
pub const __RFE_COMMON_RAM_REGS_H = "";
pub const RFE_COMMON_RAM_O_SYNTHCTL = @as(c_uint, 0x00000804);
pub const RFE_COMMON_RAM_O_TDCCAL0 = @as(c_uint, 0x00000806);
pub const RFE_COMMON_RAM_O_TDCCAL1 = @as(c_uint, 0x00000808);
pub const RFE_COMMON_RAM_O_TDCCAL2 = @as(c_uint, 0x0000080A);
pub const RFE_COMMON_RAM_O_TDCPLL = @as(c_uint, 0x0000080C);
pub const RFE_COMMON_RAM_O_K1LSB = @as(c_uint, 0x0000080E);
pub const RFE_COMMON_RAM_O_K1MSB = @as(c_uint, 0x00000810);
pub const RFE_COMMON_RAM_O_K2BL = @as(c_uint, 0x00000812);
pub const RFE_COMMON_RAM_O_K2AL = @as(c_uint, 0x00000814);
pub const RFE_COMMON_RAM_O_K3BL = @as(c_uint, 0x00000816);
pub const RFE_COMMON_RAM_O_K3AL = @as(c_uint, 0x00000818);
pub const RFE_COMMON_RAM_O_K5 = @as(c_uint, 0x0000081A);
pub const RFE_COMMON_RAM_O_RXIF = @as(c_uint, 0x0000081C);
pub const RFE_COMMON_RAM_O_TXIF = @as(c_uint, 0x0000081E);
pub const RFE_COMMON_RAM_O_RTRIMOFF = @as(c_uint, 0x00000820);
pub const RFE_COMMON_RAM_O_RTRIMMIN = @as(c_uint, 0x00000822);
pub const RFE_COMMON_RAM_O_DIVI = @as(c_uint, 0x00000824);
pub const RFE_COMMON_RAM_O_DIVF = @as(c_uint, 0x00000826);
pub const RFE_COMMON_RAM_O_DIVLDOI = @as(c_uint, 0x00000828);
pub const RFE_COMMON_RAM_O_DIVLDOF = @as(c_uint, 0x0000082A);
pub const RFE_COMMON_RAM_O_DIVLDOIOFF = @as(c_uint, 0x0000082C);
pub const RFE_COMMON_RAM_O_LDOSETTLE = @as(c_uint, 0x0000082E);
pub const RFE_COMMON_RAM_O_CHRGSETTLE = @as(c_uint, 0x00000830);
pub const RFE_COMMON_RAM_O_DCOSETTLE = @as(c_uint, 0x00000832);
pub const RFE_COMMON_RAM_O_IFAMPRFLDOTX = @as(c_uint, 0x00000834);
pub const RFE_COMMON_RAM_O_IFAMPRFLDODEFAULT = @as(c_uint, 0x00000836);
pub const RFE_COMMON_RAM_O_LFKIBL = @as(c_uint, 0x00000838);
pub const RFE_COMMON_RAM_O_LFKPBL = @as(c_uint, 0x0000083A);
pub const RFE_COMMON_RAM_O_IKT = @as(c_uint, 0x0000083C);
pub const RFE_COMMON_RAM_O_PHYRSSIOFFSET = @as(c_uint, 0x0000083E);
pub const RFE_COMMON_RAM_O_SPARE0SHADOW = @as(c_uint, 0x00000840);
pub const RFE_COMMON_RAM_O_SPARE1SHADOW = @as(c_uint, 0x00000842);
pub const RFE_COMMON_RAM_O_AGCINFO = @as(c_uint, 0x00000844);
pub const RFE_COMMON_RAM_SYNTHCTL_CHRGFILT = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_SYNTHCTL_CHRGFILT_M = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_SYNTHCTL_CHRGFILT_S = @as(c_uint, 7);
pub const RFE_COMMON_RAM_SYNTHCTL_VREFBP = @as(c_uint, 0x0040);
pub const RFE_COMMON_RAM_SYNTHCTL_VREFBP_M = @as(c_uint, 0x0040);
pub const RFE_COMMON_RAM_SYNTHCTL_VREFBP_S = @as(c_uint, 6);
pub const RFE_COMMON_RAM_SYNTHCTL_TXWAITMOD = @as(c_uint, 0x0020);
pub const RFE_COMMON_RAM_SYNTHCTL_TXWAITMOD_M = @as(c_uint, 0x0020);
pub const RFE_COMMON_RAM_SYNTHCTL_TXWAITMOD_S = @as(c_uint, 5);
pub const RFE_COMMON_RAM_SYNTHCTL_PHEDISC = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_SYNTHCTL_PHEDISC_M = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_SYNTHCTL_PHEDISC_S = @as(c_uint, 4);
pub const RFE_COMMON_RAM_SYNTHCTL_PHEDISC_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_SYNTHCTL_PHEDISC_EN = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_SYNTHCTL_RTRIMTST = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_SYNTHCTL_RTRIMTST_M = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_SYNTHCTL_RTRIMTST_S = @as(c_uint, 3);
pub const RFE_COMMON_RAM_SYNTHCTL_RTRIMTST_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_SYNTHCTL_RTRIMTST_EN = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_SYNTHCTL_IIR = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_SYNTHCTL_IIR_M = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_SYNTHCTL_IIR_S = @as(c_uint, 2);
pub const RFE_COMMON_RAM_SYNTHCTL_IIR_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_SYNTHCTL_IIR_EN = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_SYNTHCTL_REFDTHR = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_SYNTHCTL_REFDTHR_M = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_SYNTHCTL_REFDTHR_S = @as(c_uint, 1);
pub const RFE_COMMON_RAM_SYNTHCTL_REFDTHR_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_SYNTHCTL_REFDTHR_EN = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_SYNTHCTL_FCDEM = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_SYNTHCTL_FCDEM_M = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_SYNTHCTL_FCDEM_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_SYNTHCTL_FCDEM_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_SYNTHCTL_FCDEM_EN = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_TDCCAL0_STOP_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_TDCCAL0_STOP_M = @as(c_uint, 0x0700);
pub const RFE_COMMON_RAM_TDCCAL0_STOP_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_TDCCAL1_SUB_W = @as(c_uint, 8);
pub const RFE_COMMON_RAM_TDCCAL1_SUB_M = @as(c_uint, 0x00FF);
pub const RFE_COMMON_RAM_TDCCAL1_SUB_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_TDCCAL2_AVG_W = @as(c_uint, 6);
pub const RFE_COMMON_RAM_TDCCAL2_AVG_M = @as(c_uint, 0x003F);
pub const RFE_COMMON_RAM_TDCCAL2_AVG_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_TDCPLL_STOP_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_TDCPLL_STOP_M = @as(c_uint, 0x0700);
pub const RFE_COMMON_RAM_TDCPLL_STOP_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_K1LSB_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_K1LSB_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_K1LSB_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K1MSB_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_K1MSB_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_K1MSB_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K2BL_HPM = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_K2BL_HPM_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_K2BL_HPM_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_K2BL_VAL_W = @as(c_uint, 15);
pub const RFE_COMMON_RAM_K2BL_VAL_M = @as(c_uint, 0x7FFF);
pub const RFE_COMMON_RAM_K2BL_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K2AL_HPM = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_K2AL_HPM_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_K2AL_HPM_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_K2AL_VAL_W = @as(c_uint, 15);
pub const RFE_COMMON_RAM_K2AL_VAL_M = @as(c_uint, 0x7FFF);
pub const RFE_COMMON_RAM_K2AL_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K3BL_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_K3BL_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_K3BL_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K3AL_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_K3AL_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_K3AL_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_K5_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_K5_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_K5_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_RXIF_FOFF_W = @as(c_uint, 12);
pub const RFE_COMMON_RAM_RXIF_FOFF_M = @as(c_uint, 0x0FFF);
pub const RFE_COMMON_RAM_RXIF_FOFF_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_TXIF_FOFF_W = @as(c_uint, 12);
pub const RFE_COMMON_RAM_TXIF_FOFF_M = @as(c_uint, 0x0FFF);
pub const RFE_COMMON_RAM_TXIF_FOFF_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_RTRIMOFF_VAL_W = @as(c_uint, 4);
pub const RFE_COMMON_RAM_RTRIMOFF_VAL_M = @as(c_uint, 0x000F);
pub const RFE_COMMON_RAM_RTRIMOFF_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_RTRIMMIN_VAL_W = @as(c_uint, 4);
pub const RFE_COMMON_RAM_RTRIMMIN_VAL_M = @as(c_uint, 0x000F);
pub const RFE_COMMON_RAM_RTRIMMIN_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DIVI_PDET = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVI_PDET_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVI_PDET_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_DIVI_NMIREFTRIM_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVI_NMIREFTRIM_M = @as(c_uint, 0x7000);
pub const RFE_COMMON_RAM_DIVI_NMIREFTRIM_S = @as(c_uint, 12);
pub const RFE_COMMON_RAM_DIVI_PMIREFTRIM_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVI_PMIREFTRIM_M = @as(c_uint, 0x0E00);
pub const RFE_COMMON_RAM_DIVI_PMIREFTRIM_S = @as(c_uint, 9);
pub const RFE_COMMON_RAM_DIVI_TXBOOST = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVI_TXBOOST_M = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVI_TXBOOST_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_DIVI_TXBOOST_DEFAULT = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVI_TXBOOST_INCREASED = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVI_S1GFRC = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVI_S1GFRC_M = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVI_S1GFRC_S = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVI_S1GFRC_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVI_S1GFRC_EN = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVI_BUFGAIN_W = @as(c_uint, 2);
pub const RFE_COMMON_RAM_DIVI_BUFGAIN_M = @as(c_uint, 0x0060);
pub const RFE_COMMON_RAM_DIVI_BUFGAIN_S = @as(c_uint, 5);
pub const RFE_COMMON_RAM_DIVI_BIAS = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVI_BIAS_M = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVI_BIAS_S = @as(c_uint, 4);
pub const RFE_COMMON_RAM_DIVI_OUT = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVI_OUT_M = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVI_OUT_S = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVI_OUT_FE_S1G = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVI_OUT_FE_2G4 = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVI_RATIO_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVI_RATIO_M = @as(c_uint, 0x0007);
pub const RFE_COMMON_RAM_DIVI_RATIO_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DIVF_PDET = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVF_PDET_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVF_PDET_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_DIVF_NMIREFTRIM_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVF_NMIREFTRIM_M = @as(c_uint, 0x7000);
pub const RFE_COMMON_RAM_DIVF_NMIREFTRIM_S = @as(c_uint, 12);
pub const RFE_COMMON_RAM_DIVF_PMIREFTRIM_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVF_PMIREFTRIM_M = @as(c_uint, 0x0E00);
pub const RFE_COMMON_RAM_DIVF_PMIREFTRIM_S = @as(c_uint, 9);
pub const RFE_COMMON_RAM_DIVF_TXBOOST = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVF_TXBOOST_M = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVF_TXBOOST_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_DIVF_TXBOOST_DEFAULT = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVF_TXBOOST_INCREASED = @as(c_uint, 0x0100);
pub const RFE_COMMON_RAM_DIVF_S1GFRC = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVF_S1GFRC_M = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVF_S1GFRC_S = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVF_S1GFRC_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVF_S1GFRC_EN = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVF_BUFGAIN_W = @as(c_uint, 2);
pub const RFE_COMMON_RAM_DIVF_BUFGAIN_M = @as(c_uint, 0x0060);
pub const RFE_COMMON_RAM_DIVF_BUFGAIN_S = @as(c_uint, 5);
pub const RFE_COMMON_RAM_DIVF_BIAS = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVF_BIAS_M = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVF_BIAS_S = @as(c_uint, 4);
pub const RFE_COMMON_RAM_DIVF_OUT = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVF_OUT_M = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVF_OUT_S = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVF_OUT_FE_S1G = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVF_OUT_FE_2G4 = @as(c_uint, 0x0008);
pub const RFE_COMMON_RAM_DIVF_RATIO_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVF_RATIO_M = @as(c_uint, 0x0007);
pub const RFE_COMMON_RAM_DIVF_RATIO_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DIVLDOI_ITEST = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVLDOI_ITEST_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVLDOI_ITEST_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_DIVLDOI_VOUTTRIM_W = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVLDOI_VOUTTRIM_M = @as(c_uint, 0x7F00);
pub const RFE_COMMON_RAM_DIVLDOI_VOUTTRIM_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_DIVLDOI_ITST = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVLDOI_ITST_M = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVLDOI_ITST_S = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVLDOI_TMUX_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVLDOI_TMUX_M = @as(c_uint, 0x0070);
pub const RFE_COMMON_RAM_DIVLDOI_TMUX_S = @as(c_uint, 4);
pub const RFE_COMMON_RAM_DIVLDOI_TMUX_OFF = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOI_TMUX_GND = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVLDOI_MODE = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOI_MODE_M = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOI_MODE_S = @as(c_uint, 2);
pub const RFE_COMMON_RAM_DIVLDOI_MODE_NORM = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOI_MODE_FAST = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOI_BYPASS = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOI_BYPASS_M = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOI_BYPASS_S = @as(c_uint, 1);
pub const RFE_COMMON_RAM_DIVLDOI_BYPASS_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOI_BYPASS_EN = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOI_CTL = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOI_CTL_M = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOI_CTL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DIVLDOI_CTL_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOI_CTL_EN = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOF_ITEST = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVLDOF_ITEST_M = @as(c_uint, 0x8000);
pub const RFE_COMMON_RAM_DIVLDOF_ITEST_S = @as(c_uint, 15);
pub const RFE_COMMON_RAM_DIVLDOF_VOUTTRIM_W = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVLDOF_VOUTTRIM_M = @as(c_uint, 0x7F00);
pub const RFE_COMMON_RAM_DIVLDOF_VOUTTRIM_S = @as(c_uint, 8);
pub const RFE_COMMON_RAM_DIVLDOF_ITST = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVLDOF_ITST_M = @as(c_uint, 0x0080);
pub const RFE_COMMON_RAM_DIVLDOF_ITST_S = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVLDOF_TMUX_W = @as(c_uint, 3);
pub const RFE_COMMON_RAM_DIVLDOF_TMUX_M = @as(c_uint, 0x0070);
pub const RFE_COMMON_RAM_DIVLDOF_TMUX_S = @as(c_uint, 4);
pub const RFE_COMMON_RAM_DIVLDOF_TMUX_OFF = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOF_TMUX_GND = @as(c_uint, 0x0010);
pub const RFE_COMMON_RAM_DIVLDOF_MODE = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOF_MODE_M = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOF_MODE_S = @as(c_uint, 2);
pub const RFE_COMMON_RAM_DIVLDOF_MODE_NORM = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOF_MODE_FAST = @as(c_uint, 0x0004);
pub const RFE_COMMON_RAM_DIVLDOF_BYPASS = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOF_BYPASS_M = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOF_BYPASS_S = @as(c_uint, 1);
pub const RFE_COMMON_RAM_DIVLDOF_BYPASS_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOF_BYPASS_EN = @as(c_uint, 0x0002);
pub const RFE_COMMON_RAM_DIVLDOF_CTL = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOF_CTL_M = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOF_CTL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DIVLDOF_CTL_DIS = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_DIVLDOF_CTL_EN = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_DIVLDOIOFF_VAL_W = @as(c_uint, 7);
pub const RFE_COMMON_RAM_DIVLDOIOFF_VAL_M = @as(c_uint, 0x007F);
pub const RFE_COMMON_RAM_DIVLDOIOFF_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_LDOSETTLE_VAL_W = @as(c_uint, 10);
pub const RFE_COMMON_RAM_LDOSETTLE_VAL_M = @as(c_uint, 0x03FF);
pub const RFE_COMMON_RAM_LDOSETTLE_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_CHRGSETTLE_VAL_W = @as(c_uint, 10);
pub const RFE_COMMON_RAM_CHRGSETTLE_VAL_M = @as(c_uint, 0x03FF);
pub const RFE_COMMON_RAM_CHRGSETTLE_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_DCOSETTLE_VAL_W = @as(c_uint, 10);
pub const RFE_COMMON_RAM_DCOSETTLE_VAL_M = @as(c_uint, 0x03FF);
pub const RFE_COMMON_RAM_DCOSETTLE_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_IFAMPRFLDOTX_TRIM_W = @as(c_uint, 7);
pub const RFE_COMMON_RAM_IFAMPRFLDOTX_TRIM_M = @as(c_uint, 0xFE00);
pub const RFE_COMMON_RAM_IFAMPRFLDOTX_TRIM_S = @as(c_uint, 9);
pub const RFE_COMMON_RAM_IFAMPRFLDODEFAULT_TRIM_W = @as(c_uint, 7);
pub const RFE_COMMON_RAM_IFAMPRFLDODEFAULT_TRIM_M = @as(c_uint, 0xFE00);
pub const RFE_COMMON_RAM_IFAMPRFLDODEFAULT_TRIM_S = @as(c_uint, 9);
pub const RFE_COMMON_RAM_LFKIBL_HPM = @as(c_uint, 0x1000);
pub const RFE_COMMON_RAM_LFKIBL_HPM_M = @as(c_uint, 0x1000);
pub const RFE_COMMON_RAM_LFKIBL_HPM_S = @as(c_uint, 12);
pub const RFE_COMMON_RAM_LFKIBL_KI_W = @as(c_uint, 12);
pub const RFE_COMMON_RAM_LFKIBL_KI_M = @as(c_uint, 0x0FFF);
pub const RFE_COMMON_RAM_LFKIBL_KI_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_LFKPBL_KP_W = @as(c_uint, 15);
pub const RFE_COMMON_RAM_LFKPBL_KP_M = @as(c_uint, 0x7FFF);
pub const RFE_COMMON_RAM_LFKPBL_KP_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_IKT_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_IKT_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_IKT_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_PHYRSSIOFFSET_VAL_W = @as(c_uint, 8);
pub const RFE_COMMON_RAM_PHYRSSIOFFSET_VAL_M = @as(c_uint, 0x00FF);
pub const RFE_COMMON_RAM_PHYRSSIOFFSET_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_SPARE0SHADOW_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_SPARE0SHADOW_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_SPARE0SHADOW_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_SPARE1SHADOW_VAL_W = @as(c_uint, 16);
pub const RFE_COMMON_RAM_SPARE1SHADOW_VAL_M = @as(c_uint, 0xFFFF);
pub const RFE_COMMON_RAM_SPARE1SHADOW_VAL_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_AGCINFO_MODE = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_AGCINFO_MODE_M = @as(c_uint, 0x0001);
pub const RFE_COMMON_RAM_AGCINFO_MODE_S = @as(c_uint, 0);
pub const RFE_COMMON_RAM_AGCINFO_MODE_FAST = @as(c_uint, 0x0000);
pub const RFE_COMMON_RAM_AGCINFO_MODE_GEN = @as(c_uint, 0x0001);
pub const LRF_EventNone = @as(c_uint, 0) << @as(c_uint, 0);
pub const LRF_EventOpDone = @as(c_uint, 1) << @as(c_uint, 0);
pub const LRF_EventPingRsp = @as(c_uint, 1) << @as(c_uint, 1);
pub const LRF_EventRxCtrl = @as(c_uint, 1) << @as(c_uint, 2);
pub const LRF_EventRxCtrlAck = @as(c_uint, 1) << @as(c_uint, 3);
pub const LRF_EventRxNok = @as(c_uint, 1) << @as(c_uint, 4);
pub const LRF_EventRxIgnored = @as(c_uint, 1) << @as(c_uint, 5);
pub const LRF_EventRxEmpty = @as(c_uint, 1) << @as(c_uint, 6);
pub const LRF_EventRxBufFull = @as(c_uint, 1) << @as(c_uint, 7);
pub const LRF_EventRxOk = @as(c_uint, 1) << @as(c_uint, 8);
pub const LRF_EventTxCtrl = @as(c_uint, 1) << @as(c_uint, 9);
pub const LRF_EventTxCtrlAckAck = @as(c_uint, 1) << @as(c_uint, 10);
pub const LRF_EventTxRetrans = @as(c_uint, 1) << @as(c_uint, 11);
pub const LRF_EventTxAck = @as(c_uint, 1) << @as(c_uint, 12);
pub const LRF_EventTxDone = @as(c_uint, 1) << @as(c_uint, 13);
pub const LRF_EventTxCtrlAck = @as(c_uint, 1) << @as(c_uint, 14);
pub const LRF_EventOpError = @as(c_uint, 1) << @as(c_uint, 15);
pub const LRF_EventRxfifo = @as(c_uint, 1) << @as(c_uint, 16);
pub const LRF_EventTxfifo = @as(c_uint, 1) << @as(c_uint, 17);
pub const LRF_EventLossOfLock = @as(c_uint, 1) << @as(c_uint, 18);
pub const LRF_EventLock = @as(c_uint, 1) << @as(c_uint, 19);
pub const LRF_EventRfesoft0 = @as(c_uint, 1) << @as(c_uint, 20);
pub const LRF_EventRfesoft1 = @as(c_uint, 1) << @as(c_uint, 21);
pub const LRF_EventRfedone = @as(c_uint, 1) << @as(c_uint, 22);
pub const LRF_EventMdmsoft0 = @as(c_uint, 1) << @as(c_uint, 23);
pub const LRF_EventMdmsoft1 = @as(c_uint, 1) << @as(c_uint, 24);
pub const LRF_EventMdmsoft2 = @as(c_uint, 1) << @as(c_uint, 25);
pub const LRF_EventMdmout = @as(c_uint, 1) << @as(c_uint, 26);
pub const LRF_EventMdmin = @as(c_uint, 1) << @as(c_uint, 27);
pub const LRF_EventMdmdone = @as(c_uint, 1) << @as(c_uint, 28);
pub const LRF_EventSystim0 = @as(c_uint, 1) << @as(c_uint, 29);
pub const LRF_EventSystim1 = @as(c_uint, 1) << @as(c_uint, 30);
pub const LRF_EventSystim2 = @as(c_uint, 1) << @as(c_uint, 31);
pub const IRQn = enum_IRQn;
pub const T_UINT32 = struct_T_UINT32;
pub const T_UINT16_WRITE = struct_T_UINT16_WRITE;
pub const T_UINT16_READ = struct_T_UINT16_READ;
pub const T_UINT32_WRITE = struct_T_UINT32_WRITE;
pub const T_UINT32_READ = struct_T_UINT32_READ;
